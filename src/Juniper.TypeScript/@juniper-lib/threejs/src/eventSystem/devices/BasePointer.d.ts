import { TypedEventTarget } from "@juniper-lib/events/dist/TypedEventTarget";
import { Vector3 } from "three";
import { BufferReaderWriter } from "../../BufferReaderWriter";
import type { BaseEnvironment } from "../../environment/BaseEnvironment";
import type { BaseCursor3D } from "../cursors/BaseCursor3D";
import { PointerID, PointerType } from "../Pointers";
import { RayTarget } from "../RayTarget";
import type { IPointer } from "./IPointer";
import { Pointer3DEvents } from "./Pointer3DEvent";
import { VirtualButton } from "./VirtualButton";
export declare abstract class BasePointer extends TypedEventTarget<Pointer3DEvents> implements IPointer {
    readonly type: PointerType;
    id: PointerID;
    protected readonly env: BaseEnvironment;
    readonly origin: Vector3;
    readonly direction: Vector3;
    readonly up: Vector3;
    canMoveView: boolean;
    mayTeleport: boolean;
    protected buttons: number;
    protected _isActive: boolean;
    protected moveDistance: number;
    private readonly pointerEvents;
    private lastButtons;
    private canClick;
    private dragDistance;
    private _enabled;
    private _cursor;
    private _curHit;
    private _curTarget;
    private _hoveredHit;
    private _hoveredTarget;
    constructor(type: PointerType, id: PointerID, env: BaseEnvironment, cursor: BaseCursor3D);
    abstract vibrate(): void;
    protected abstract updatePointerOrientation(): void;
    get isActive(): boolean;
    get canSend(): boolean;
    private get curHit();
    private get curTarget();
    private get hoveredHit();
    private set hoveredHit(value);
    get name(): string;
    get rayTarget(): RayTarget<void>;
    get cursor(): BaseCursor3D;
    set cursor(newCursor: BaseCursor3D);
    get needsUpdate(): boolean;
    get enabled(): boolean;
    set enabled(v: boolean);
    protected setButton(button: VirtualButton, pressed: boolean): void;
    isPressed(button: VirtualButton): boolean;
    wasPressed(button: VirtualButton): boolean;
    protected fireRay(origin: Vector3, direction: Vector3): void;
    private getEvent;
    update(): void;
    protected onUpdate(): void;
    private setEventState;
    get canDragView(): boolean;
    get canTeleport(): boolean;
    protected updateCursor(avatarHeadPos: Vector3, comfortOffset: Vector3, isLocal: boolean, defaultDistance: number): void;
    get bufferSize(): number;
    writeState(buffer: BufferReaderWriter): void;
}
//# sourceMappingURL=BasePointer.d.ts.map