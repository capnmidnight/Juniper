/// <reference types="webxr" />
import { CanvasTypes } from "@juniper-lib/dom/canvas";
import { TypedEvent, TypedEventTarget } from "@juniper-lib/events/TypedEventTarget";
import { BaseAsset } from "@juniper-lib/fetcher/Asset";
import { IFetcher } from "@juniper-lib/fetcher/IFetcher";
import { IProgress } from "@juniper-lib/progress/IProgress";
import { TimerTickEvent } from "@juniper-lib/timers/ITimer";
import { AmbientLight, DirectionalLight, GridHelper, PerspectiveCamera, Scene, WebGLRenderer } from "three";
import { AvatarLocal } from "../../AvatarLocal";
import { Fader } from "../../Fader";
import { LoadingBar } from "../../LoadingBar";
import { ScreenControl } from "../../ScreenControl";
import { Skybox } from "../../Skybox";
import { BodyFollower } from "../../animation/BodyFollower";
import { EventSystem } from "../../eventSystem/EventSystem";
import { Cursor3D } from "../../eventSystem/cursors/Cursor3D";
import { GLTF } from "../../examples/loaders/GLTFLoader";
import { XRHandModelFactory } from "../../examples/webxr/XRHandModelFactory";
import { XRTimer, XRTimerTickEvent } from "../XRTimer";
import "./style.css";
type BaseEnvironmentEvents = {
    sceneclearing: TypedEvent<"sceneclearing">;
    scenecleared: TypedEvent<"scenecleared">;
    quitting: TypedEvent<"quitting">;
    newcursorloaded: TypedEvent<"newcursorloaded">;
    update: XRTimerTickEvent;
};
export declare class BaseEnvironment<Events = unknown> extends TypedEventTarget<Events & BaseEnvironmentEvents> {
    private readonly styleSheetPath;
    readonly fetcher: IFetcher;
    private baseLayer;
    private readonly layers;
    private readonly layerSortOrder;
    private readonly spectator;
    private readonly lastViewport;
    private readonly curViewport;
    private readonly gltfLoader;
    protected readonly fader: Fader;
    private fadeDepth;
    readonly defaultAvatarHeight: number;
    readonly scene: Scene;
    readonly stage: import("three").Object3D<import("three").Event>;
    readonly ambient: AmbientLight;
    readonly sun: DirectionalLight;
    readonly ground: GridHelper;
    readonly foreground: import("three").Object3D<import("three").Event>;
    readonly loadingBar: LoadingBar;
    readonly handModelFactory: XRHandModelFactory;
    DEBUG: boolean;
    readonly camera: PerspectiveCamera;
    readonly renderer: WebGLRenderer;
    readonly timer: XRTimer;
    readonly worldUISpace: BodyFollower;
    readonly skybox: Skybox;
    readonly avatar: AvatarLocal;
    readonly cursor3D: Cursor3D;
    readonly screenControl: ScreenControl;
    readonly eventSys: EventSystem;
    enableSpectator: boolean;
    constructor(canvas: CanvasTypes, styleSheetPath: string, fetcher: IFetcher, enableFullResolution: boolean, enableAnaglyph: boolean, DEBUG?: boolean, defaultAvatarHeight?: number, defaultFOV?: number);
    get useNewColorModel(): boolean;
    set useNewColorModel(enabled: boolean);
    private _start;
    get gl(): WebGLRenderingContext | WebGL2RenderingContext;
    get referenceSpace(): XRReferenceSpace;
    private update;
    drawSnapshot(): void;
    protected preRender(_evt: TimerTickEvent): void;
    protected onQuitting(): Promise<void>;
    get hasAlpha(): any;
    get xrSession(): XRSession;
    private _xrBinding;
    get xrBinding(): XRWebGLBinding;
    private _xrMediaBinding;
    get xrMediaBinding(): XRMediaBinding;
    private get isReadyForLayers();
    private _hasXRMediaLayers;
    get hasXRMediaLayers(): boolean;
    private _hasXRCompositionLayers;
    get hasXRCompositionLayers(): boolean;
    private layerSorter;
    addWebXRLayer(layer: XRLayer, sortOrder: number): void;
    removeWebXRLayer(layer: XRLayer): void;
    private updateLayers;
    clearScene(): void;
    fadeOut(): Promise<void>;
    fadeIn(): Promise<void>;
    withFade<T>(action: () => Promise<T>): Promise<T>;
    get showWebXRLayers(): boolean;
    private set3DCursor;
    load(prog: IProgress, ...assets: BaseAsset[]): Promise<void>;
    load(...assets: BaseAsset[]): Promise<void>;
    loadGltf(file: string): Promise<GLTF>;
}
export {};
//# sourceMappingURL=index.d.ts.map