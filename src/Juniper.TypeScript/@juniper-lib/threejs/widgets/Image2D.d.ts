import { IDisposable } from "@juniper-lib/tslib/using";
import { BufferGeometry, Mesh, MeshBasicMaterial, MeshBasicMaterialParameters, Object3D } from "three";
import { StereoLayoutName } from "../VideoPlayer3D";
import { BaseEnvironment } from "../environment/BaseEnvironment";
export type Image2DObjectSizeMode = "none" | "fixed-height" | "fixed-width";
export type WebXRLayerType = "none" | "static" | "dynamic";
export declare class Image2D extends Object3D implements IDisposable {
    webXRLayerType: WebXRLayerType;
    private readonly lastMatrixWorld;
    private _imageWidth;
    private _imageHeight;
    private forceUpdate;
    private wasUsingLayer;
    private layer;
    private curImage;
    private lastImage;
    private lastWidth;
    private lastHeight;
    protected env: BaseEnvironment;
    mesh: Mesh<BufferGeometry, MeshBasicMaterial>;
    stereoLayoutName: StereoLayoutName;
    sizeMode: Image2DObjectSizeMode;
    constructor(env: BaseEnvironment, name: string, webXRLayerType: WebXRLayerType, materialOrOptions?: MeshBasicMaterialParameters | MeshBasicMaterial);
    copy(source: this, recursive?: boolean): this;
    dispose(): void;
    private disposeImage;
    private setImageSize;
    get imageWidth(): number;
    get imageHeight(): number;
    get imageAspectRatio(): number;
    get objectWidth(): number;
    set objectWidth(v: number);
    get objectHeight(): number;
    set objectHeight(v: number);
    get pixelDensity(): number;
    set pixelDensity(ppi: number);
    private setEnvAndName;
    private get needsLayer();
    removeWebXRLayer(): void;
    setTextureMap(img: TexImageSource): void;
    private get isVideo();
    updateTexture(): void;
    private checkWebXRLayer;
}
//# sourceMappingURL=Image2D.d.ts.map