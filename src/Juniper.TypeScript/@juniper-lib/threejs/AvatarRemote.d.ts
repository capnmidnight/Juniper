import { AudioStreamSource } from "@juniper-lib/audio/sources/AudioStreamSource";
import { TextImageOptions } from "@juniper-lib/graphics2d/TextImage";
import { IDisposable } from "@juniper-lib/tslib/using";
import type { RemoteUser } from "@juniper-lib/webrtc/RemoteUser";
import { Object3D, Quaternion, Vector3 } from "three";
import type { Environment } from "./environment/Environment";
import { ErsatzObject } from "./objects";
export declare class AvatarRemote implements ErsatzObject, IDisposable {
    private readonly env;
    readonly avatar: Object3D;
    private defaultAvatarHeight;
    get object(): Object3D<import("three").Event>;
    private _isInstructor;
    private readonly pointers;
    private height;
    private readonly userID;
    private readonly head;
    private readonly body;
    private readonly headFollower;
    get bodyQuaternion(): Quaternion;
    readonly stage: Object3D<import("three").Event>;
    private readonly billboard;
    private readonly nameTag;
    private readonly chatBox;
    private readonly activity;
    private readonly stagePositionTarget;
    private readonly stageOrientationTarget;
    private readonly headPositionTarget;
    private readonly headOrientationTarget;
    readonly worldPos: Vector3;
    readonly worldQuat: Quaternion;
    private readonly F;
    private readonly M;
    private _headSize;
    private _headPulse;
    readonly comfortOffset: Vector3;
    constructor(env: Environment, user: RemoteUser, source: AudioStreamSource, avatar: Object3D, defaultAvatarHeight: number, font: Partial<TextImageOptions>);
    get audioStream(): MediaStream;
    set audioStream(v: MediaStream);
    private videoElement;
    private videoMesh;
    private _videoStream;
    get videoStream(): MediaStream;
    set videoStream(v: MediaStream);
    dispose(): void;
    get isInstructor(): boolean;
    private get headSize();
    private set headSize(value);
    private get headPulse();
    private set headPulse(value);
    private refreshHead;
    get userName(): string;
    set userName(name: string);
    get chatText(): string;
    private clearChatTimer;
    set chatText(v: string);
    refreshCursors(): void;
    update(dt: number): void;
    private assurePointer;
    private removePointersExcept;
    private removePointer;
    private readState;
}
//# sourceMappingURL=AvatarRemote.d.ts.map