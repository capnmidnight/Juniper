import { IElementAppliable } from "./tags";
export declare function perc(value: number): CssPercentage;
export declare function deg(value: number): CssAngle;
export declare function rad(value: number): CssAngle;
export declare function grad(value: number): CssAngle;
export declare function turn(value: number): CssAngle;
export declare function cap(value: number): CssFontRelativeLength;
export declare function ch(value: number): CssFontRelativeLength;
export declare function em(value: number): CssFontRelativeLength;
export declare function ex(value: number): CssFontRelativeLength;
export declare function ic(value: number): CssFontRelativeLength;
export declare function lh(value: number): CssFontRelativeLength;
export declare function rem(value: number): CssFontRelativeLength;
export declare function rlh(value: number): CssFontRelativeLength;
export declare function vh(value: number): CssViewportPercentageLength;
export declare function vw(value: number): CssViewportPercentageLength;
export declare function vi(value: number): CssViewportPercentageLength;
export declare function vb(value: number): CssViewportPercentageLength;
export declare function vmin(value: number): CssViewportPercentageLength;
export declare function vmax(value: number): CssViewportPercentageLength;
export declare function px(value: number): CssAbsoluteLength;
export declare function cm(value: number): CssAbsoluteLength;
export declare function mm(value: number): CssAbsoluteLength;
export declare function Q(value: number): CssAbsoluteLength;
export declare function inch(value: number): CssAbsoluteLength;
export declare function pc(value: number): CssAbsoluteLength;
export declare function pt(value: number): CssAbsoluteLength;
export declare function fr(value: number): CssGridFlexValue;
export declare function hash(r: HexDigit, g: HexDigit, b: HexDigit, a?: HexDigit): CssColorHashValue;
export declare function hash(r: HexNumber, g: HexNumber, b: HexNumber, a?: HexNumber): CssColorHashValue;
export declare function rgb(red: number, green: number, blue: number, alpha?: number): CssColorRGBValue;
export declare function rgba(red: number, green: number, blue: number, alpha: number): CssColorRGBValue;
export declare function hsl(hue: CssAngle, saturation: CssPercentage, lightness: CssPercentage, alpha?: CssAlpha): CssColorHSLValue;
export declare function hsla(hue: CssAngle, saturation: CssPercentage, lightness: CssPercentage, alpha: CssAlpha): CssColorHSLValue;
export declare function hwb(hue: CssAngle, whiteness: CssPercentage, blackness: CssPercentage, alpha?: CssAlpha): CssColorHWBValue;
export declare function lch(lightness: CssPercentage, chroma: number, hue: CssAngle, alpha?: CssAlpha): CssColorLCHValue;
export declare function lab(lightness: CssPercentage, a: number, b: number, alpha?: CssAlpha): CssColorLabValue;
export declare function matrix(a: number, b: number, c: number, d: number, tx: number, ty: number): CssTransformMatrixValue;
export declare function matrix3d(a1: number, b1: number, c1: number, d1: number, a2: number, b2: number, c2: number, d2: number, a3: number, b3: number, c3: number, d3: number, a4: number, b4: number, c4: number, d4: number): CssTransformMatrix3DValue;
export declare function perspectiv(v: CssLength | "none"): CssTransformPerspectiveValue;
export declare function rotate(a: CssAngle): CssTransformRotate;
export declare function rotate3d(x: number, y: number, z: number, a: CssAngle): CSSTransformRotate3D;
export declare function rotateX(a: CssAngle): CssTransformRotateX;
export declare function rotateY(a: CssAngle): CssTransformRotateY;
export declare function rotateZ(a: CssAngle): CssTransformRotateZ;
export declare function translate(x: CssLengthPercentage, y: CssLengthPercentage): CssTransformTranslate;
export declare function translate3d(x: CssLengthPercentage, y: CssLengthPercentage, z: CssLengthPercentage): CSSTransformTranslate3D;
export declare function translateX(x: CssLengthPercentage): CssTransformTranslateX;
export declare function translateY(y: CssLengthPercentage): CssTransformTranslateY;
export declare function translateZ(z: CssLengthPercentage): CssTransformTranslateZ;
export declare function scale(x: number, y: number): CssTransformScale;
export declare function scale3d(x: number, y: number, z: number): CSSTransformScale3D;
export declare function scaleX(x: number): CssTransformScaleX;
export declare function scaleY(y: number): CssTransformScaleY;
export declare function scaleZ(z: number): CssTransformScaleZ;
export declare function skew(x: CssAngle, y: CssAngle): CssTransformSkew;
export declare function skewX(x: CssAngle): CssTransformSkewX;
export declare function skewY(y: CssAngle): CssTransformSkewY;
export declare function repeat(count: number | "auto-fill" | "auto-fit", expr: string): CssGridTemplateTrackRepeatValue;
export declare function fitContent(len: CssLengthPercentage): CssGridTemplateTrackFitContentValue;
export declare function minMax(min: CssGridTemplateTrackSize, max: CssGridTemplateTrackSize): CssGridTemplateTrackMinMaxValue;
/**
 * A selection of fonts for preferred monospace rendering.
 **/
export declare function getMonospaceFonts(): string;
/**
 * A selection of fonts for preferred monospace rendering.
 **/
export declare function getMonospaceFamily(): CssElementStyleProp<"fontFamily">;
/**
 * A selection of fonts that should match whatever the user's operating system normally uses.
 **/
export declare function getSystemFonts(): string;
/**
 * A selection of fonts that should match whatever the user's operating system normally uses.
 **/
export declare function getSystemFamily(): CssElementStyleProp<"fontFamily">;
/**
 * A selection of serif fonts.
 **/
export declare function getSerifFonts(): string;
export declare function getSerifFamily(): CssElementStyleProp<"fontFamily">;
export type CssPropName = Exclude<keyof CSSStyleDeclaration, "length" | "parentRule" | "getPropertyPriority" | "getPropertyValue" | "item" | "removeProperty" | "setProperty"> & string;
export declare class Prop {
    private readonly _value;
    constructor(_value: string);
    get value(): string;
    toString(): string;
}
export declare class PropSet<T extends Prop = Prop> {
    private readonly pre;
    private readonly props;
    private readonly post;
    constructor(pre: string, props: (T | PropSet<T>)[], post: string);
    get value(): string;
    toString(): string;
    applyToSheet(sheet: CSSStyleSheet): void;
}
declare class KeyValueProp extends Prop {
    private readonly _name;
    private readonly sep;
    constructor(_name: string, sep: string, value: string);
    get name(): string;
    toString(): string;
}
declare class SelectorPropSet<T extends Prop = Prop> extends PropSet<T> {
    constructor(selector: string, props: (T | PropSet<T>)[]);
}
declare class CssDeclareProp extends KeyValueProp {
    constructor(key: string, value: string);
}
export declare class CssElementStyleProp<K extends CssPropName = CssPropName> extends CssDeclareProp implements IElementAppliable {
    readonly key: K;
    private priority;
    constructor(key: K, value: string | number);
    /**
     * Set the attribute value on an HTMLElement
     * @param elem - the element on which to set the attribute.
     */
    applyToElement(elem: HTMLElement): void;
    important(): this;
    get value(): string;
}
export declare function isCssElementStyleProp(obj: any): obj is CssElementStyleProp;
declare class CssElementStylePropSet extends SelectorPropSet<CssElementStyleProp> {
    constructor(selector: string, props: CssElementStyleProp[]);
}
export declare function rule(selector: string, ...props: CssElementStyleProp[]): CssElementStylePropSet;
export declare function alignItems(v: CssGlobalValue | CssJustifyAlignValue): CssElementStyleProp<"alignItems">;
export declare function alignContent(v: CssGlobalValue | CssJustifyAlignContentValue): CssElementStyleProp<"alignContent">;
export declare function alignSelf(v: CssGlobalValue | CssJustifyAlignSelfValue): CssElementStyleProp<"alignSelf">;
export declare function all(v: CssGlobalValue): CssElementStyleProp<"all">;
export declare function alignmentBaseline(v: CssAlignmentBaselineValue): CssElementStyleProp<"alignmentBaseline">;
export declare function animationDelay(v: CssGlobalValue): CssElementStyleProp;
export declare function animationDelay(...v: CssTimeValue[]): CssElementStyleProp;
export declare function animationDuration(v: CssGlobalValue): CssElementStyleProp;
export declare function animationDuration(...v: CssTimeValue[]): CssElementStyleProp;
export declare function animationDirection(v: CssGlobalValue): CssElementStyleProp;
export declare function animationDirection(...v: CssAnimationDirectionValue[]): CssElementStyleProp;
export declare function animationFillMode(v: CssGlobalValue): CssElementStyleProp;
export declare function animationFillMode(...v: CssAnimationFillModeValue[]): CssElementStyleProp;
export declare function animationIterationCount(v: CssGlobalValue): CssElementStyleProp;
export declare function animationIterationCount(...v: CssAnimationIterationCountValue[]): CssElementStyleProp;
export declare function animationName(v: CssGlobalValue): CssElementStyleProp;
export declare function animationName(...v: string[]): CssElementStyleProp;
export declare function animationPlayState(v: CssGlobalValue): CssElementStyleProp;
export declare function animationPlayState(...v: CssAnimationPlayStateValue[]): CssElementStyleProp;
export declare function animationTimingFunction(v: CssGlobalValue): CssElementStyleProp;
export declare function animationTimingFunction(...v: CssAnimationTimingFunctionValue[]): CssElementStyleProp;
export declare function animation(v: CssGlobalValue): CssElementStyleProp;
export declare function animation(...v: (string | number)[]): CssElementStyleProp;
export declare function appearance(v: CssGlobalValue | CssAppearanceValue): CssElementStyleProp<"appearance">;
export declare function backdropFilter(v: "none" | CssGlobalValue): CssElementStyleProp;
export declare function backdropFilter(...v: CssFilterFunction[]): CssElementStyleProp;
export declare function backfaceVisibility(v: CssGlobalValue | CssBackfaceVisibilityValue): CssElementStyleProp<"backfaceVisibility">;
export declare function backgroundAttachment(v: CssGlobalValue | CssBackgroundAttachmentValue): CssElementStyleProp<"backgroundAttachment">;
export declare function backgroundBlendMode(v: CssGlobalValue): CssElementStyleProp;
export declare function backgroundBlendMode(...v: CssBlendModeValue[]): CssElementStyleProp;
export declare function backgroundClip(v: CssGlobalValue | CssClipValue): CssElementStyleProp;
export declare function backgroundColor(v: CssGlobalValue | CssColorValue): CssElementStyleProp<"backgroundColor">;
export declare function backgroundImage(v: CssGlobalValue): CssElementStyleProp;
export declare function backgroundImage(...v: CssImage[]): CssElementStyleProp;
export declare function backgroundOrigin(v: CssGlobalValue | CssBoxType): CssElementStyleProp;
export declare function backgroundPosition(v: CssGlobalValue): CssElementStyleProp;
export declare function backgroundPosition(v: CssBackgroundPositionValue): CssElementStyleProp;
export declare function backgroundPosition(x: CssLengthPercentage, y: CssLengthPercentage): CssElementStyleProp;
export declare function backgroundPosition(x: CssBackgroundPositionHorizontalKeyword, y: CssBackgroundPositionVerticalValue): CssElementStyleProp;
export declare function backgroundPosition(y: CssBackgroundPositionVerticalKeyword, x: CssBackgroundPositionHorizontalValue): CssElementStyleProp;
export declare function backgroundPosition(x: CssBackgroundPositionHorizontalKeyword, y: CssBackgroundPositionVerticalKeyword, yOffset: CssLengthPercentage): CssElementStyleProp;
export declare function backgroundPosition(x: CssBackgroundPositionHorizontalKeyword, xOffset: CssLengthPercentage, y: CssBackgroundPositionVerticalKeyword): CssElementStyleProp;
export declare function backgroundPosition(y: CssBackgroundPositionVerticalKeyword, x: CssBackgroundPositionHorizontalKeyword, xOffset: CssLengthPercentage): CssElementStyleProp;
export declare function backgroundPosition(y: CssBackgroundPositionVerticalKeyword, yOffset: CssLengthPercentage, x: CssBackgroundPositionHorizontalKeyword): CssElementStyleProp;
export declare function backgroundPosition(x: CssBackgroundPositionHorizontalKeyword, xOffset: CssLengthPercentage, y: CssBackgroundPositionVerticalKeyword, yOffset: CssLengthPercentage): CssElementStyleProp;
export declare function backgroundPosition(y: CssBackgroundPositionVerticalKeyword, yOffset: CssLengthPercentage, x: CssBackgroundPositionHorizontalKeyword, xOffset: CssLengthPercentage): CssElementStyleProp;
export declare function backgroundPositionX(v: CssGlobalValue): CssElementStyleProp;
export declare function backgroundPositionX(x: CssBackgroundPositionHorizontalValue): CssElementStyleProp;
export declare function backgroundPositionX(x: CssBackgroundPositionHorizontalKeyword, xOffset: CssLengthPercentage): CssElementStyleProp;
export declare function backgroundPositionY(v: CssGlobalValue): CssElementStyleProp;
export declare function backgroundPositionY(y: CssBackgroundPositionVerticalValue): CssElementStyleProp;
export declare function backgroundPositionY(y: CssBackgroundPositionVerticalKeyword, yOffset: CssLengthPercentage): CssElementStyleProp;
export declare function backgroundRepeat(v: CssGlobalValue): CssElementStyleProp;
export declare function backgroundRepeat(v: CssBackgroundRepeatValue): CssElementStyleProp;
export declare function backgroundRepeat(x: CssBackgroundRepeat, y: CssBackgroundRepeat): CssElementStyleProp;
export declare function backgroundSize(v: CssGlobalValue | CssBackgroundSizeSingleValue): CssElementStyleProp;
export declare function backgroundSize(x: CssBackgroundSizeValue, y: CssBackgroundSizeValue): CssElementStyleProp;
export declare function background(v: CssGlobalValue): CssElementStyleProp;
export declare function background(...v: string[]): CssElementStyleProp;
export declare function baselineShift(v: string): CssElementStyleProp<"baselineShift">;
export declare function blockSize(v: CssGlobalValue | CssSizePropertyValue): CssElementStyleProp<"blockSize">;
export declare function border(v: string | 0): CssElementStyleProp<"border">;
export declare function borderBlockEnd(v: string): CssElementStyleProp<"borderBlockEnd">;
export declare function borderBlockEndColor(v: CssGlobalValue | CssColorValue): CssElementStyleProp<"borderBlockEndColor">;
export declare function borderBlockEndStyle(v: CssGlobalValue | CssBorderStyleValue): CssElementStyleProp<"borderBlockEndStyle">;
export declare function borderBlockEndWidth(v: CssGlobalValue | CssLengthPercentage | CssWidthKeyword | "auto"): CssElementStyleProp<"borderBlockEndWidth">;
export declare function borderBlockStart(v: string): CssElementStyleProp<"borderBlockStart">;
export declare function borderBlockStartColor(v: CssGlobalValue | CssColorValue): CssElementStyleProp<"borderBlockStartColor">;
export declare function borderBlockStartStyle(v: CssGlobalValue | CssBorderStyleValue): CssElementStyleProp<"borderBlockStartStyle">;
export declare function borderBlockStartWidth(v: CssGlobalValue | CssLengthPercentage | CssWidthKeyword | "auto"): CssElementStyleProp<"borderBlockStartWidth">;
export declare function borderBottom(v: string): CssElementStyleProp<"borderBottom">;
export declare function borderBottomColor(v: CssGlobalValue | CssColorValue): CssElementStyleProp<"borderBottomColor">;
export declare function borderBottomLeftRadius(v: CssGlobalValue): CssElementStyleProp;
export declare function borderBottomLeftRadius(v: CssLengthPercentage): CssElementStyleProp;
export declare function borderBottomLeftRadius(major: CssLengthPercentage, minor: CssLengthPercentage): CssElementStyleProp;
export declare function borderBottomRightRadius(v: CssGlobalValue): CssElementStyleProp;
export declare function borderBottomRightRadius(v: CssLengthPercentage): CssElementStyleProp;
export declare function borderBottomRightRadius(major: CssLengthPercentage, minor: CssLengthPercentage): CssElementStyleProp;
export declare function borderBottomStyle(v: CssGlobalValue | CssBorderStyleValue): CssElementStyleProp<"borderBottomStyle">;
export declare function borderBottomWidth(v: CssGlobalValue | CssLengthPercentage | CssWidthKeyword | "auto"): CssElementStyleProp<"borderBottomWidth">;
export declare function borderCollapse(v: CssGlobalValue | CssBorderCollapseValue): CssElementStyleProp<"borderCollapse">;
export declare function borderColor(v: CssGlobalValue): CssElementStyleProp;
export declare function borderColor(all: CssColorValue): CssElementStyleProp;
export declare function borderColor(vertical: CssColorValue, horizontal: CssColorValue): CssElementStyleProp;
export declare function borderColor(top: CssColorValue, horizontal: CssColorValue, bottom: CssColorValue): CssElementStyleProp;
export declare function borderColor(top: CssColorValue, right: CssColorValue, bottom: CssColorValue, left: CssColorValue): CssElementStyleProp;
export declare function borderImage(v: string): CssElementStyleProp<"borderImage">;
export declare function borderImageOutset(v: CssGlobalValue): CssElementStyleProp;
export declare function borderImageOutset(all: CssLength | number): CssElementStyleProp;
export declare function borderImageOutset(vertical: CssLength | number, horizontal: CssLength | number): CssElementStyleProp;
export declare function borderImageOutset(top: CssLength | number, horizontal: CssLength | number, bottom: CssLength | number): CssElementStyleProp;
export declare function borderImageOutset(top: CssLength | number, right: CssLength | number, bottom: CssLength | number, left: CssLength | number): CssElementStyleProp;
export declare function borderImageRepeat(v: CssGlobalValue): CssElementStyleProp;
export declare function borderImageRepeat(all: CssBorderRepeatValue): CssElementStyleProp;
export declare function borderImageRepeat(vertical: CssBorderRepeatValue, horizontal: CssBorderRepeatValue): CssElementStyleProp;
export declare function borderImageSlice(v: CssGlobalValue): CssElementStyleProp;
export declare function borderImageSlice(all: CssLengthPercentage | "fill"): CssElementStyleProp;
export declare function borderImageSlice(vertical: CssLengthPercentage | "fill", horizontal: CssLengthPercentage | "fill"): CssElementStyleProp;
export declare function borderImageSlice(top: CssLengthPercentage | "fill", horizontal: CssLengthPercentage | "fill", bottom: CssLengthPercentage | "fill"): CssElementStyleProp;
export declare function borderImageSlice(top: CssLengthPercentage | "fill", right: CssLengthPercentage | "fill", bottom: CssLengthPercentage | "fill", left: CssLengthPercentage | "fill"): CssElementStyleProp;
export declare function borderImageSource(v: CssGlobalValue | CssImage | "none"): CssElementStyleProp<"borderImageSource">;
export declare function borderImageWidth(v: CssGlobalValue): CssElementStyleProp;
export declare function borderImageWidth(v: CssLengthPercentage | "auto"): CssElementStyleProp;
export declare function borderImageWidth(vertical: CssLengthPercentage | "auto", horizontal: CssLengthPercentage | "auto"): CssElementStyleProp;
export declare function borderImageWidth(top: CssLengthPercentage | "auto", horizontal: CssLengthPercentage | "auto", bottom: CssLengthPercentage | "auto"): CssElementStyleProp;
export declare function borderImageWidth(top: CssLengthPercentage | "auto", right: CssLengthPercentage | "auto", bottom: CssLengthPercentage | "auto", left: CssLengthPercentage | "auto"): CssElementStyleProp;
export declare function borderInlineEnd(v: string): CssElementStyleProp<"borderInlineEnd">;
export declare function borderInlineEndColor(v: CssGlobalValue | CssColorValue): CssElementStyleProp<"borderInlineEndColor">;
export declare function borderInlineEndStyle(v: CssGlobalValue | CssBorderStyleValue): CssElementStyleProp<"borderInlineEndStyle">;
export declare function borderInlineEndWidth(v: CssGlobalValue | CssLengthPercentage | CssWidthKeyword | "auto"): CssElementStyleProp<"borderInlineEndWidth">;
export declare function borderInlineStart(v: string): CssElementStyleProp<"borderInlineStart">;
export declare function borderInlineStartColor(v: CssGlobalValue | CssColorValue): CssElementStyleProp<"borderInlineStartColor">;
export declare function borderInlineStartStyle(v: CssGlobalValue | CssBorderStyleValue): CssElementStyleProp<"borderInlineStartStyle">;
export declare function borderInlineStartWidth(v: CssGlobalValue | CssLengthPercentage | CssWidthKeyword | "auto"): CssElementStyleProp<"borderInlineStartWidth">;
export declare function borderLeft(v: string): CssElementStyleProp<"borderLeft">;
export declare function borderLeftColor(v: CssGlobalValue | CssColorValue): CssElementStyleProp<"borderLeftColor">;
export declare function borderLeftStyle(v: CssGlobalValue | CssBorderStyleValue): CssElementStyleProp<"borderLeftStyle">;
export declare function borderLeftWidth(v: CssGlobalValue | CssLengthPercentage | CssWidthKeyword | "auto"): CssElementStyleProp<"borderLeftWidth">;
export declare function borderRadius(v: CssGlobalValue): CssElementStyleProp;
export declare function borderRadius(all: CssLengthPercentage): CssElementStyleProp;
export declare function borderRadius(all: [CssLengthPercentage, CssLengthPercentage]): CssElementStyleProp;
export declare function borderRadius(topLeftBottomRight: CssLengthPercentage, topRightBottomLeft: CssLengthPercentage): CssElementStyleProp;
export declare function borderRadius(topLeft: CssLengthPercentage, topRightBottomLeft: CssLengthPercentage, bottomRight: CssLengthPercentage): CssElementStyleProp;
export declare function borderRadius(topLeft: CssLengthPercentage, topRight: CssLengthPercentage, bottomRight: CssLengthPercentage, bottomLeft: CssLengthPercentage): CssElementStyleProp;
export declare function borderRight(v: string): CssElementStyleProp<"borderRight">;
export declare function borderRightColor(v: CssGlobalValue | CssColorValue): CssElementStyleProp<"borderRightColor">;
export declare function borderRightStyle(v: CssGlobalValue | CssBorderStyleValue): CssElementStyleProp<"borderRightStyle">;
export declare function borderRightWidth(v: CssGlobalValue | CssLengthPercentage | CssWidthKeyword | "auto"): CssElementStyleProp<"borderRightWidth">;
export declare function borderSpacing(v: string): CssElementStyleProp<"borderSpacing">;
export declare function borderStyle(v: CssGlobalValue): CssElementStyleProp;
export declare function borderStyle(all: CssBorderStyleValue): CssElementStyleProp;
export declare function borderStyle(vertical: CssBorderStyleValue, horizontal: CssBorderStyleValue): CssElementStyleProp;
export declare function borderStyle(top: CssBorderStyleValue, horizontal: CssBorderStyleValue, bottom: CssBorderStyleValue): CssElementStyleProp;
export declare function borderStyle(top: CssBorderStyleValue, right: CssBorderStyleValue, bottom: CssBorderStyleValue, left: CssBorderStyleValue): CssElementStyleProp;
export declare function borderTop(v: string): CssElementStyleProp<"borderTop">;
export declare function borderTopColor(v: CssGlobalValue | CssColorValue): CssElementStyleProp<"borderTopColor">;
export declare function borderTopLeftRadius(v: CssGlobalValue): CssElementStyleProp;
export declare function borderTopLeftRadius(v: CssLengthPercentage): CssElementStyleProp;
export declare function borderTopLeftRadius(major: CssLengthPercentage, minor: CssLengthPercentage): CssElementStyleProp;
export declare function borderTopRightRadius(v: CssGlobalValue): CssElementStyleProp;
export declare function borderTopRightRadius(v: CssLengthPercentage): CssElementStyleProp;
export declare function borderTopRightRadius(major: CssLengthPercentage, minor: CssLengthPercentage): CssElementStyleProp;
export declare function borderTopStyle(v: CssGlobalValue | CssBorderStyleValue): CssElementStyleProp<"borderTopStyle">;
export declare function borderTopWidth(v: CssGlobalValue | CssLengthPercentage | CssWidthKeyword | "auto"): CssElementStyleProp<"borderTopWidth">;
export declare function borderWidth(v: CssGlobalValue): CssElementStyleProp;
export declare function borderWidth(all: CssLengthPercentage | CssWidthKeyword | "auto"): CssElementStyleProp;
export declare function borderWidth(vert: CssLengthPercentage | CssWidthKeyword | "auto", horiz: CssLengthPercentage | CssWidthKeyword | "auto"): CssElementStyleProp;
export declare function borderWidth(top: CssLengthPercentage | CssWidthKeyword | "auto", horiz: CssLengthPercentage | CssWidthKeyword | "auto", bottom: CssLengthPercentage | CssWidthKeyword | "auto"): CssElementStyleProp;
export declare function borderWidth(top: CssLengthPercentage | CssWidthKeyword | "auto", right: CssLengthPercentage | CssWidthKeyword | "auto", bottom: CssLengthPercentage | CssWidthKeyword | "auto", left: CssLengthPercentage | CssWidthKeyword | "auto"): CssElementStyleProp;
export declare function bottom(v: CssGlobalValue | CssElementPositionValue): CssElementStyleProp<"bottom">;
export declare function boxShadow(v: string): CssElementStyleProp<"boxShadow">;
export declare function boxSizing(v: string): CssElementStyleProp<"boxSizing">;
export declare function breakAfter(v: string): CssElementStyleProp<"breakAfter">;
export declare function breakBefore(v: string): CssElementStyleProp<"breakBefore">;
export declare function breakInside(v: string): CssElementStyleProp<"breakInside">;
export declare function captionSide(v: string): CssElementStyleProp<"captionSide">;
export declare function caretColor(v: string): CssElementStyleProp<"caretColor">;
export declare function clear(v: string): CssElementStyleProp<"clear">;
export declare function clip(v: string): CssElementStyleProp<"clip">;
export declare function clipPath(v: string): CssElementStyleProp<"clipPath">;
export declare function clipRule(v: string): CssElementStyleProp<"clipRule">;
export declare function color(v: CssGlobalValue): CssElementStyleProp;
export declare function color(v: CssColorValue): CssElementStyleProp;
export declare function colorInterpolation(v: string): CssElementStyleProp<"colorInterpolation">;
export declare function colorInterpolationFilters(v: string): CssElementStyleProp<"colorInterpolationFilters">;
export declare function colorScheme(v: string): CssElementStyleProp<"colorScheme">;
export declare function columnCount(v: string): CssElementStyleProp<"columnCount">;
export declare function columnFill(v: string): CssElementStyleProp<"columnFill">;
export declare function columnGap(v: CssGlobalValue | CssLengthPercentage | CssCalcStatement): CssElementStyleProp;
export declare function gridColumnGap(v: CssGlobalValue | CssLengthPercentage | CssCalcStatement): CssElementStyleProp<"gridColumnGap">;
export declare function columnRule(v: string): CssElementStyleProp<"columnRule">;
export declare function columnRuleColor(v: CssGlobalValue | CssColorValue): CssElementStyleProp<"columnRuleColor">;
export declare function columnRuleStyle(v: string): CssElementStyleProp<"columnRuleStyle">;
export declare function columnRuleWidth(v: CssGlobalValue | CssLength | CssWidthKeyword): CssElementStyleProp<"columnRuleWidth">;
export declare function columnSpan(v: string): CssElementStyleProp<"columnSpan">;
export declare function columnWidth(v: CssGlobalValue | CssLength | "auto"): CssElementStyleProp<"columnWidth">;
export declare function columns(v: string): CssElementStyleProp<"columns">;
export declare function contain(v: string): CssElementStyleProp<"contain">;
export declare function counterIncrement(v: string): CssElementStyleProp<"counterIncrement">;
export declare function counterReset(v: string): CssElementStyleProp<"counterReset">;
export declare function cursor(v: CssGlobalValue | CssCursorValue): CssElementStyleProp<"cursor">;
export declare function direction(v: CssGlobalValue | CssDirectionValue): CssElementStyleProp<"direction">;
export declare function display(v: CssGlobalValue | CssDisplayValue): CssElementStyleProp<"display">;
export declare function dominantBaseline(v: string): CssElementStyleProp<"dominantBaseline">;
export declare function emptyCells(v: string): CssElementStyleProp<"emptyCells">;
export declare function fill(v: string): CssElementStyleProp<"fill">;
export declare function fillOpacity(v: string): CssElementStyleProp<"fillOpacity">;
export declare function fillRule(v: string): CssElementStyleProp<"fillRule">;
export declare function filter(v: string): CssElementStyleProp<"filter">;
export declare function flexBasis(v: CssGlobalValue | CssFlexBasisValue): CssElementStyleProp<"flexBasis">;
export declare function flexDirection(v: CssGlobalValue | CssFlexDirectionValue): CssElementStyleProp<"flexDirection">;
export declare function flexWrap(v: CssGlobalValue | CssFlexWrapValue): CssElementStyleProp<"flexWrap">;
export declare function flexFlow(v: CssGlobalValue): CssElementStyleProp;
export declare function flexFlow(v: CssFlexFlowValue): CssElementStyleProp;
export declare function flexFlow(x: CssFlexFlowValue, y: CssFlexFlowValue): CssElementStyleProp;
export declare function flex(v: CssGlobalValue): CssElementStyleProp;
export declare function flex(grow: number): CssElementStyleProp;
export declare function flex(basis: CssFlexBasisValue): CssElementStyleProp;
export declare function flex(grow: number, shrink: number): CssElementStyleProp;
export declare function flex(grow: number, basis: CssFlexBasisValue): CssElementStyleProp;
export declare function flex(grow: number, shrink: number, basis: CssFlexBasisValue): CssElementStyleProp;
export declare function flexGrow(v: CssGlobalValue | number): CssElementStyleProp<"flexGrow">;
export declare function flexShrink(v: CssGlobalValue | number): CssElementStyleProp<"flexShrink">;
export declare function float(v: CssGlobalValue | CssFloatValue): CssElementStyleProp<"float">;
export declare function floodColor(v: CssGlobalValue | CssColorValue): CssElementStyleProp<"floodColor">;
export declare function floodOpacity(v: string): CssElementStyleProp<"floodOpacity">;
export declare function font(v: string): CssElementStyleProp<"font">;
export declare function fontFamily(v: string): CssElementStyleProp<"fontFamily">;
export declare function fontFeatureSettings(v: string): CssElementStyleProp<"fontFeatureSettings">;
export declare function fontKerning(v: string): CssElementStyleProp<"fontKerning">;
export declare function fontOpticalSizing(v: string): CssElementStyleProp<"fontOpticalSizing">;
export declare function fontSize(v: string): CssElementStyleProp<"fontSize">;
export declare function fontStretch(v: string): CssElementStyleProp<"fontStretch">;
export declare function fontStyle(v: string): CssElementStyleProp<"fontStyle">;
export declare function fontVariant(v: string): CssElementStyleProp<"fontVariant">;
export declare function fontVariantCaps(v: string): CssElementStyleProp<"fontVariantCaps">;
export declare function fontVariantEastAsian(v: string): CssElementStyleProp<"fontVariantEastAsian">;
export declare function fontVariantLigatures(v: string): CssElementStyleProp<"fontVariantLigatures">;
export declare function fontVariantNumeric(v: string): CssElementStyleProp<"fontVariantNumeric">;
export declare function fontVariationSettings(v: string): CssElementStyleProp<"fontVariationSettings">;
export declare function fontWeight(v: string): CssElementStyleProp<"fontWeight">;
export declare function gap(v: CssGlobalValue | CssLengthPercentage | CssCalcStatement): CssElementStyleProp;
export declare function gap(row: CssLengthPercentage | CssCalcStatement, column: CssLengthPercentage | CssCalcStatement): CssElementStyleProp;
export declare function gridGap(v: CssGlobalValue | CssLengthPercentage | CssCalcStatement): CssElementStyleProp;
export declare function gridGap(row: CssLengthPercentage | CssCalcStatement, column: CssLengthPercentage | CssCalcStatement): CssElementStyleProp;
export declare function grid(v: string): CssElementStyleProp<"grid">;
export declare function gridArea(v: string): CssElementStyleProp;
export declare function gridArea(rowStart: number, colStart?: number, rowEnd?: number, colEnd?: number): CssElementStyleProp;
export declare function gridAutoColumns(v: string): CssElementStyleProp<"gridAutoColumns">;
export declare function gridAutoFlow(v: CssGlobalValue | CssGridAutoFlowValue): CssElementStyleProp<"gridAutoFlow">;
export declare function gridAutoRows(v: string): CssElementStyleProp<"gridAutoRows">;
export declare function gridColumn(v: string): CssElementStyleProp;
export declare function gridColumn(colStart: number, colEnd?: number): CssElementStyleProp;
export declare function gridColumnEnd(v: string | number): CssElementStyleProp<"gridColumnEnd">;
export declare function gridColumnStart(v: string | number): CssElementStyleProp<"gridColumnStart">;
export declare function gridRow(v: string): CssElementStyleProp;
export declare function gridRow(rowStart: number, rowEnd?: number): CssElementStyleProp;
export declare function gridRowEnd(v: string | number): CssElementStyleProp<"gridRowEnd">;
export declare function gridRowStart(v: string | number): CssElementStyleProp<"gridRowStart">;
export declare function gridTemplate(v: string): CssElementStyleProp<"gridTemplate">;
export declare function gridTemplateAreas(...v: string[]): CssElementStyleProp<"gridTemplateAreas">;
export declare function gridTemplateColumns(v: CssGlobalValue): CssElementStyleProp;
export declare function gridTemplateColumns(...v: CssGridTemplateTrackValue[]): CssElementStyleProp;
export declare function gridTemplateRows(v: CssGlobalValue): CssElementStyleProp;
export declare function gridTemplateRows(...v: CssGridTemplateTrackValue[]): CssElementStyleProp;
export declare function height(v: CssGlobalValue | CssSizePropertyValue): CssElementStyleProp<"height">;
export declare function hyphens(v: string): CssElementStyleProp<"hyphens">;
export declare function imageOrientation(v: string): CssElementStyleProp<"imageOrientation">;
export declare function imageRendering(v: string): CssElementStyleProp<"imageRendering">;
export declare function inlineSize(v: string): CssElementStyleProp<"inlineSize">;
export declare function isolation(v: string): CssElementStyleProp<"isolation">;
export declare function justifyContent(v: CssGlobalValue | CssJustifyAlignContentValue): CssElementStyleProp<"justifyContent">;
export declare function justifyItems(v: CssGlobalValue | CssJustifyItemsValue): CssElementStyleProp<"justifyItems">;
export declare function justifySelf(v: CssGlobalValue | CssJustifyAlignSelfValue): CssElementStyleProp<"justifySelf">;
export declare function left(v: CssElementPositionValue): CssElementStyleProp<"left">;
export declare function letterSpacing(v: string): CssElementStyleProp<"letterSpacing">;
export declare function lightingColor(v: CssGlobalValue | CssColorValue): CssElementStyleProp<"lightingColor">;
export declare function lineBreak(v: string): CssElementStyleProp<"lineBreak">;
export declare function lineHeight(v: string): CssElementStyleProp<"lineHeight">;
export declare function listStyle(v: string): CssElementStyleProp<"listStyle">;
export declare function listStyleImage(v: string): CssElementStyleProp<"listStyleImage">;
export declare function listStylePosition(v: string): CssElementStyleProp<"listStylePosition">;
export declare function listStyleType(v: string): CssElementStyleProp<"listStyleType">;
export declare function margin(v: CssGlobalValue | CssLengthPercentage | "auto"): CssElementStyleProp;
export declare function margin(vert: CssLengthPercentage | "auto", horiz: CssLengthPercentage | "auto"): CssElementStyleProp;
export declare function margin(top: CssLengthPercentage | "auto", horiz: CssLengthPercentage | "auto", bot: CssLengthPercentage | "auto"): CssElementStyleProp;
export declare function margin(top: CssLengthPercentage | "auto", right: CssLengthPercentage | "auto", bot: CssLengthPercentage | "auto", left: CssLengthPercentage | "auto"): CssElementStyleProp;
export declare function marginBlockEnd(v: CssLengthPercentage | "auto"): CssElementStyleProp<"marginBlockEnd">;
export declare function marginBlockStart(v: CssLengthPercentage | "auto"): CssElementStyleProp<"marginBlockStart">;
export declare function marginBottom(v: CssLengthPercentage | "auto"): CssElementStyleProp<"marginBottom">;
export declare function marginInlineEnd(v: CssLengthPercentage | "auto"): CssElementStyleProp<"marginInlineEnd">;
export declare function marginInlineStart(v: CssLengthPercentage | "auto"): CssElementStyleProp<"marginInlineStart">;
export declare function marginLeft(v: CssLengthPercentage | "auto"): CssElementStyleProp<"marginLeft">;
export declare function marginRight(v: CssLengthPercentage | "auto"): CssElementStyleProp<"marginRight">;
export declare function marginTop(v: CssLengthPercentage | "auto"): CssElementStyleProp<"marginTop">;
export declare function marker(v: string): CssElementStyleProp<"marker">;
export declare function markerEnd(v: string): CssElementStyleProp<"markerEnd">;
export declare function markerMid(v: string): CssElementStyleProp<"markerMid">;
export declare function markerStart(v: string): CssElementStyleProp<"markerStart">;
export declare function mask(v: string): CssElementStyleProp<"mask">;
export declare function maskType(v: string): CssElementStyleProp<"maskType">;
export declare function maxBlockSize(v: string): CssElementStyleProp<"maxBlockSize">;
export declare function maxHeight(v: string | 0): CssElementStyleProp<"maxHeight">;
export declare function maxInlineSize(v: string): CssElementStyleProp<"maxInlineSize">;
export declare function maxWidth(v: string | 0): CssElementStyleProp<"maxWidth">;
export declare function minBlockSize(v: string): CssElementStyleProp<"minBlockSize">;
export declare function minHeight(v: string | 0): CssElementStyleProp<"minHeight">;
export declare function minInlineSize(v: string): CssElementStyleProp<"minInlineSize">;
export declare function minWidth(v: string | 0): CssElementStyleProp<"minWidth">;
export declare function mixBlendMode(v: string): CssElementStyleProp<"mixBlendMode">;
export declare function objectFit(v: string): CssElementStyleProp<"objectFit">;
export declare function objectPosition(v: string): CssElementStyleProp<"objectPosition">;
export declare function offset(v: string): CssElementStyleProp<"offset">;
export declare function offsetDistance(v: string): CssElementStyleProp<"offsetDistance">;
export declare function offsetPath(v: string): CssElementStyleProp<"offsetPath">;
export declare function offsetRotate(v: string): CssElementStyleProp<"offsetRotate">;
export declare function opacity(v: CssGlobalValue | CssAlpha): CssElementStyleProp<"opacity">;
export declare function order(v: string): CssElementStyleProp<"order">;
export declare function orphans(v: string): CssElementStyleProp<"orphans">;
export declare function outline(v: string): CssElementStyleProp<"outline">;
export declare function outlineColor(v: CssGlobalValue | CssColorValue | "invert"): CssElementStyleProp<"outlineColor">;
export declare function outlineOffset(v: string): CssElementStyleProp<"outlineOffset">;
export declare function outlineStyle(v: string): CssElementStyleProp<"outlineStyle">;
export declare function outlineWidth(v: string | 0): CssElementStyleProp<"outlineWidth">;
export declare function overflow(v: CssGlobalValue | CssOverflowValue): CssElementStyleProp;
export declare function overflow(x: CssOverflowValue, y: CssOverflowValue): CssElementStyleProp;
export declare function overflowX(v: CssGlobalValue | CssOverflowValue): CssElementStyleProp<"overflowX">;
export declare function overflowY(v: CssGlobalValue | CssOverflowValue): CssElementStyleProp<"overflowY">;
export declare function overflowAnchor(v: string): CssElementStyleProp<"overflowAnchor">;
export declare function overflowWrap(v: string): CssElementStyleProp<"overflowWrap">;
export declare function overscrollBehavior(v: string): CssElementStyleProp<"overscrollBehavior">;
export declare function overscrollBehaviorBlock(v: string): CssElementStyleProp<"overscrollBehaviorBlock">;
export declare function overscrollBehaviorInline(v: string): CssElementStyleProp<"overscrollBehaviorInline">;
export declare function overscrollBehaviorX(v: string): CssElementStyleProp<"overscrollBehaviorX">;
export declare function overscrollBehaviorY(v: string): CssElementStyleProp<"overscrollBehaviorY">;
export declare function padding(v: CssGlobalValue | CssLengthPercentage): CssElementStyleProp;
export declare function padding(vert: CssLengthPercentage, horiz: CssLengthPercentage): CssElementStyleProp;
export declare function padding(top: CssLengthPercentage, horiz: CssLengthPercentage, bot: CssLengthPercentage): CssElementStyleProp;
export declare function padding(top: CssLengthPercentage, right: CssLengthPercentage, bot: CssLengthPercentage, left: CssLengthPercentage): CssElementStyleProp;
export declare function paddingBlockEnd(v: CssGlobalValue | CssLengthPercentage): CssElementStyleProp<"paddingBlockEnd">;
export declare function paddingBlockStart(v: CssGlobalValue | CssLengthPercentage): CssElementStyleProp<"paddingBlockStart">;
export declare function paddingBottom(v: CssGlobalValue | CssLengthPercentage): CssElementStyleProp<"paddingBottom">;
export declare function paddingInlineEnd(v: CssGlobalValue | CssLengthPercentage): CssElementStyleProp<"paddingInlineEnd">;
export declare function paddingInlineStart(v: CssGlobalValue | CssLengthPercentage): CssElementStyleProp<"paddingInlineStart">;
export declare function paddingLeft(v: CssGlobalValue | CssLengthPercentage): CssElementStyleProp<"paddingLeft">;
export declare function paddingRight(v: CssGlobalValue | CssLengthPercentage): CssElementStyleProp<"paddingRight">;
export declare function paddingTop(v: CssGlobalValue | CssLengthPercentage): CssElementStyleProp<"paddingTop">;
export declare function pageBreakAfter(v: string): CssElementStyleProp<"pageBreakAfter">;
export declare function pageBreakBefore(v: string): CssElementStyleProp<"pageBreakBefore">;
export declare function pageBreakInside(v: string): CssElementStyleProp<"pageBreakInside">;
export declare function paintOrder(v: string): CssElementStyleProp<"paintOrder">;
export declare function perspective(v: string): CssElementStyleProp<"perspective">;
export declare function perspectiveOrigin(v: string): CssElementStyleProp<"perspectiveOrigin">;
export declare function placeContent(v: string): CssElementStyleProp<"placeContent">;
export declare function placeItems(v: string): CssElementStyleProp<"placeItems">;
export declare function placeSelf(v: string): CssElementStyleProp<"placeSelf">;
export declare function pointerEvents(v: CssGlobalValue | CssPointerEventsValue): CssElementStyleProp<"pointerEvents">;
export declare function position(v: CssGlobalValue | CssPositionValue): CssElementStyleProp<"position">;
export declare function quotes(v: string): CssElementStyleProp<"quotes">;
export declare function resize(v: string): CssElementStyleProp<"resize">;
export declare function right(v: CssElementPositionValue): CssElementStyleProp<"right">;
export declare function rowGap(v: CssGlobalValue | CssLengthPercentage | CssCalcStatement): CssElementStyleProp<"rowGap">;
export declare function gridRowGap(v: CssGlobalValue | CssLengthPercentage | CssCalcStatement): CssElementStyleProp<"gridRowGap">;
export declare function rubyPosition(v: string): CssElementStyleProp<"rubyPosition">;
export declare function scrollBehavior(v: string): CssElementStyleProp<"scrollBehavior">;
export declare function scrollMargin(v: string | 0): CssElementStyleProp<"scrollMargin">;
export declare function scrollMarginBlock(v: string): CssElementStyleProp<"scrollMarginBlock">;
export declare function scrollMarginBlockEnd(v: string): CssElementStyleProp<"scrollMarginBlockEnd">;
export declare function scrollMarginBlockStart(v: string): CssElementStyleProp<"scrollMarginBlockStart">;
export declare function scrollMarginBottom(v: string | 0): CssElementStyleProp<"scrollMarginBottom">;
export declare function scrollMarginInline(v: string): CssElementStyleProp<"scrollMarginInline">;
export declare function scrollMarginInlineEnd(v: string): CssElementStyleProp<"scrollMarginInlineEnd">;
export declare function scrollMarginInlineStart(v: string): CssElementStyleProp<"scrollMarginInlineStart">;
export declare function scrollMarginLeft(v: string | 0): CssElementStyleProp<"scrollMarginLeft">;
export declare function scrollMarginRight(v: string | 0): CssElementStyleProp<"scrollMarginRight">;
export declare function scrollMarginTop(v: string | 0): CssElementStyleProp<"scrollMarginTop">;
export declare function scrollPadding(v: string | 0): CssElementStyleProp<"scrollPadding">;
export declare function scrollPaddingBlock(v: string): CssElementStyleProp<"scrollPaddingBlock">;
export declare function scrollPaddingBlockEnd(v: string): CssElementStyleProp<"scrollPaddingBlockEnd">;
export declare function scrollPaddingBlockStart(v: string): CssElementStyleProp<"scrollPaddingBlockStart">;
export declare function scrollPaddingBottom(v: string | 0): CssElementStyleProp<"scrollPaddingBottom">;
export declare function scrollPaddingInline(v: string): CssElementStyleProp<"scrollPaddingInline">;
export declare function scrollPaddingInlineEnd(v: string): CssElementStyleProp<"scrollPaddingInlineEnd">;
export declare function scrollPaddingInlineStart(v: string): CssElementStyleProp<"scrollPaddingInlineStart">;
export declare function scrollPaddingLeft(v: string | 0): CssElementStyleProp<"scrollPaddingLeft">;
export declare function scrollPaddingRight(v: string | 0): CssElementStyleProp<"scrollPaddingRight">;
export declare function scrollPaddingTop(v: string | 0): CssElementStyleProp<"scrollPaddingTop">;
export declare function scrollSnapAlign(v: string): CssElementStyleProp<"scrollSnapAlign">;
export declare function scrollSnapStop(v: string): CssElementStyleProp<"scrollSnapStop">;
export declare function scrollSnapType(v: string): CssElementStyleProp<"scrollSnapType">;
export declare function shapeImageThreshold(v: string): CssElementStyleProp<"shapeImageThreshold">;
export declare function shapeMargin(v: string): CssElementStyleProp<"shapeMargin">;
export declare function shapeOutside(v: string): CssElementStyleProp<"shapeOutside">;
export declare function shapeRendering(v: string): CssElementStyleProp<"shapeRendering">;
export declare function stopColor(v: CssGlobalValue | CssColorValue): CssElementStyleProp<"stopColor">;
export declare function stopOpacity(v: string): CssElementStyleProp<"stopOpacity">;
export declare function stroke(v: string): CssElementStyleProp<"stroke">;
export declare function strokeDasharray(v: string): CssElementStyleProp<"strokeDasharray">;
export declare function strokeDashoffset(v: string): CssElementStyleProp<"strokeDashoffset">;
export declare function strokeLinecap(v: string): CssElementStyleProp<"strokeLinecap">;
export declare function strokeLinejoin(v: string): CssElementStyleProp<"strokeLinejoin">;
export declare function strokeMiterlimit(v: string): CssElementStyleProp<"strokeMiterlimit">;
export declare function strokeOpacity(v: string): CssElementStyleProp<"strokeOpacity">;
export declare function strokeWidth(v: string | 0): CssElementStyleProp<"strokeWidth">;
export declare function tabSize(v: string): CssElementStyleProp<"tabSize">;
export declare function tableLayout(v: string): CssElementStyleProp<"tableLayout">;
export declare function textAlign(v: CssGlobalValue | CssTextAlignValue): CssElementStyleProp<"textAlign">;
export declare function textAlignLast(v: CssGlobalValue | CssTextAlignLastValue): CssElementStyleProp<"textAlignLast">;
export declare function textAnchor(v: string): CssElementStyleProp<"textAnchor">;
export declare function textCombineUpright(v: string): CssElementStyleProp<"textCombineUpright">;
export declare function textDecoration(v: string): CssElementStyleProp<"textDecoration">;
export declare function textDecorationColor(v: CssGlobalValue | CssColorValue): CssElementStyleProp<"textDecorationColor">;
export declare function textDecorationLine(v: string): CssElementStyleProp<"textDecorationLine">;
export declare function textDecorationSkipInk(v: string): CssElementStyleProp<"textDecorationSkipInk">;
export declare function textDecorationStyle(v: string): CssElementStyleProp<"textDecorationStyle">;
export declare function textIndent(v: string): CssElementStyleProp<"textIndent">;
export declare function textOrientation(v: string): CssElementStyleProp<"textOrientation">;
export declare function textOverflow(v: CssGlobalValue | CssTextOverflowValue): CssElementStyleProp<"textOverflow">;
export declare function textRendering(v: string): CssElementStyleProp<"textRendering">;
export declare function textShadow(v: string): CssElementStyleProp<"textShadow">;
export declare function textTransform(v: string): CssElementStyleProp<"textTransform">;
export declare function textUnderlinePosition(v: string): CssElementStyleProp<"textUnderlinePosition">;
export declare function top(v: CssElementPositionValue): CssElementStyleProp<"top">;
export declare function touchAction(v: CssGlobalValue | CssTouchActionValue): CssElementStyleProp<"touchAction">;
export declare function transform(v: CssGlobalValue): CssElementStyleProp;
export declare function transform(perspective: CssTransformPerspectiveValue, ...rest: CssTransformValue[]): CssElementStyleProp;
export declare function transform(...v: CssTransformValue[]): CssElementStyleProp;
export declare function transformBox(v: CssGlobalValue | CssTransformBoxValue): CssElementStyleProp<"transformBox">;
export declare function transformOrigin(v: CssGlobalValue): CssElementStyleProp;
export declare function transformOrigin(v: CssLengthPercentage | CssBackgroundPositionKeyword): CssElementStyleProp;
export declare function transformOrigin(x: CssLengthPercentage | CssBackgroundPositionHorizontalKeyword, y: CssLengthPercentage | CssBackgroundPositionVerticalKeyword): CssElementStyleProp;
export declare function transformOrigin(x: CssLengthPercentage | CssBackgroundPositionHorizontalKeyword, y: CssLengthPercentage | CssBackgroundPositionVerticalKeyword, z: CssLength): CssElementStyleProp;
export declare function transformStyle(v: CssGlobalValue | CssTransformStyleValue): CssElementStyleProp<"transformStyle">;
export declare function transition(v: string): CssElementStyleProp<"transition">;
export declare function transitionDelay(v: string | 0): CssElementStyleProp<"transitionDelay">;
export declare function transitionDuration(v: string | 0): CssElementStyleProp<"transitionDuration">;
export declare function transitionProperty(v: string): CssElementStyleProp<"transitionProperty">;
export declare function transitionTimingFunction(v: string): CssElementStyleProp<"transitionTimingFunction">;
export declare function unicodeBidi(v: string): CssElementStyleProp<"unicodeBidi">;
export declare function userSelect(v: string): CssElementStyleProp<"userSelect">;
export declare function verticalAlign(v: CssGlobalValue | CssVerticalAlignValue): CssElementStyleProp<"verticalAlign">;
export declare function visibility(v: CssGlobalValue | CssVisiblityValue): CssElementStyleProp<"visibility">;
export declare function whiteSpace(v: CssGlobalValue | CssWhiteSpaceValue): CssElementStyleProp<"whiteSpace">;
export declare function widows(v: CssGlobalValue | number): CssElementStyleProp<"widows">;
export declare function width(v: CssGlobalValue | CssSizePropertyValue): CssElementStyleProp<"width">;
export declare function willChange(v: string): CssElementStyleProp<"willChange">;
export declare function wordBreak(v: string): CssElementStyleProp<"wordBreak">;
export declare function wordSpacing(v: string): CssElementStyleProp<"wordSpacing">;
export declare function wordWrap(v: CssGlobalValue | CssWordWrapValue): CssElementStyleProp<"wordWrap">;
export declare function writingMode(v: CssGlobalValue | CssWritingModeValue): CssElementStyleProp<"writingMode">;
export declare function zIndex(v: number): CssElementStyleProp<"zIndex">;
declare class CssRegularAtRuleSet<T extends CssAtRuleRegular = CssAtRuleRegular> extends PropSet<Prop> {
    constructor(selector: T, value: string);
}
export declare function cssCharset(value: string): CssRegularAtRuleSet<"charset">;
export declare function cssImport(value: string): CssRegularAtRuleSet<"import">;
export declare function cssNamespace(value: string): CssRegularAtRuleSet<"namespace">;
declare class CssColorProfileProp<T extends CssColorProfilePropName = CssColorProfilePropName> extends CssDeclareProp {
    constructor(name: T, value: string);
}
export declare function colorProfile(name: CssDashedName, src: string, renderingIntent: CssColorProfileProp<"rendering-intent">): PropSet;
export declare function colorProfile(name: CssDashedName, src: string, components: CssColorProfileProp<"components">): PropSet;
export declare function colorProfile(name: CssDashedName, src: string, renderingIntent: CssColorProfileProp<"rendering-intent">, components: CssColorProfileProp<"components">): PropSet;
export declare function renderingIntent(value: CssRenderingIntentValue): CssColorProfileProp;
export declare function components(...names: string[]): CssColorProfileProp<"components">;
declare class CssCounterStyleProp<T extends CssCounterStylePropName = CssCounterStylePropName> extends CssDeclareProp {
    constructor(name: T, value: string);
}
export declare function counterStyle(name: string, ...props: CssCounterStyleProp[]): PropSet;
export declare function system(value: CssCounterStyleSystemValue): CssCounterStyleProp<"system">;
export declare function negative(value: string): CssCounterStyleProp<"negative">;
export declare function prefix(value: string): CssCounterStyleProp<"prefix">;
export declare function suffix(value: string): CssCounterStyleProp<"suffix">;
export declare function range(value: CssCounterStyleRangeValue | "auto"): CssCounterStyleProp<"range">;
export declare function range(...v: CssCounterStyleRangeValue[]): CssCounterStyleProp<"range">;
export declare function pad(count: number, symbol: string): CssCounterStyleProp<"pad">;
export declare function fallback(value: string): CssCounterStyleProp<"fallback">;
export declare function symbols(value: string): CssCounterStyleProp<"symbols">;
export declare function additiveSymbols(...v: string[]): CssCounterStyleProp<"additive-symbols">;
export declare function speakAs(value: string): CssCounterStyleProp<"speak-as">;
export declare function layer(...names: string[]): PropSet;
export declare function layer(name: string, ...rules: PropSet[]): PropSet;
export declare function layer(...rules: PropSet[]): PropSet;
export declare function media(query: string, ...props: PropSet[]): SelectorPropSet<Prop>;
export {};
//# sourceMappingURL=css.d.ts.map