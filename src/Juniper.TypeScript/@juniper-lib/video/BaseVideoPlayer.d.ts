import { JuniperAudioContext } from "@juniper-lib/audio/context/JuniperAudioContext";
import { BaseAudioSource } from "@juniper-lib/audio/sources/BaseAudioSource";
import { IPlayer, MediaPlayerEvents } from "@juniper-lib/audio/sources/IPlayer";
import { PlaybackState } from "@juniper-lib/audio/sources/PlaybackState";
import { BaseSpatializer } from "@juniper-lib/audio/spatializers/BaseSpatializer";
import { IProgress } from "@juniper-lib/progress/IProgress";
import { IDisposable } from "@juniper-lib/tslib/using";
import { FullVideoRecord } from "./data";
export declare abstract class BaseVideoPlayer extends BaseAudioSource<MediaPlayerEvents> implements IPlayer, IDisposable {
    private readonly loadingEvt;
    private readonly loadEvt;
    private readonly playEvt;
    private readonly pauseEvt;
    private readonly stopEvt;
    private readonly progEvt;
    private readonly onPlay;
    private readonly onSeeked;
    private readonly onCanPlay;
    private readonly onWaiting;
    private readonly onPause;
    private readonly onTimeUpdate;
    private wasUsingAudioElement;
    private nextStartTime;
    private _data;
    get data(): FullVideoRecord | string;
    private _loaded;
    get loaded(): boolean;
    protected readonly video: HTMLVideoElement;
    protected readonly audio: HTMLAudioElement;
    get title(): string;
    protected setTitle(v: string): void;
    private readonly onError;
    private readonly sourcesByURL;
    private readonly sources;
    private readonly potatoes;
    constructor(type: string, context: JuniperAudioContext, spatializer: BaseSpatializer);
    private elementHasAudio;
    private get useAudioElement();
    protected onDisposing(): void;
    clear(): void;
    load(data: FullVideoRecord | string, prog?: IProgress): Promise<this>;
    private fillSources;
    private static createMediaElement;
    private getMediaCapabilities;
    private hasSources;
    private loadMediaElement;
    get width(): number;
    get height(): number;
    get playbackState(): PlaybackState;
    play(): Promise<void>;
    playThrough(): Promise<void>;
    pause(): void;
    stop(): void;
    restart(): Promise<void>;
}
//# sourceMappingURL=BaseVideoPlayer.d.ts.map