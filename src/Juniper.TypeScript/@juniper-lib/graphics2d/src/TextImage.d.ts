import { PaddingRect } from "@juniper-lib/tslib/dist/math";
import { CanvasImage, CanvasImageOptions } from "./CanvasImage";
export type TextDirection = "horizontal" | "vertical";
export interface TextImageOptions extends CanvasImageOptions {
    minWidth: number;
    maxWidth: number;
    minHeight: number;
    maxHeight: number;
    freezeDimensions: boolean;
    bgFillColor: CssColorValue;
    bgStrokeColor: CssColorValue;
    bgStrokeSize: number;
    textStrokeColor: CssColorValue;
    textStrokeSize: number;
    textFillColor: CssColorValue;
    textDirection: TextDirection;
    fontStyle: string;
    fontVariant: string;
    fontWeight: string;
    fontFamily: string;
    fontSize: number;
    padding: PaddingRect | number;
    value: string;
}
export declare class TextImage extends CanvasImage {
    private trueWidth;
    private trueHeight;
    private trueFontSize;
    private dx;
    private _minWidth;
    private _maxWidth;
    private _minHeight;
    private _maxHeight;
    private _freezeDimensions;
    private _dimensionsFrozen;
    private _bgFillColor;
    private _bgStrokeColor;
    private _bgStrokeSize;
    private _textStrokeColor;
    private _textStrokeSize;
    private _textFillColor;
    private _textDirection;
    private _fontStyle;
    private _fontVariant;
    private _fontWeight;
    private _fontFamily;
    private _fontSize;
    private _padding;
    private _value;
    constructor(options: Partial<TextImageOptions>);
    get minWidth(): number;
    set minWidth(v: number);
    get maxWidth(): number;
    set maxWidth(v: number);
    get minHeight(): number;
    set minHeight(v: number);
    get maxHeight(): number;
    set maxHeight(v: number);
    get padding(): PaddingRect;
    set padding(v: PaddingRect);
    get textDirection(): string;
    set textDirection(v: string);
    get fontStyle(): string;
    set fontStyle(v: string);
    get fontVariant(): string;
    set fontVariant(v: string);
    get fontWeight(): string;
    set fontWeight(v: string);
    get fontSize(): number;
    set fontSize(v: number);
    get fontFamily(): string;
    set fontFamily(v: string);
    get textFillColor(): string;
    set textFillColor(v: string);
    get textStrokeColor(): string;
    set textStrokeColor(v: string);
    get textStrokeSize(): number;
    set textStrokeSize(v: number);
    get bgFillColor(): string;
    set bgFillColor(v: string);
    get bgStrokeColor(): string;
    set bgStrokeColor(v: string);
    get bgStrokeSize(): number;
    set bgStrokeSize(v: number);
    get value(): string;
    set value(v: string);
    private split;
    protected unfreeze(): void;
    private lastValue;
    protected onRedraw(): boolean;
}
//# sourceMappingURL=TextImage.d.ts.map