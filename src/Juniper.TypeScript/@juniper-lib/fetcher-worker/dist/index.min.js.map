{
  "version": 3,
  "sources": ["../../tslib/collections/arrayRemoveAt.ts", "../../tslib/collections/arrayClear.ts", "../../tslib/collections/arrayRemove.ts", "../../tslib/collections/mapJoin.ts", "../../tslib/collections/PriorityList.ts", "../../tslib/collections/PriorityMap.ts", "../../tslib/events/EventBase.ts", "../../tslib/events/Task.ts", "../../tslib/events/Promisifier.ts", "../../tslib/flags.ts", "../../tslib/gis/Datum.ts", "../../tslib/identity.ts", "../../tslib/math/angleClamp.ts", "../../tslib/math/lerp.ts", "../../tslib/typeChecks.ts", "../../tslib/progress/BaseProgress.ts", "../../tslib/progress/ChildProgressCallback.ts", "../../tslib/progress/BaseParentProgressCallback.ts", "../../tslib/progress/progressSplit.ts", "../../tslib/timers/ITimer.ts", "../../tslib/timers/BaseTimer.ts", "../../tslib/URLBuilder.ts", "../../tslib/collections/mapInvert.ts", "../../tslib/units/fileSize.ts", "../../tslib/units/length.ts", "../../tslib/using.ts", "../../indexdb/node_modules/@juniper-lib/tslib/collections/arrayRemoveAt.ts", "../../indexdb/node_modules/@juniper-lib/tslib/collections/arrayClear.ts", "../../indexdb/node_modules/@juniper-lib/tslib/collections/arrayCompare.ts", "../../indexdb/node_modules/@juniper-lib/tslib/collections/arrayRemove.ts", "../../indexdb/node_modules/@juniper-lib/tslib/collections/mapMap.ts", "../../indexdb/node_modules/@juniper-lib/tslib/collections/PriorityList.ts", "../../indexdb/node_modules/@juniper-lib/tslib/collections/PriorityMap.ts", "../../indexdb/node_modules/@juniper-lib/tslib/events/EventBase.ts", "../../indexdb/node_modules/@juniper-lib/tslib/events/Task.ts", "../../indexdb/node_modules/@juniper-lib/tslib/events/once.ts", "../../indexdb/node_modules/@juniper-lib/tslib/events/Promisifier.ts", "../../indexdb/node_modules/@juniper-lib/tslib/Exception.ts", "../../indexdb/node_modules/@juniper-lib/tslib/flags.ts", "../../indexdb/node_modules/@juniper-lib/tslib/gis/Datum.ts", "../../indexdb/node_modules/@juniper-lib/tslib/identity.ts", "../../indexdb/node_modules/@juniper-lib/tslib/math/angleClamp.ts", "../../indexdb/node_modules/@juniper-lib/tslib/math/lerp.ts", "../../indexdb/node_modules/@juniper-lib/tslib/typeChecks.ts", "../../indexdb/node_modules/@juniper-lib/tslib/timers/ITimer.ts", "../../indexdb/node_modules/@juniper-lib/tslib/timers/BaseTimer.ts", "../../indexdb/node_modules/@juniper-lib/tslib/URLBuilder.ts", "../../indexdb/node_modules/@juniper-lib/tslib/collections/mapInvert.ts", "../../indexdb/node_modules/@juniper-lib/tslib/units/fileSize.ts", "../../indexdb/node_modules/@juniper-lib/tslib/units/length.ts", "../../indexdb/index.ts", "../../fetcher-base/ResponseTranslator.ts", "../../fetcher-base/FetchingServiceImplXHR.ts", "../../fetcher-base/FetchingService.ts", "../../worker-server/WorkerServer.ts", "../src/FetchingServiceServer.ts", "../src/index.ts"],
  "sourcesContent": ["/**\r\n * Removes an item at the given index from an array.\r\n */\r\nexport function arrayRemoveAt<T>(arr: T[], idx: number) {\r\n    return arr.splice(idx, 1)[0];\r\n}", "/**\r\n * Empties out an array, returning the items that were in the array.\r\n * \r\n * @param arr the array to empty\r\n */\r\nexport function arrayClear<T>(arr: T[]) {\r\n    return arr.splice(0);\r\n}", "import { arrayRemoveAt } from \"./arrayRemoveAt\";\r\n\r\n/**\r\n * Removes a given item from an array, returning true if the item was removed.\r\n */\r\nexport function arrayRemove<T>(arr: T[], value: T) {\r\n    const idx = arr.indexOf(value);\r\n    if (idx > -1) {\r\n        arrayRemoveAt(arr, idx);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function arrayFilter<T>(arr: T[], predicate: (v: T) => boolean): T | null {\r\n    for (let i = arr.length - 1; i >= 0; --i) {\r\n        if (predicate(arr[i])) {\r\n            return arrayRemoveAt(arr, i);\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function arrayRemoveByKey<T, K>(arr: T[], key: K, getKey: (v: T) => K): T | null {\r\n    return arrayFilter(arr, (v) => getKey(v) === key);\r\n}", "import { isDefined } from \"../\";\r\n\r\nexport function mapJoin<KeyT, ValueT>(dest: Map<KeyT, ValueT>, ...sources: Map<KeyT, ValueT>[]): Map<KeyT, ValueT> {\r\n    for (const source of sources) {\r\n        if (isDefined(source)) {\r\n            for (const [key, value] of source) {\r\n                dest.set(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    return dest;\r\n}\r\n", "import { isDefined, isNullOrUndefined } from \"../\";\r\nimport { arrayClear } from \"./arrayClear\";\r\nimport { arrayRemove } from \"./arrayRemove\";\r\n\r\nexport class PriorityList<KeyT, ValueT> {\r\n    private readonly items = new Map<KeyT, ValueT[]>();\r\n    private readonly defaultItems = new Array<ValueT>();\r\n\r\n    constructor(init?: [KeyT, ValueT][]) {\r\n        if (isDefined(init)) {\r\n            for (const [key, value] of init) {\r\n                this.add(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    add(key: KeyT, value: ValueT): this {\r\n        if (isNullOrUndefined(key)) {\r\n            this.defaultItems.push(value);\r\n        }\r\n        else {\r\n            let list = this.items.get(key);\r\n            if (isNullOrUndefined(list)) {\r\n                this.items.set(key, list = []);\r\n            }\r\n\r\n            list.push(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    entries(): IterableIterator<[KeyT, ValueT[]]> {\r\n        return this.items.entries();\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        return this.entries();\r\n    }\r\n\r\n    keys(): IterableIterator<KeyT> {\r\n        return this.items.keys();\r\n    }\r\n\r\n    *values(): IterableIterator<ValueT> {\r\n        for (const item of this.defaultItems) {\r\n            yield item;\r\n        }\r\n        for (const list of this.items.values()) {\r\n            for (const item of list) {\r\n                yield item;\r\n            }\r\n        }\r\n    }\r\n\r\n    has(key: KeyT): boolean {\r\n        if (isDefined(key)) {\r\n            return this.items.has(key);\r\n        }\r\n        else {\r\n            return this.defaultItems.length > 0;\r\n        }\r\n    }\r\n\r\n    get(key: KeyT): ValueT[] {\r\n        if (isNullOrUndefined(key)) {\r\n            return this.defaultItems;\r\n        }\r\n\r\n        return this.items.get(key) || [];\r\n    }\r\n\r\n    count(key: KeyT): number {\r\n        if (isNullOrUndefined(key)) {\r\n            return this.defaultItems.length;\r\n        }\r\n\r\n        const list = this.get(key);\r\n        if (isDefined(list)) {\r\n            return list.length;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    get size(): number {\r\n        let size = this.defaultItems.length;\r\n        for (const list of this.items.values()) {\r\n            size += list.length;\r\n        }\r\n        return size;\r\n    }\r\n\r\n    delete(key: KeyT) {\r\n        if (isNullOrUndefined(key)) {\r\n            return arrayClear(this.defaultItems).length > 0;\r\n        }\r\n        else {\r\n            return this.items.delete(key);\r\n        }\r\n    }\r\n\r\n    remove(key: KeyT, value: ValueT) {\r\n        if (isNullOrUndefined(key)) {\r\n            arrayRemove(this.defaultItems, value);\r\n        }\r\n        else {\r\n            const list = this.items.get(key);\r\n            if (isDefined(list)) {\r\n                arrayRemove(list, value);\r\n                if (list.length === 0) {\r\n                    this.items.delete(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.items.clear();\r\n        arrayClear(this.defaultItems);\r\n    }\r\n}\r\n\r\n\r\n", "import { isDefined, isNullOrUndefined } from \"../\";\r\n\r\n\r\n\r\nexport class PriorityMap<Key1T, Key2T, ValueT> {\r\n    private readonly items = new Map<Key1T, Map<Key2T, ValueT>>();\r\n\r\n    constructor(init?: Iterable<[Key1T, Key2T, ValueT]>) {\r\n        if (isDefined(init)) {\r\n            for (const [key1, key2, value] of init) {\r\n                this.add(key1, key2, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    add(key1: Key1T, key2: Key2T, value: ValueT): this {\r\n        let level1 = this.items.get(key1);\r\n        if (isNullOrUndefined(level1)) {\r\n            this.items.set(key1, level1 = new Map());\r\n        }\r\n\r\n        level1.set(key2, value);\r\n\r\n        return this;\r\n    }\r\n\r\n    *entries(): IterableIterator<[Key1T, Key2T, ValueT]> {\r\n        for (const [key1, level1] of this.items) {\r\n            for (const [key2, value] of level1) {\r\n                yield [key1, key2, value];\r\n            }\r\n        }\r\n    }\r\n    keys(): IterableIterator<Key1T>;\r\n    keys(key1: Key1T): IterableIterator<Key2T>;\r\n    keys(key1?: Key1T): IterableIterator<Key1T | Key2T> {\r\n        if (isNullOrUndefined(key1)) {\r\n            return this.items.keys();\r\n        }\r\n        else {\r\n            return this.items.get(key1).keys();\r\n        }\r\n    }\r\n\r\n    *values(): IterableIterator<ValueT> {\r\n        for (const level1 of this.items.values()) {\r\n            for (const value of level1.values()) {\r\n                yield value;\r\n            }\r\n        }\r\n    }\r\n\r\n    has(key1: Key1T, key2?: Key2T): boolean {\r\n        return this.items.has(key1)\r\n            && (isNullOrUndefined(key2)\r\n                || this.items.get(key1).has(key2));\r\n    }\r\n\r\n    get(key1: Key1T): Map<Key2T, ValueT>;\r\n    get(key1: Key1T, key2: Key2T): ValueT;\r\n    get(key1: Key1T, key2?: Key2T): ValueT | Map<Key2T, ValueT> {\r\n        if (isNullOrUndefined(key2)) {\r\n            return this.items.get(key1);\r\n        }\r\n        else if (this.items.has(key1)) {\r\n            return this.items.get(key1).get(key2);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    count(key1: Key1T): number {\r\n        if (this.items.has(key1)) {\r\n            return this.items.get(key1).size;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    get size(): number {\r\n        let size = 0;\r\n        for (const list of this.items.values()) {\r\n            size += list.size;\r\n        }\r\n        return size;\r\n    }\r\n\r\n    delete(key1: Key1T, key2?: Key2T) {\r\n        if (isNullOrUndefined(key2)) {\r\n            return this.items.delete(key1);\r\n        }\r\n        else if (this.items.has(key1)) {\r\n            return this.items.get(key1).delete(key2);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.items.clear();\r\n    }\r\n}\r\n", "import { arrayClear, arrayRemoveAt, isBoolean, isDefined, isFunction, isNullOrUndefined } from \"../\";\r\n\r\ntype EventCallback = (evt: Event) => any;\r\n\r\nexport class EventBase implements EventTarget {\r\n    private readonly listeners = new Map<string, EventCallback[]>();\r\n    private readonly listenerOptions = new Map<EventCallback, boolean | AddEventListenerOptions>();\r\n\r\n    addEventListener(type: string, callback: (evt: Event) => any, options?: boolean | AddEventListenerOptions): void {\r\n        if (isFunction(callback)) {\r\n            let listeners = this.listeners.get(type);\r\n            if (!listeners) {\r\n                listeners = new Array<EventCallback>();\r\n                this.listeners.set(type, listeners);\r\n            }\r\n\r\n            if (!listeners.find((c) => c === callback)) {\r\n                listeners.push(callback);\r\n\r\n                if (options) {\r\n                    this.listenerOptions.set(callback, options);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (evt: Event) => any) {\r\n        if (isFunction(callback)) {\r\n            const listeners = this.listeners.get(type);\r\n            if (listeners) {\r\n                this.removeListener(listeners, callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    clearEventListeners(type?: string) {\r\n        for (const [evtName, handlers] of this.listeners) {\r\n            if (isNullOrUndefined(type) || type === evtName) {\r\n                for (const handler of handlers) {\r\n                    this.removeEventListener(type, handler);\r\n                }\r\n                arrayClear(handlers);\r\n                this.listeners.delete(evtName);\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeListener(listeners: EventCallback[], callback: EventCallback) {\r\n        const idx = listeners.findIndex((c) => c === callback);\r\n        if (idx >= 0) {\r\n            arrayRemoveAt(listeners, idx);\r\n            if (this.listenerOptions.has(callback)) {\r\n                this.listenerOptions.delete(callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(evt: Event): boolean {\r\n        const listeners = this.listeners.get(evt.type);\r\n        if (listeners) {\r\n            for (const callback of listeners) {\r\n                const options = this.listenerOptions.get(callback);\r\n                if (isDefined(options)\r\n                    && !isBoolean(options)\r\n                    && options.once) {\r\n                    this.removeListener(listeners, callback);\r\n                }\r\n\r\n                callback.call(this, evt);\r\n            }\r\n        }\r\n        return !evt.defaultPrevented;\r\n    }\r\n}\r\n\r\nexport class TypedEvent<T extends string> extends Event {\r\n\r\n    override get type(): T {\r\n        return super.type as T;\r\n    }\r\n\r\n    constructor(type: T) {\r\n        super(type);\r\n    }\r\n}\r\n\r\nexport class TypedEventBase<EventsT> extends EventBase {\r\n    private readonly bubblers = new Set<TypedEventBase<EventsT>>();\r\n    private readonly scopes = new WeakMap<object, Array<[any, any]>>();\r\n\r\n    addBubbler(bubbler: TypedEventBase<EventsT>) {\r\n        this.bubblers.add(bubbler);\r\n    }\r\n\r\n    removeBubbler(bubbler: TypedEventBase<EventsT>) {\r\n        this.bubblers.delete(bubbler);\r\n    }\r\n\r\n    override addEventListener<K extends keyof EventsT & string>(type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any, options?: boolean | AddEventListenerOptions): void {\r\n        super.addEventListener(type, callback as any, options);\r\n    }\r\n\r\n    override removeEventListener<K extends keyof EventsT & string>(type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any) {\r\n        super.removeEventListener(type, callback as any);\r\n    }\r\n\r\n    override clearEventListeners<K extends keyof EventsT & string>(type?: K): void {\r\n        return super.clearEventListeners(type);\r\n    }\r\n\r\n    addScopedEventListener<K extends keyof EventsT & string>(scope: object, type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any, options?: boolean | AddEventListenerOptions): void {\r\n        if (!this.scopes.has(scope)) {\r\n            this.scopes.set(scope, []);\r\n        }\r\n        this.scopes.get(scope).push([type, callback]);\r\n        this.addEventListener(type, callback as any, options);\r\n    }\r\n\r\n    removeScope<K extends keyof EventsT & string>(scope: object) {\r\n        const listeners = this.scopes.get(scope);\r\n        if (listeners) {\r\n            this.scopes.delete(scope);\r\n            for (const [type, listener] of listeners) {\r\n                this.removeEventListener(type as K, listener);\r\n            }\r\n        }\r\n    }\r\n\r\n    override dispatchEvent<T extends Event>(evt: T): boolean {\r\n        if (!super.dispatchEvent(evt)) {\r\n            return false;\r\n        }\r\n\r\n        for (const bubbler of this.bubblers) {\r\n            if (!bubbler.dispatchEvent(evt)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}", "import { alwaysTrue, isBoolean, isDefined, isFunction } from \"../\";\r\nimport { Predicate } from \"./Predicate\";\r\n\r\nexport class Task<ResultsT = void, ErrorT = unknown> implements Promise<ResultsT> {\r\n\r\n    private readonly promise: Promise<ResultsT>;\r\n\r\n    private _resolve: (value: ResultsT) => void = null;\r\n    private _reject: (reason: ErrorT) => void = null;\r\n    private _result: ResultsT = null;\r\n    private _error: ErrorT = null;\r\n    private _started = false;\r\n    private _finished = false;\r\n\r\n    get result(): ResultsT {\r\n        if (isDefined(this.error)) {\r\n            throw this.error;\r\n        }\r\n\r\n        return this._result;\r\n    }\r\n\r\n    get error(): ErrorT {\r\n        return this._error;\r\n    }\r\n\r\n    get started(): boolean {\r\n        return this._started;\r\n    }\r\n\r\n    get finished(): boolean {\r\n        return this._finished;\r\n    }\r\n\r\n    readonly resolve: (value: ResultsT) => void = null;\r\n    readonly reject: (reason: ErrorT) => void = null;\r\n\r\n    constructor(autoStart?: boolean);\r\n    constructor(resolveTest: Predicate<ResultsT>, autoStart?: boolean)\r\n    constructor(resolveTest: Predicate<ResultsT>, rejectTest: Predicate<ErrorT>, autoStart?: boolean);\r\n    constructor(resolveTestOrAutoStart?: boolean | Predicate<ResultsT>, rejectTestOrAutoStart?: boolean | Predicate<ErrorT>, autoStart = true) {\r\n        let resolveTest: Predicate<ResultsT> = alwaysTrue;\r\n        let rejectTest: Predicate<ErrorT> = alwaysTrue;\r\n\r\n        if (isFunction(resolveTestOrAutoStart)) {\r\n            resolveTest = resolveTestOrAutoStart;\r\n        }\r\n\r\n        if (isFunction(rejectTestOrAutoStart)) {\r\n            rejectTest = rejectTestOrAutoStart;\r\n        }\r\n\r\n        if (isBoolean(resolveTestOrAutoStart)) {\r\n            autoStart = resolveTestOrAutoStart;\r\n        }\r\n        else if (isBoolean(rejectTestOrAutoStart)) {\r\n            autoStart = rejectTestOrAutoStart;\r\n        }\r\n\r\n        this.resolve = (value: ResultsT): void => {\r\n            if (isDefined(this._resolve)) {\r\n                this._resolve(value);\r\n            }\r\n        };\r\n\r\n        this.reject = (reason: ErrorT): void => {\r\n            if (isDefined(this._reject)) {\r\n                this._reject(reason);\r\n            }\r\n        };\r\n\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this._resolve = (value: ResultsT) => {\r\n                if (resolveTest(value)) {\r\n                    this._result = value;\r\n                    this._finished = true;\r\n                    resolve(value);\r\n                }\r\n            };\r\n\r\n            this._reject = (reason: ErrorT) => {\r\n                if (rejectTest(reason)) {\r\n                    this._error = reason;\r\n                    this._finished = true;\r\n                    reject(reason);\r\n                }\r\n            };\r\n        });\r\n\r\n        if (autoStart) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    start() {\r\n        this._started = true;\r\n    }\r\n\r\n    get [Symbol.toStringTag](): string {\r\n        return this.promise.toString();\r\n    }\r\n\r\n    then<TResult1 = ResultsT, TResult2 = never>(onfulfilled?: (value: ResultsT) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\r\n        return this.promise.then(onfulfilled, onrejected);\r\n    }\r\n\r\n    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<ResultsT | TResult> {\r\n        return this.promise.catch(onrejected);\r\n    }\r\n\r\n    finally(onfinally?: () => void): Promise<ResultsT> {\r\n        return this.promise.finally(onfinally);\r\n    }\r\n}", "export class Promisifier<T = void> implements Promise<T> {\r\n\r\n    private readonly promise: Promise<T>;\r\n\r\n    callback: (...args: any[]) => void = null;\r\n\r\n    constructor(\r\n        resolveRejectTest: (...args: any[]) => boolean,\r\n        selectValue: (...args: any[]) => T,\r\n        selectRejectionReason: (...args: any[]) => any) {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.callback = (...args: any[]) => {\r\n                if (resolveRejectTest(...args)) {\r\n                    resolve(selectValue(...args));\r\n                }\r\n                else {\r\n                    reject(selectRejectionReason(...args));\r\n                }\r\n            };\r\n        });\r\n\r\n    }\r\n\r\n    get [Symbol.toStringTag](): string {\r\n        return this.promise.toString();\r\n    }\r\n\r\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\r\n        return this.promise.then(onfulfilled, onrejected);\r\n    }\r\n\r\n    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<T | TResult> {\r\n        return this.promise.catch(onrejected);\r\n    }\r\n\r\n    finally(onfinally?: () => void): Promise<T> {\r\n        return this.promise.finally(onfinally);\r\n    }\r\n}", "\r\nexport function isChrome() {\r\n    return \"chrome\" in globalThis && !navigator.userAgent.match(\"CriOS\");\r\n}\r\n\r\nexport function isFirefox() {\r\n    return \"InstallTrigger\" in globalThis;\r\n}\r\n\r\nexport function isSafari() {\r\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n}\r\n\r\nexport function isMacOS() {\r\n    return /^mac/i.test(navigator.platform);\r\n}\r\n\r\nexport function isIOS() {\r\n    return /iP(ad|hone|od)/.test(navigator.platform)\r\n        || /Macintosh(.*?) FxiOS(.*?)\\//.test(navigator.platform)\r\n        || isMacOS()\r\n            && \"maxTouchPoints\" in navigator\r\n            && (navigator as any).maxTouchPoints > 2;\r\n}\r\n\r\nexport function isApple() {\r\n    return isIOS()\r\n        || isMacOS();\r\n}\r\n\r\nexport function isMobileVR() {\r\n    return /Mobile VR/.test(navigator.userAgent)\r\n        || isOculusBrowser;\r\n}\r\n\r\nexport function hasWebXR() {\r\n    return \"xr\" in navigator\r\n        && \"isSessionSupported\" in (navigator as any).xr;\r\n}\r\n\r\nexport function hasWebVR() {\r\n    return \"getVRDisplays\" in navigator;\r\n}\r\n\r\nexport function hasVR() {\r\n    return hasWebXR() || hasWebVR();\r\n}\r\n\r\nexport function isMobile() {\r\n    return /Android/.test(navigator.userAgent)\r\n        || /BlackBerry/.test(navigator.userAgent)\r\n        || /(UC Browser |UCWEB)/.test(navigator.userAgent)\r\n        || isIOS()\r\n        || isMobileVR();\r\n}\r\n\r\nexport function isDesktop() {\r\n    return !isMobile();\r\n}\r\n\r\nconst oculusBrowserPattern = /OculusBrowser\\/(\\d+)\\.(\\d+)\\.(\\d+)/i;\r\nconst oculusMatch = navigator.userAgent.match(oculusBrowserPattern);\r\nexport const isOculusBrowser = !!oculusMatch;\r\nexport const oculusBrowserVersion: { major: number, minor: number, patch: number } = isOculusBrowser && {\r\n    major: parseFloat(oculusMatch[1]),\r\n    minor: parseFloat(oculusMatch[2]),\r\n    patch: parseFloat(oculusMatch[3])\r\n};\r\n\r\nexport const isOculusGo = isOculusBrowser && /pacific/i.test(navigator.userAgent);\r\nexport const isOculusQuest = isOculusBrowser && /quest/i.test(navigator.userAgent);\r\nexport const isOculusQuest2 = isOculusBrowser && /quest 2/i.test(navigator.userAgent);\r\nexport const isOculusQuest1 = isOculusBrowser && !isOculusQuest2;\r\n\r\nexport const isWorker = !(\"Document\" in globalThis);", "const FalseNorthing: number = 10000000;\r\nconst invF: number = 298.257223563;\r\nconst equatorialRadius: number = 6378137;\r\nconst pointScaleFactor: number = 0.9996;\r\nconst E0: number = 500000;\r\n\r\nconst flattening: number = 1 / invF;\r\nconst flatteningComp: number = 1 - flattening;\r\nconst n: number = flattening / (2 - flattening);\r\nconst A: number = (equatorialRadius / (1 + n)) * (1 + (n * n / 4) + (n * n * n * n / 64));\r\n\r\nconst e: number = Math.sqrt(1 - (flatteningComp * flatteningComp));\r\nconst esq: number = 1 - (flatteningComp * flatteningComp);\r\nconst e0sq: number = e * e / (1 - (e * e));\r\n\r\nconst alpha1: number = 1 - (esq * (0.25 + (esq * ((3 / 64) + (5 * esq / 256)))));\r\nconst alpha2: number = esq * ((3 / 8) + (esq * ((3 / 32) + (45 * esq / 1024))));\r\nconst alpha3: number = esq * esq * ((15 / 256) + (esq * 45 / 1024));\r\nconst alpha4: number = esq * esq * esq * (35 / 3072);\r\n\r\nconst beta: number[] = [\r\n    (n / 2) - (2 * n * n / 3) + (37 * n * n * n / 96),\r\n    (n * n / 48) + (n * n * n / 15),\r\n    17 * n * n * n / 480\r\n];\r\n\r\nconst delta: number[] = [\r\n    (2 * n) - (2 * n * n / 3),\r\n    (7 * n * n / 3) - (8 * n * n * n / 5),\r\n    56 * n * n * n / 15\r\n];\r\n\r\nexport const DatumWGS_84 = {\r\n    FalseNorthing,\r\n    equatorialRadius,\r\n    pointScaleFactor,\r\n    E0,\r\n\r\n    A,\r\n    flattening,\r\n    \r\n    e,\r\n    esq,\r\n    e0sq,\r\n\r\n    alpha1,\r\n    alpha2,\r\n    alpha3,\r\n    alpha4,\r\n\r\n    beta,\r\n    delta\r\n};", "export function identity<T>(item: T): T {\r\n    return item;\r\n}\r\n\r\nexport function nothing(): void {\r\n}\r\n\r\nexport function negate(value: number) {\r\n    return -value;\r\n}\r\n\r\nexport function alwaysTrue(): true {\r\n    return true;\r\n}\r\n\r\nexport function alwaysFalse(): false {\r\n    return false;\r\n}\r\n\r\nexport function not(value: boolean) {\r\n    return !value;\r\n}\r\n\r\nexport function and(a: boolean, b: boolean): boolean {\r\n    return a && b;\r\n}\r\n\r\nexport function or(a: boolean, b: boolean): boolean {\r\n    return a || b;\r\n}\r\n\r\nexport function xor(a: boolean, b: boolean): boolean {\r\n    return a !== b;\r\n}\r\n\r\nexport function nand(a: boolean, b: boolean): boolean {\r\n    return not(and(a, b));\r\n}\r\n\r\nexport function nor(a: boolean, b: boolean): boolean {\r\n    return not(or(a, b));\r\n}\r\n\r\nexport function equal<T>(a: T, b: T): boolean {\r\n    return a === b;\r\n}\r\n\r\nexport type AsyncCallback = () => Promise<void>;", "const Tau = 2 * Math.PI;\r\n\r\nexport function angleClamp(v: number) {\r\n    return ((v % Tau) + Tau) % Tau;\r\n}\r\n", "/**\r\n * Pick a value that is proportionally between two values.\r\n */\r\nexport function lerp(a: number, b: number, p: number) {\r\n    return (1 - p) * a + p * b;\r\n}\r\n", "function t(o: any, s: string, c: Function) {\r\n    return typeof o === s\r\n        || o instanceof c;\r\n}\r\n\r\nexport function isFunction(obj: any): obj is Function {\r\n    return t(obj, \"function\", Function);\r\n}\r\n\r\nexport function isString(obj: any): obj is string {\r\n    return t(obj, \"string\", String);\r\n}\r\n\r\nexport function isBoolean(obj: any): obj is boolean {\r\n    return t(obj, \"boolean\", Boolean);\r\n}\r\n\r\nexport function isNumber(obj: any): obj is number {\r\n    return t(obj, \"number\", Number);\r\n}\r\n\r\n/**\r\n * Check a value to see if it is of a number type\r\n * and is not the special NaN value.\r\n */\r\nexport function isGoodNumber(obj: any): obj is number {\r\n    return isNumber(obj)\r\n        && !Number.isNaN(obj);\r\n}\r\n\r\nexport function isObject(obj: any): obj is object {\r\n    return isDefined(obj)\r\n        && t(obj, \"object\", Object);\r\n}\r\n\r\nexport function isPromise<T>(obj: any): obj is Promise<T> {\r\n    return obj instanceof Promise;\r\n}\r\n\r\nexport function isDate(obj: any): obj is Date {\r\n    return obj instanceof Date;\r\n}\r\n\r\nexport function isArray(obj: any): obj is Array<any> {\r\n    return obj instanceof Array;\r\n}\r\n\r\nexport function assertNever(x: never, msg?: string): never {\r\n    throw new Error((msg || \"Unexpected object: \") + x);\r\n}\r\n\r\nexport function isNullOrUndefined<T>(obj: T | null | undefined): obj is null | undefined {\r\n    return obj === null\r\n        || obj === undefined;\r\n}\r\n\r\nexport function isDefined<T>(obj: T | null | undefined): obj is T {\r\n    return !isNullOrUndefined(obj);\r\n}\r\n\r\nexport function isEventListener(obj: EventListenerOrEventListenerObject): obj is EventListener {\r\n    return isFunction(obj);\r\n}\r\n\r\nexport function isEventListenerObject(obj: EventListenerOrEventListenerObject): obj is EventListenerObject {\r\n    return !isEventListener(obj);\r\n}\r\n\r\nexport function isArrayBufferView(obj: any): obj is ArrayBufferView {\r\n    return obj instanceof Uint8Array\r\n        || obj instanceof Uint8ClampedArray\r\n        || obj instanceof Int8Array\r\n        || obj instanceof Uint16Array\r\n        || obj instanceof Int16Array\r\n        || obj instanceof Uint32Array\r\n        || obj instanceof Int32Array\r\n        || obj instanceof Float32Array\r\n        || obj instanceof Float64Array\r\n        || \"BigUint64Array\" in globalThis && obj instanceof globalThis[\"BigUint64Array\"]\r\n        || \"BigInt64Array\" in globalThis && obj instanceof globalThis[\"BigInt64Array\"];\r\n}\r\n\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}", "import { arrayClear, TypedEventBase } from \"../\";\r\nimport type { IProgress } from \"./IProgress\";\r\n\r\nexport class BaseProgress<T = void>\r\n    extends TypedEventBase<T>\r\n    implements IProgress {\r\n    private readonly attached = new Array<IProgress>();\r\n    private soFar: number = null;\r\n    private total: number = null;\r\n    private msg: string = null;\r\n    private est: number = null;\r\n\r\n    protected get p() {\r\n        return this.total > 0\r\n            ? this.soFar / this.total\r\n            : 0;\r\n    }\r\n\r\n    report(soFar: number, total: number, msg?: string, est?: number): void {\r\n        this.soFar = soFar;\r\n        this.total = total;\r\n        this.msg = msg;\r\n        this.est = est;\r\n        for (const attach of this.attached) {\r\n            attach.report(soFar, total, msg, est);\r\n        }\r\n    }\r\n\r\n    attach(prog: IProgress): void {\r\n        this.attached.push(prog);\r\n        prog.report(this.soFar, this.total, this.msg, this.est);\r\n    }\r\n\r\n    clear() {\r\n        this.report(0, 0);\r\n        this._clear();\r\n    }\r\n\r\n    start(msg?: string) {\r\n        this.report(0, 1, msg || \"starting\");\r\n    }\r\n\r\n    end(msg?: string) {\r\n        this.report(1, 1, msg || \"done\");\r\n        this._clear();\r\n    }\r\n\r\n    private _clear() {\r\n        this.soFar = null;\r\n        this.total = null;\r\n        this.msg = null;\r\n        this.est = null;\r\n        arrayClear(this.attached);\r\n    }\r\n}", "import type { BaseParentProgressCallback } from \"./BaseParentProgressCallback\";\r\nimport { BaseProgress } from \"./BaseProgress\";\r\n\r\nexport class ChildProgressCallback extends BaseProgress {\r\n    constructor(private readonly i: number, private readonly prog: BaseParentProgressCallback) {\r\n        super();\r\n    }\r\n\r\n    override report(soFar: number, total: number, msg?: string, est?: number) {\r\n        super.report(soFar, total, msg, est);\r\n        this.prog.update(this.i, soFar, total, msg);\r\n    }\r\n}\r\n", "import { ChildProgressCallback } from \"./ChildProgressCallback\";\r\nimport type { IProgress } from \"./IProgress\";\r\n\r\nexport class BaseParentProgressCallback {\r\n    private weightTotal = 0;\r\n    private readonly start: number;\r\n\r\n    readonly subProgressCallbacks = new Array<IProgress>();\r\n    private readonly subProgressWeights = new Array<number>();\r\n    private readonly subProgressValues = new Array<number>();\r\n\r\n    constructor(private readonly prog: IProgress) {\r\n        this.start = performance.now();\r\n\r\n        for (let i = 0; i < this.subProgressWeights.length; ++i) {\r\n            this.subProgressValues[i] = 0;\r\n            this.subProgressCallbacks[i] = new ChildProgressCallback(i, this);\r\n        }\r\n    }\r\n\r\n    protected addSubProgress(weight?: number): IProgress {\r\n        weight = weight || 1;\r\n        this.weightTotal += weight;\r\n        this.subProgressWeights.push(weight);\r\n        this.subProgressValues.push(0);\r\n        const child = new ChildProgressCallback(this.subProgressCallbacks.length, this);\r\n        this.subProgressCallbacks.push(child);\r\n        return child;\r\n    }\r\n\r\n\r\n    update(i: number, subSoFar: number, subTotal: number, msg?: string) {\r\n        if (this.prog) {\r\n            this.subProgressValues[i] = subSoFar / subTotal;\r\n            let soFar = 0;\r\n            for (let j = 0; j < this.subProgressWeights.length; ++j) {\r\n                soFar += this.subProgressValues[j] * this.subProgressWeights[j];\r\n            }\r\n\r\n            const end = performance.now();\r\n            const delta = end - this.start;\r\n            const est = this.start - end + delta * this.weightTotal / soFar;\r\n            this.prog.report(soFar, this.weightTotal, msg, est);\r\n        }\r\n    };\r\n}\r\n", "import { BaseParentProgressCallback } from \"./BaseParentProgressCallback\";\r\nimport { IProgress } from \"./IProgress\";\r\n\r\nexport function progressSplitWeighted(prog: IProgress, subProgressWeights: number[]) {\r\n    const subProg = new WeightedParentProgressCallback(subProgressWeights, prog);\r\n    return subProg.subProgressCallbacks;\r\n}\r\n\r\n\r\nexport function progressSplit(prog: IProgress, taskCount: number) {\r\n    const subProgressWeights = new Array<number>(taskCount);\r\n    for (let i = 0; i < taskCount; ++i) {\r\n        subProgressWeights[i] = 1;\r\n    }\r\n\r\n    return progressSplitWeighted(prog, subProgressWeights);\r\n}\r\n\r\nclass WeightedParentProgressCallback extends BaseParentProgressCallback {\r\n\r\n    constructor(subProgressWeights: number[], prog: IProgress) {\r\n        super(prog);\r\n\r\n        for (const weight of subProgressWeights) {\r\n            this.addSubProgress(weight);\r\n        }\r\n    }\r\n}\r\n", "import { lerp } from \"../\";\r\n\r\nexport abstract class BaseTimerTickEvent {\r\n    t = 0;\r\n    dt = 0;\r\n    sdt = 0;\r\n    fps: number = 0;\r\n\r\n    set(t: number, dt: number) {\r\n        this.t = t;\r\n        this.dt = dt;\r\n        this.sdt = lerp(this.sdt, dt, 0.01);\r\n        if (dt > 0) {\r\n            this.fps = 1000 / dt;\r\n        }\r\n    }\r\n}\r\n\r\nexport class TimerTickEvent extends BaseTimerTickEvent {\r\n    constructor() {\r\n        super();\r\n        Object.seal(this);\r\n    }\r\n}\r\n\r\nexport interface ITimer {\r\n    isRunning: boolean;\r\n    start(): void;\r\n    stop(): void;\r\n    restart(): void;\r\n    addTickHandler(onTick: (evt: TimerTickEvent) => void): void;\r\n    removeTickHandler(onTick: (evt: TimerTickEvent) => void): void;\r\n}\r\n", "import { arrayRemove } from \"../\";\r\nimport { ITimer, TimerTickEvent } from \"./ITimer\";\r\n\r\nexport abstract class BaseTimer<TimerT>\r\n    implements ITimer {\r\n    protected timer: TimerT = null;\r\n    protected onTick: (t: number) => void;\r\n    private lt: number = -1;\r\n    private tickHandlers = new Array<(evt: TimerTickEvent) => void>();\r\n\r\n    constructor(targetFrameRate?: number) {\r\n        this.targetFPS = targetFrameRate;\r\n        const tickEvt = new TimerTickEvent();\r\n        let dt = 0;\r\n        this.onTick = (t: number) => {\r\n            if (this.lt >= 0) {\r\n                dt = t - this.lt;\r\n                tickEvt.set(t, dt);\r\n                this.tick(tickEvt);\r\n            }\r\n            this.lt = t;\r\n        };\r\n    }\r\n\r\n\r\n    #targetFPS: number = null;\r\n    get targetFPS() {\r\n        return this.#targetFPS;\r\n    }\r\n\r\n    set targetFPS(v: number) {\r\n        this.#targetFPS = v;\r\n    }\r\n\r\n    addTickHandler(onTick: (evt: TimerTickEvent) => void): void {\r\n        this.tickHandlers.push(onTick);\r\n    }\r\n\r\n    removeTickHandler(onTick: (evt: TimerTickEvent) => void): void {\r\n        arrayRemove(this.tickHandlers, onTick);\r\n    }\r\n\r\n    private tick(evt: TimerTickEvent): void {\r\n        for (const handler of this.tickHandlers) {\r\n            handler(evt);\r\n        }\r\n    }\r\n\r\n    restart() {\r\n        this.stop();\r\n        this.start();\r\n    }\r\n\r\n    get isRunning() {\r\n        return this.timer != null;\r\n    }\r\n\r\n    abstract start(): void;\r\n\r\n    stop() {\r\n        this.timer = null;\r\n        this.lt = -1;\r\n    }\r\n\r\n    protected get targetFrameTime() {\r\n        return 1000 / this.targetFPS;\r\n    }\r\n}", "import { isDefined } from \"./typeChecks\";\r\n\r\ntype ProtocolType = `${string}:`;\r\n\r\nfunction parsePort(portString: string): number {\r\n    if (isDefined(portString) && portString.length > 0) {\r\n        return parseFloat(portString);\r\n    }\r\n    return null;\r\n}\r\n\r\nexport class URLBuilder {\r\n    private _url: URL = null;\r\n    private _base: string | URL = undefined;\r\n    private _protocol: string = null\r\n    private _host: string = null;\r\n    private _hostName: string = null;\r\n    private _userName: string = null;\r\n    private _password: string = null;\r\n    private _port: number = null;\r\n    private _pathName: string = null;\r\n    private _hash: string = null;\r\n    private readonly _query = new Map<string, string>();\r\n\r\n    constructor(url?: string | URL, base?: string | URL) {\r\n        if (url !== undefined) {\r\n            this._url = new URL(url, base);\r\n            this.rehydrate();\r\n        }\r\n    }\r\n\r\n    private rehydrate(): void {\r\n        if (isDefined(this._protocol) && this._protocol !== this._url.protocol) {\r\n            this._url.protocol = this._protocol;\r\n        }\r\n\r\n        if (isDefined(this._host) && this._host !== this._url.host) {\r\n            this._url.host = this._host;\r\n        }\r\n\r\n        if (isDefined(this._hostName) && this._hostName !== this._url.hostname) {\r\n            this._url.hostname = this._hostName;\r\n        }\r\n\r\n        if (isDefined(this._userName) && this._userName !== this._url.username) {\r\n            this._url.username = this._userName;\r\n        }\r\n\r\n        if (isDefined(this._password) && this._password !== this._url.password) {\r\n            this._url.password = this._password;\r\n        }\r\n\r\n        if (isDefined(this._port) && this._port.toFixed(0) !== this._url.port) {\r\n            this._url.port = this._port.toFixed(0);\r\n        }\r\n\r\n        if (isDefined(this._pathName) && this._pathName !== this._url.pathname) {\r\n            this._url.pathname = this._pathName;\r\n        }\r\n\r\n        if (isDefined(this._hash) && this._hash !== this._url.hash) {\r\n            this._url.hash = this._hash;\r\n        }\r\n\r\n        for (const [k, v] of this._query) {\r\n            this._url.searchParams.set(k, v);\r\n        }\r\n\r\n        this._protocol = this._url.protocol;\r\n        this._host = this._url.host;\r\n        this._hostName = this._url.hostname;\r\n        this._userName = this._url.username;\r\n        this._password = this._url.password;\r\n        this._port = parsePort(this._url.port);\r\n        this._pathName = this._url.pathname;\r\n        this._hash = this._url.hash;\r\n        this._url.searchParams.forEach((v, k) =>\r\n            this._query.set(k, v));\r\n    }\r\n\r\n    private refresh(): boolean {\r\n        if (this._url === null) {\r\n            if (isDefined(this._protocol)\r\n                && (isDefined(this._host) || isDefined(this._hostName))) {\r\n                if (isDefined(this._host)) {\r\n                    this._url = new URL(`${this._protocol}//${this._host}`, this._base);\r\n                    this._port = parsePort(this._url.port);\r\n                    this.rehydrate();\r\n                    return false;\r\n                }\r\n                else if (isDefined(this._hostName)) {\r\n                    this._url = new URL(`${this._protocol}//${this._hostName}`, this._base);\r\n                    this.rehydrate();\r\n                    return false;\r\n                }\r\n            }\r\n            else if (isDefined(this._pathName) && isDefined(this._base)) {\r\n                this._url = new URL(this._pathName, this._base);\r\n                this.rehydrate();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return isDefined(this._url);\r\n    }\r\n\r\n    base(base: string | URL) {\r\n        if (this._url !== null) {\r\n            throw new Error(\"Cannot redefine base after defining the protocol and domain\")\r\n        }\r\n\r\n        this._base = base;\r\n        this.refresh();\r\n        return this;\r\n    }\r\n\r\n    protocol(protocol: ProtocolType) {\r\n        this._protocol = protocol;\r\n        if (this.refresh()) {\r\n            this._url.protocol = protocol;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    host(host: string) {\r\n        this._host = host;\r\n        if (this.refresh()) {\r\n            this._url.host = host;\r\n            this._hostName = this._url.hostname;\r\n            this._port = parsePort(this._url.port);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    hostName(hostName: string) {\r\n        this._hostName = hostName;\r\n        if (this.refresh()) {\r\n            this._url.hostname = hostName;\r\n            this._host = `${this._url.hostname}:${this._url.port}`;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    port(port: number) {\r\n        this._port = port;\r\n        if (this.refresh()) {\r\n            this._url.port = port.toFixed(0);\r\n            this._host = `${this._url.hostname}:${this._url.port}`;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    userName(userName: string) {\r\n        this._userName = userName;\r\n        if (this.refresh()) {\r\n            this._url.username = userName;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    password(password: string) {\r\n        this._password = password;\r\n        if (this.refresh()) {\r\n            this._url.password = password;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    path(path: string) {\r\n        this._pathName = path;\r\n        if (this.refresh()) {\r\n            this._url.pathname = path;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    pathPop(pattern?: RegExp) {\r\n        pattern = pattern || /\\/[^\\/]+\\/?$/;\r\n        return this.path(this._pathName.replace(pattern, \"\"));\r\n    }\r\n\r\n    pathPush(part: string) {\r\n        let path = this._pathName;\r\n        if (!path.endsWith('/')) {\r\n            path += '/';\r\n        }\r\n\r\n        path += part;\r\n\r\n        return this.path(path);\r\n    }\r\n\r\n    query(name: string, value: string) {\r\n        this._query.set(name, value);\r\n        if (this.refresh()) {\r\n            this._url.searchParams.set(name, value);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    hash(hash: string) {\r\n        this._hash = hash;\r\n        if (this.refresh()) {\r\n            this._url.hash = hash;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    toURL() {\r\n        return this._url;\r\n    }\r\n\r\n    toString() {\r\n        return this._url.href;\r\n    }\r\n\r\n    [Symbol.toStringTag]() {\r\n        return this.toString();\r\n    }\r\n}", "export function mapInvert<T, U>(map: Map<T, U>): Map<U, T> {\r\n    const mapOut = new Map<U, T>();\r\n    for (const [key, value] of map) {\r\n        mapOut.set(value, key);\r\n    }\r\n    return mapOut;\r\n}\r\n\r\n", "import { mapInvert } from \"../collections/mapInvert\";\r\nimport { assertNever } from \"../typeChecks\";\r\n\r\ntype Base = 2 | 10;\r\n\r\ntype Base2Units = \"KiB\"\r\n    | \"MiB\"\r\n    | \"GiB\"\r\n    | \"TiB\";\r\n\r\ntype Base10Units = \"KB\"\r\n    | \"MB\"\r\n    | \"GB\"\r\n    | \"TB\";\r\n\r\ntype Units = \"B\"\r\n    | Base2Units\r\n    | Base10Units;\r\n\r\nfunction isBase2Units(label: Units): label is Base2Units {\r\n    return label !== \"B\"\r\n        && label[1] === 'i';\r\n}\r\n\r\nfunction isBase10Units(label: Units): label is Base10Units {\r\n    return label !== \"B\"\r\n        && !isBase10Units(label);\r\n}\r\n\r\nconst base2Labels = new Map<number, Base2Units>([\r\n    [1, \"KiB\"],\r\n    [2, \"MiB\"],\r\n    [3, \"GiB\"],\r\n    [4, \"TiB\"]\r\n]);\r\n\r\nconst base10Labels = new Map<number, Base10Units>([\r\n    [1, \"KB\"],\r\n    [2, \"MB\"],\r\n    [3, \"GB\"],\r\n    [4, \"TB\"]\r\n]);\r\n\r\nconst base2Sizes = mapInvert(base2Labels);\r\nconst base10Sizes = mapInvert(base10Labels);\r\n\r\nconst labels = new Map<Base, Map<number, Units>>([\r\n    [2, base2Labels],\r\n    [10, base10Labels]\r\n]);\r\n\r\nexport function formatBytes(value: number, base: 2 | 10 = 10) {\r\n    const isNegative = value < 0;\r\n    value = Math.abs(value);\r\n\r\n    const systemBase = base === 2 ? 1024 : 1000;\r\n    let size = Math.min(4, Math.floor(Math.log(value) / Math.log(systemBase)));\r\n    let divisor = Math.pow(systemBase, size);\r\n    if (2 * value >= systemBase * divisor && size < 4) {\r\n        size++;\r\n        divisor *= systemBase;\r\n    }\r\n\r\n    let label: string;\r\n    if (size === 0) {\r\n        label = \"B\";\r\n    }\r\n    else {\r\n        const levels = labels.get(base);\r\n        label = levels.get(size);\r\n        value /= divisor;\r\n    }\r\n\r\n    const isExact = (value % 1) === 0;\r\n    const str = `${isNegative ? \"-\" : \"\"}${value.toFixed(isExact ? 0 : 2)} ${label}`;\r\n\r\n    return str;\r\n}\r\n\r\nexport function toBytes(value: number, units: Units): number {\r\n    if (units === \"B\") {\r\n        return value;\r\n    }\r\n    else {\r\n        let systemBase: number;\r\n        let size: number;\r\n        if (isBase2Units(units)) {\r\n            systemBase = 1024;\r\n            size = base2Sizes.get(units);\r\n        }\r\n        else if (isBase10Units(units)) {\r\n            systemBase = 1000;\r\n            size = base10Sizes.get(units);\r\n        }\r\n        else {\r\n            assertNever(units);\r\n        }\r\n\r\n        const multiplier = Math.pow(systemBase, size);\r\n        return value * multiplier;\r\n    }\r\n}", "const MICROMETERS_PER_MILLIMETER = 1000;\r\nconst MILLIMETERS_PER_CENTIMETER = 10;\r\nconst CENTIMETERS_PER_INCH = 2.54;\r\nconst CENTIMETERS_PER_METER = 100;\r\nconst INCHES_PER_HAND = 4;\r\nconst HANDS_PER_FOOT = 3;\r\nconst FEET_PER_YARD = 3;\r\nconst FEET_PER_ROD = 16.5;\r\nconst METERS_PER_KILOMETER = 1000;\r\nconst RODS_PER_FURLONG = 40;\r\nconst FURLONGS_PER_MILE = 8;\r\n\r\nconst MICROMETERS_PER_CENTIMETER = MICROMETERS_PER_MILLIMETER * MILLIMETERS_PER_CENTIMETER;\r\nconst MICROMETERS_PER_INCH = MICROMETERS_PER_CENTIMETER * CENTIMETERS_PER_INCH;\r\nconst MICROMETERS_PER_HAND = MICROMETERS_PER_INCH * INCHES_PER_HAND;\r\nconst MICROMETERS_PER_FOOT = MICROMETERS_PER_HAND * HANDS_PER_FOOT;\r\nconst MICROMETERS_PER_YARD = MICROMETERS_PER_FOOT * FEET_PER_YARD;\r\nconst MICROMETERS_PER_METER = MICROMETERS_PER_CENTIMETER * CENTIMETERS_PER_METER;\r\nconst MICROMETERS_PER_ROD = MICROMETERS_PER_FOOT * FEET_PER_ROD;\r\nconst MICROMETERS_PER_FURLONG = MICROMETERS_PER_ROD * RODS_PER_FURLONG;\r\nconst MICROMETERS_PER_KILOMETER = MICROMETERS_PER_METER * METERS_PER_KILOMETER;\r\nconst MICROMETERS_PER_MILE = MICROMETERS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst MILLIMETERS_PER_INCH = MILLIMETERS_PER_CENTIMETER * CENTIMETERS_PER_INCH;\r\nconst MILLIMETERS_PER_HAND = MILLIMETERS_PER_INCH * INCHES_PER_HAND;\r\nconst MILLIMETERS_PER_FOOT = MILLIMETERS_PER_HAND * HANDS_PER_FOOT;\r\nconst MILLIMETERS_PER_YARD = MILLIMETERS_PER_FOOT * FEET_PER_YARD;\r\nconst MILLIMETERS_PER_METER = MILLIMETERS_PER_CENTIMETER * CENTIMETERS_PER_METER;\r\nconst MILLIMETERS_PER_ROD = MILLIMETERS_PER_FOOT * FEET_PER_ROD;\r\nconst MILLIMETERS_PER_FURLONG = MILLIMETERS_PER_ROD * RODS_PER_FURLONG;\r\nconst MILLIMETERS_PER_KILOMETER = MILLIMETERS_PER_METER * METERS_PER_KILOMETER;\r\nconst MILLIMETERS_PER_MILE = MILLIMETERS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst CENTIMETERS_PER_HAND = CENTIMETERS_PER_INCH * INCHES_PER_HAND;\r\nconst CENTIMETERS_PER_FOOT = CENTIMETERS_PER_HAND * HANDS_PER_FOOT;\r\nconst CENTIMETERS_PER_YARD = CENTIMETERS_PER_FOOT * FEET_PER_YARD;\r\nconst CENTIMETERS_PER_ROD = CENTIMETERS_PER_FOOT * FEET_PER_ROD;\r\nconst CENTIMETERS_PER_FURLONG = CENTIMETERS_PER_ROD * RODS_PER_FURLONG;\r\nconst CENTIMETERS_PER_KILOMETER = CENTIMETERS_PER_METER * METERS_PER_KILOMETER;\r\nconst CENTIMETERS_PER_MILE = CENTIMETERS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst INCHES_PER_FOOT = INCHES_PER_HAND * HANDS_PER_FOOT;\r\nconst INCHES_PER_YARD = INCHES_PER_FOOT * FEET_PER_YARD;\r\nconst INCHES_PER_METER = CENTIMETERS_PER_METER / CENTIMETERS_PER_INCH;\r\nconst INCHES_PER_ROD = INCHES_PER_FOOT * FEET_PER_ROD;\r\nconst INCHES_PER_FURLONG = INCHES_PER_ROD * RODS_PER_FURLONG;\r\nconst INCHES_PER_KILOMETER = INCHES_PER_METER * METERS_PER_KILOMETER;\r\nconst INCHES_PER_MILE = INCHES_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst HANDS_PER_YARD = HANDS_PER_FOOT * FEET_PER_YARD;\r\nconst HANDS_PER_METER = CENTIMETERS_PER_METER / CENTIMETERS_PER_HAND;\r\nconst HANDS_PER_ROD = HANDS_PER_FOOT * FEET_PER_ROD;\r\nconst HANDS_PER_FURLONG = HANDS_PER_ROD * RODS_PER_FURLONG;\r\nconst HANDS_PER_KILOMETER = HANDS_PER_METER * METERS_PER_KILOMETER;\r\nconst HANDS_PER_MILE = HANDS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst FEET_PER_METER = INCHES_PER_METER / INCHES_PER_FOOT;\r\nconst FEET_PER_FURLONG = FEET_PER_ROD * RODS_PER_FURLONG;\r\nconst FEET_PER_KILOMETER = FEET_PER_METER * METERS_PER_KILOMETER;\r\nconst FEET_PER_MILE = FEET_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst YARDS_PER_METER = INCHES_PER_METER / INCHES_PER_YARD;\r\nconst YARDS_PER_ROD = FEET_PER_ROD / FEET_PER_YARD;\r\nconst YARDS_PER_FURLONG = YARDS_PER_ROD * RODS_PER_FURLONG;\r\nconst YARDS_PER_KILOMETER = YARDS_PER_METER * METERS_PER_KILOMETER;\r\nconst YARDS_PER_MILE = YARDS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst METERS_PER_ROD = FEET_PER_ROD / FEET_PER_METER;\r\nconst METERS_PER_FURLONG = METERS_PER_ROD * RODS_PER_FURLONG;\r\nconst METERS_PER_MILE = METERS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst RODS_PER_KILOMETER = METERS_PER_KILOMETER / METERS_PER_ROD;\r\nconst RODS_PER_MILE = RODS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst FURLONGS_PER_KILOMETER = METERS_PER_KILOMETER /METERS_PER_FURLONG;\r\n\r\nconst KILOMETERS_PER_MILE = FURLONGS_PER_MILE / FURLONGS_PER_KILOMETER;\r\n\r\n\r\nexport function centimeters2Micrometers(centimeters: number): number {\r\n    return centimeters * MICROMETERS_PER_CENTIMETER;\r\n}\r\n\r\nexport function centimeters2Millimeters(centimeters: number): number {\r\n    return centimeters * MILLIMETERS_PER_CENTIMETER;\r\n}\r\n\r\nexport function centimeters2Inches(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_INCH;\r\n}\r\n\r\nexport function centimeters2Hands(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_HAND;\r\n}\r\n\r\nexport function centimeters2Feet(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_FOOT;\r\n}\r\n\r\nexport function centimeters2Yards(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_YARD;\r\n}\r\n\r\nexport function centimeters2Meters(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_METER;\r\n}\r\n\r\nexport function centimeters2Rods(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_ROD;\r\n}\r\n\r\nexport function centimeters2Furlongs(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function centimeters2Kilometers(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function centimeters2Miles(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_MILE;\r\n}\r\n\r\nexport function feet2Micrometers(feet: number): number {\r\n    return feet * MICROMETERS_PER_FOOT;\r\n}\r\n\r\nexport function feet2Millimeters(feet: number): number {\r\n    return feet * MILLIMETERS_PER_FOOT;\r\n}\r\n\r\nexport function feet2Centimeters(feet: number): number {\r\n    return feet * CENTIMETERS_PER_FOOT;\r\n}\r\n\r\nexport function feet2Inches(feet: number): number {\r\n    return feet * INCHES_PER_FOOT;\r\n}\r\n\r\nexport function feet2Hands(feet: number): number {\r\n    return feet * HANDS_PER_FOOT;\r\n}\r\n\r\nexport function feet2Yards(feet: number): number {\r\n    return feet / FEET_PER_YARD;\r\n}\r\n\r\nexport function feet2Meters(feet: number): number {\r\n    return feet / FEET_PER_METER;\r\n}\r\n\r\nexport function feet2Rods(feet: number): number {\r\n    return feet / FEET_PER_ROD;\r\n}\r\n\r\nexport function feet2Furlongs(feet: number): number {\r\n    return feet / FEET_PER_FURLONG;\r\n}\r\n\r\nexport function feet2Kilometers(feet: number): number {\r\n    return feet / FEET_PER_KILOMETER;\r\n}\r\n\r\nexport function feet2Miles(feet: number): number {\r\n    return feet / FEET_PER_MILE;\r\n}\r\n\r\nexport function furlongs2Micrometers(furlongs: number): number {\r\n    return furlongs * MICROMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Millimeters(furlongs: number): number {\r\n    return furlongs * MILLIMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Centimeters(furlongs: number): number {\r\n    return furlongs * CENTIMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Inches(furlongs: number): number {\r\n    return furlongs * INCHES_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Hands(furlongs: number): number {\r\n    return furlongs * HANDS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Feet(furlongs: number): number {\r\n    return furlongs * FEET_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Yards(furlongs: number): number {\r\n    return furlongs * YARDS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Meters(furlongs: number): number {\r\n    return furlongs * METERS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Rods(furlongs: number): number {\r\n    return furlongs * RODS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Kilometers(furlongs: number): number {\r\n    return furlongs / FURLONGS_PER_KILOMETER;\r\n}\r\n\r\nexport function furlongs2Miles(furlongs: number): number {\r\n    return furlongs / FURLONGS_PER_MILE;\r\n}\r\n\r\nexport function hands2Micrometers(hands: number): number {\r\n    return hands * MICROMETERS_PER_HAND;\r\n}\r\n\r\nexport function hands2Millimeters(hands: number): number {\r\n    return hands * MILLIMETERS_PER_HAND;\r\n}\r\n\r\nexport function hands2Centimeters(hands: number): number {\r\n    return hands * CENTIMETERS_PER_HAND;\r\n}\r\n\r\nexport function hands2Inches(hands: number): number {\r\n    return hands * INCHES_PER_HAND;\r\n}\r\n\r\nexport function hands2Feet(hands: number): number {\r\n    return hands / HANDS_PER_FOOT;\r\n}\r\n\r\nexport function hands2Yards(hands: number): number {\r\n    return hands / HANDS_PER_YARD;\r\n}\r\n\r\nexport function hands2Meters(hands: number): number {\r\n    return hands / HANDS_PER_METER;\r\n}\r\n\r\nexport function hands2Rods(hands: number): number {\r\n    return hands / HANDS_PER_ROD;\r\n}\r\n\r\nexport function hands2Furlongs(hands: number): number {\r\n    return hands / HANDS_PER_FURLONG;\r\n}\r\n\r\nexport function hands2Kilometers(hands: number): number {\r\n    return hands / HANDS_PER_KILOMETER;\r\n}\r\n\r\nexport function hands2Miles(hands: number): number {\r\n    return hands / HANDS_PER_MILE;\r\n}\r\n\r\nexport function inches2Micrometers(inches: number): number {\r\n    return inches * MICROMETERS_PER_INCH;\r\n}\r\n\r\nexport function inches2Millimeters(inches: number): number {\r\n    return inches * MILLIMETERS_PER_INCH;\r\n}\r\n\r\nexport function inches2Centimeters(inches: number): number {\r\n    return inches * CENTIMETERS_PER_INCH;\r\n}\r\n\r\nexport function inches2Hands(inches: number): number {\r\n    return inches / INCHES_PER_HAND;\r\n}\r\n\r\nexport function inches2Feet(inches: number): number {\r\n    return inches / INCHES_PER_FOOT;\r\n}\r\n\r\nexport function inches2Yards(inches: number): number {\r\n    return inches / INCHES_PER_YARD;\r\n}\r\n\r\nexport function inches2Meters(inches: number): number {\r\n    return inches / INCHES_PER_METER;\r\n}\r\n\r\nexport function inches2Rods(inches: number): number {\r\n    return inches / INCHES_PER_ROD;\r\n}\r\n\r\nexport function inches2Furlongs(inches: number): number {\r\n    return inches / INCHES_PER_FURLONG;\r\n}\r\n\r\nexport function inches2Kilometers(inches: number): number {\r\n    return inches / INCHES_PER_KILOMETER;\r\n}\r\n\r\nexport function inches2Miles(inches: number): number {\r\n    return inches / INCHES_PER_MILE;\r\n}\r\n\r\nexport function kilometers2Micrometers(kilometers: number): number {\r\n    return kilometers * MICROMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Millimeters(kilometers: number): number {\r\n    return kilometers * MILLIMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Centimeters(kilometers: number): number {\r\n    return kilometers * CENTIMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Inches(kilometers: number): number {\r\n    return kilometers * INCHES_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Hands(kilometers: number): number {\r\n    return kilometers * HANDS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Feet(kilometers: number): number {\r\n    return kilometers * FEET_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Yards(kilometers: number): number {\r\n    return kilometers * YARDS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Meters(kilometers: number): number {\r\n    return kilometers * METERS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Rods(kilometers: number): number {\r\n    return kilometers * RODS_PER_KILOMETER;\r\n}\r\nexport function kilometers2Furlongs(kilometers: number): number {\r\n    return kilometers * FURLONGS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Miles(kilometers: number): number {\r\n    return kilometers / KILOMETERS_PER_MILE;\r\n}\r\n\r\nexport function meters2Micrometers(meters: number): number {\r\n    return meters * MICROMETERS_PER_METER;\r\n}\r\n\r\nexport function meters2Millimeters(meters: number): number {\r\n    return meters * MILLIMETERS_PER_METER;\r\n}\r\n\r\nexport function meters2Centimeters(meters: number): number {\r\n    return meters * CENTIMETERS_PER_METER;\r\n}\r\n\r\nexport function meters2Inches(meters: number): number {\r\n    return meters * INCHES_PER_METER;\r\n}\r\n\r\nexport function meters2Hands(meters: number): number {\r\n    return meters * HANDS_PER_METER;\r\n}\r\n\r\nexport function meters2Feet(meters: number): number {\r\n    return meters * FEET_PER_METER;\r\n}\r\n\r\nexport function meters2Yards(meters: number): number {\r\n    return meters * YARDS_PER_METER;\r\n}\r\n\r\nexport function meters2Rods(meters: number): number {\r\n    return meters / METERS_PER_ROD;\r\n}\r\n\r\nexport function meters2Furlongs(meters: number): number {\r\n    return meters / METERS_PER_FURLONG;\r\n}\r\n\r\nexport function meters2Kilometers(meters: number): number {\r\n    return meters / METERS_PER_KILOMETER;\r\n}\r\n\r\nexport function meters2Miles(meters: number): number {\r\n    return meters / METERS_PER_MILE;\r\n}\r\n\r\nexport function micrometers2Millimeters(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_MILLIMETER;\r\n}\r\n\r\nexport function micrometers2Centimeters(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_CENTIMETER;\r\n}\r\n\r\nexport function micrometers2Inches(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_INCH;\r\n}\r\n\r\nexport function micrometers2Hands(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_HAND;\r\n}\r\n\r\nexport function micrometers2Feet(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_FOOT;\r\n}\r\n\r\nexport function micrometers2Yards(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_YARD;\r\n}\r\n\r\nexport function micrometers2Meters(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_METER;\r\n}\r\n\r\nexport function micrometers2Rods(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_ROD;\r\n}\r\n\r\nexport function micrometers2Furlongs(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function micrometers2Kilometers(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function micrometers2Miles(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Micrometers(miles: number): number {\r\n    return miles * MICROMETERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Millimeters(miles: number): number {\r\n    return miles * MILLIMETERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Centimeters(miles: number): number {\r\n    return miles * CENTIMETERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Inches(miles: number): number {\r\n    return miles * INCHES_PER_MILE;\r\n}\r\n\r\nexport function miles2Hands(miles: number): number {\r\n    return miles * HANDS_PER_MILE;\r\n}\r\n\r\nexport function miles2Feet(miles: number): number {\r\n    return miles * FEET_PER_MILE;\r\n}\r\n\r\nexport function miles2Yards(miles: number): number {\r\n    return miles * YARDS_PER_MILE;\r\n}\r\n\r\nexport function miles2Meters(miles: number): number {\r\n    return miles * METERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Rods(miles: number): number {\r\n    return miles * RODS_PER_MILE;\r\n}\r\n\r\nexport function miles2Furlongs(miles: number): number {\r\n    return miles * FURLONGS_PER_MILE;\r\n}\r\n\r\nexport function miles2Kilometers(miles: number): number {\r\n    return miles * KILOMETERS_PER_MILE;\r\n}\r\n\r\nexport function millimeters2Micrometers(millimeters: number): number {\r\n    return millimeters * MICROMETERS_PER_MILLIMETER;\r\n}\r\n\r\nexport function millimeters2Centimeters(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_CENTIMETER;\r\n}\r\n\r\nexport function millimeters2Inches(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_INCH;\r\n}\r\n\r\nexport function millimeters2Hands(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_HAND;\r\n}\r\n\r\nexport function millimeters2Feet(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_FOOT;\r\n}\r\n\r\nexport function millimeters2Yards(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_YARD;\r\n}\r\n\r\nexport function millimeters2Meters(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_METER;\r\n}\r\n\r\nexport function millimeters2Rods(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_ROD;\r\n}\r\n\r\nexport function millimeters2Furlongs(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function millimeters2Kilometers(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function millimeters2Miles(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_MILE;\r\n}\r\n\r\nexport function rods2Micrometers(rods: number): number {\r\n    return rods * MICROMETERS_PER_ROD;\r\n}\r\n\r\nexport function rods2Millimeters(rods: number): number {\r\n    return rods * MILLIMETERS_PER_ROD;\r\n}\r\n\r\nexport function rods2Centimeters(rods: number): number {\r\n    return rods * CENTIMETERS_PER_ROD;\r\n}\r\n\r\nexport function rods2Inches(rods: number): number {\r\n    return rods * INCHES_PER_ROD;\r\n}\r\n\r\nexport function rods2Hands(rods: number): number {\r\n    return rods * HANDS_PER_ROD;\r\n}\r\n\r\nexport function rods2Feet(rods: number): number {\r\n    return rods * FEET_PER_ROD;\r\n}\r\n\r\nexport function rods2Yards(rods: number): number {\r\n    return rods * YARDS_PER_ROD;\r\n}\r\n\r\nexport function rods2Meters(rods: number): number {\r\n    return rods * METERS_PER_ROD;\r\n}\r\n\r\nexport function rods2Furlongs(rods: number): number {\r\n    return rods / RODS_PER_FURLONG;\r\n}\r\n\r\nexport function rods2Kilometers(rods: number): number {\r\n    return rods / RODS_PER_KILOMETER;\r\n}\r\n\r\nexport function rods2Miles(rods: number): number {\r\n    return rods / RODS_PER_MILE;\r\n}\r\n\r\nexport function yards2Micrometers(yards: number): number {\r\n    return yards * MICROMETERS_PER_YARD;\r\n}\r\n\r\nexport function yards2Millimeters(yards: number): number {\r\n    return yards * MILLIMETERS_PER_YARD;\r\n}\r\n\r\nexport function yards2Centimeters(yards: number): number {\r\n    return yards * CENTIMETERS_PER_YARD;\r\n}\r\n\r\nexport function yards2Inches(yards: number): number {\r\n    return yards * INCHES_PER_YARD;\r\n}\r\n\r\nexport function yards2Hands(yards: number): number {\r\n    return yards * HANDS_PER_YARD;\r\n}\r\n\r\nexport function yards2Feet(yards: number): number {\r\n    return yards * FEET_PER_YARD;\r\n}\r\n\r\nexport function yards2Meters(yards: number): number {\r\n    return yards / YARDS_PER_METER;\r\n}\r\n\r\nexport function yards2Rods(yards: number): number {\r\n    return yards / YARDS_PER_ROD;\r\n}\r\n\r\nexport function yards2Furlongs(yards: number): number {\r\n    return yards / YARDS_PER_FURLONG;\r\n}\r\n\r\nexport function yards2Kilometers(yards: number): number {\r\n    return yards / YARDS_PER_KILOMETER;\r\n}\r\n\r\nexport function yards2Miles(yards: number): number {\r\n    return yards / YARDS_PER_MILE;\r\n}", "import { isDefined, isFunction, isObject } from \"./typeChecks\";\r\n\r\nexport interface IDisposable {\r\n    dispose(): void;\r\n}\r\n\r\nexport interface IClosable {\r\n    close(): void;\r\n}\r\n\r\nexport interface ICloneable {\r\n    clone(): unknown;\r\n}\r\n\r\nexport interface IDestroyable {\r\n    destroy(): void;\r\n}\r\n\r\nfunction interfaceSigCheck<T>(obj: any, ...funcNames: string[]): obj is T {\r\n    if (!isObject(obj)) {\r\n        return false;\r\n    }\r\n\r\n    obj = obj as any;\r\n\r\n    for (const funcName of funcNames) {\r\n        if (!(funcName in obj)) {\r\n            return false;\r\n        }\r\n\r\n        const func = obj[funcName];\r\n        if (!isFunction(func)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function isDisposable(obj: any): obj is IDisposable {\r\n    return interfaceSigCheck(obj, \"dispose\");\r\n}\r\n\r\nexport function isDestroyable(obj: any): obj is IDestroyable {\r\n    return interfaceSigCheck(obj, \"destroy\");\r\n}\r\n\r\nexport function isClosable(obj: any): obj is IClosable {\r\n    return interfaceSigCheck(obj, \"close\");\r\n}\r\n\r\nexport function isCloneable(obj: any): obj is ICloneable {\r\n    return interfaceSigCheck(obj, \"clone\");\r\n}\r\n\r\nexport function dispose(val: any): void {\r\n    if (isDisposable(val)) {\r\n        val.dispose();\r\n    }\r\n\r\n    if (isClosable(val)) {\r\n        val.close();\r\n    }\r\n\r\n    if (isDestroyable(val)) {\r\n        val.destroy();\r\n    }\r\n}\r\n\r\ntype Cleanupable = IDisposable | IClosable | IDestroyable;\r\n\r\nexport function using<T extends Cleanupable, U>(val: T, thunk: (val: T) => U): U {\r\n    try {\r\n        return thunk(val);\r\n    } finally {\r\n        dispose(val);\r\n    }\r\n}\r\n\r\nexport function usingArray<T extends Cleanupable, U>(vals: T[], thunk: (val: T[]) => U): U {\r\n    try {\r\n        return thunk(vals);\r\n    } finally {\r\n        if (isDefined(vals)) {\r\n            for (const val of vals) {\r\n                dispose(val);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function usingAsync<T extends Cleanupable, U>(val: T, thunk: (val: T) => Promise<U>): Promise<U> {\r\n    try {\r\n        return await thunk(val);\r\n    } finally {\r\n        dispose(val);\r\n    }\r\n}\r\n\r\n\r\nexport async function usingArrayAsync<T extends Cleanupable, U>(vals: T[], thunk: (val: T[]) => Promise<U>): Promise<U> {\r\n    try {\r\n        return await thunk(vals);\r\n    } finally {\r\n        if (isDefined(vals)) {\r\n            for (const val of vals) {\r\n                dispose(val);\r\n            }\r\n        }\r\n    }\r\n}", "/**\r\n * Removes an item at the given index from an array.\r\n */\r\nexport function arrayRemoveAt<T>(arr: T[], idx: number) {\r\n    return arr.splice(idx, 1)[0];\r\n}", "/**\r\n * Empties out an array, returning the items that were in the array.\r\n * \r\n * @param arr the array to empty\r\n */\r\nexport function arrayClear<T>(arr: T[]) {\r\n    return arr.splice(0);\r\n}", "\uFEFF/**\r\n * Checks to see if two arrays contain the same elements\r\n * @returns -1 if the arrays match, the index of the first mismatched item if they don't.\r\n * @param arr1\r\n * @param arr2\r\n */\r\n\r\nexport function arrayCompare<T>(arr1: ReadonlyArray<T>, arr2: ReadonlyArray<T>): number {\r\n    for (let i = 0; i < arr1.length; ++i) {\r\n        if (arr1[i] !== arr2[i]) {\r\n            return i;\r\n        }\r\n    }\r\n\r\n    return -1;\r\n}\r\n", "import { arrayRemoveAt } from \"./arrayRemoveAt\";\r\n\r\n/**\r\n * Removes a given item from an array, returning true if the item was removed.\r\n */\r\nexport function arrayRemove<T>(arr: T[], value: T) {\r\n    const idx = arr.indexOf(value);\r\n    if (idx > -1) {\r\n        arrayRemoveAt(arr, idx);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function arrayFilter<T>(arr: T[], predicate: (v: T) => boolean): T {\r\n    for (let i = arr.length - 1; i >= 0; --i) {\r\n        if (predicate(arr[i])) {\r\n            return arrayRemoveAt(arr, i);\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function arrayRemoveByKey<T, K>(arr: T[], key: K, getKey: (v: T) => K): T {\r\n    return arrayFilter(arr, (v) => getKey(v) === key);\r\n}", "\r\nexport function mapMap<T, U, V>(items: T[], makeID: (item: T) => U, makeValue: (item: T) => V) {\r\n    return new Map(items.map((item) => [makeID(item), makeValue(item)]));\r\n}", "import { isDefined, isNullOrUndefined } from \"../\";\r\nimport { arrayClear } from \"./arrayClear\";\r\nimport { arrayRemove } from \"./arrayRemove\";\r\n\r\nexport class PriorityList<KeyT, ValueT> {\r\n    private readonly items = new Map<KeyT, ValueT[]>();\r\n    private readonly defaultItems = new Array<ValueT>();\r\n\r\n    constructor(init?: [KeyT, ValueT][]) {\r\n        if (isDefined(init)) {\r\n            for (const [key, value] of init) {\r\n                this.add(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    add(key: KeyT, value: ValueT): this {\r\n        if (isNullOrUndefined(key)) {\r\n            this.defaultItems.push(value);\r\n        }\r\n        else {\r\n            let list = this.items.get(key);\r\n            if (isNullOrUndefined(list)) {\r\n                this.items.set(key, list = []);\r\n            }\r\n\r\n            list.push(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    entries(): IterableIterator<[KeyT, ValueT[]]> {\r\n        return this.items.entries();\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        return this.entries();\r\n    }\r\n\r\n    keys(): IterableIterator<KeyT> {\r\n        return this.items.keys();\r\n    }\r\n\r\n    *values(): IterableIterator<ValueT> {\r\n        for (const item of this.defaultItems) {\r\n            yield item;\r\n        }\r\n        for (const list of this.items.values()) {\r\n            for (const item of list) {\r\n                yield item;\r\n            }\r\n        }\r\n    }\r\n\r\n    has(key: KeyT): boolean {\r\n        if (isDefined(key)) {\r\n            return this.items.has(key);\r\n        }\r\n        else {\r\n            return this.defaultItems.length > 0;\r\n        }\r\n    }\r\n\r\n    get(key: KeyT): ValueT[] {\r\n        if (isNullOrUndefined(key)) {\r\n            return this.defaultItems;\r\n        }\r\n\r\n        return this.items.get(key) || [];\r\n    }\r\n\r\n    count(key: KeyT): number {\r\n        if (isNullOrUndefined(key)) {\r\n            return this.defaultItems.length;\r\n        }\r\n\r\n        const list = this.get(key);\r\n        if (isDefined(list)) {\r\n            return list.length;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    get size(): number {\r\n        let size = this.defaultItems.length;\r\n        for (const list of this.items.values()) {\r\n            size += list.length;\r\n        }\r\n        return size;\r\n    }\r\n\r\n    delete(key: KeyT) {\r\n        if (isNullOrUndefined(key)) {\r\n            return arrayClear(this.defaultItems).length > 0;\r\n        }\r\n        else {\r\n            return this.items.delete(key);\r\n        }\r\n    }\r\n\r\n    remove(key: KeyT, value: ValueT) {\r\n        if (isNullOrUndefined(key)) {\r\n            arrayRemove(this.defaultItems, value);\r\n        }\r\n        else {\r\n            const list = this.items.get(key);\r\n            if (isDefined(list)) {\r\n                arrayRemove(list, value);\r\n                if (list.length === 0) {\r\n                    this.items.delete(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.items.clear();\r\n        arrayClear(this.defaultItems);\r\n    }\r\n}\r\n\r\n\r\n", "import { isDefined, isNullOrUndefined } from \"../\";\r\n\r\n\r\n\r\nexport class PriorityMap<Key1T, Key2T, ValueT> {\r\n    private readonly items = new Map<Key1T, Map<Key2T, ValueT>>();\r\n\r\n    constructor(init?: Iterable<[Key1T, Key2T, ValueT]>) {\r\n        if (isDefined(init)) {\r\n            for (const [key1, key2, value] of init) {\r\n                this.add(key1, key2, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    add(key1: Key1T, key2: Key2T, value: ValueT): this {\r\n        let level1 = this.items.get(key1);\r\n        if (isNullOrUndefined(level1)) {\r\n            this.items.set(key1, level1 = new Map());\r\n        }\r\n\r\n        level1.set(key2, value);\r\n\r\n        return this;\r\n    }\r\n\r\n    *entries(): IterableIterator<[Key1T, Key2T, ValueT]> {\r\n        for (const [key1, level1] of this.items) {\r\n            for (const [key2, value] of level1) {\r\n                yield [key1, key2, value];\r\n            }\r\n        }\r\n    }\r\n    keys(): IterableIterator<Key1T>;\r\n    keys(key1: Key1T): IterableIterator<Key2T>;\r\n    keys(key1?: Key1T): IterableIterator<Key1T | Key2T> {\r\n        if (isNullOrUndefined(key1)) {\r\n            return this.items.keys();\r\n        }\r\n        else {\r\n            return this.items.get(key1).keys();\r\n        }\r\n    }\r\n\r\n    *values(): IterableIterator<ValueT> {\r\n        for (const level1 of this.items.values()) {\r\n            for (const value of level1.values()) {\r\n                yield value;\r\n            }\r\n        }\r\n    }\r\n\r\n    has(key1: Key1T, key2?: Key2T): boolean {\r\n        return this.items.has(key1)\r\n            && (isNullOrUndefined(key2)\r\n                || this.items.get(key1).has(key2));\r\n    }\r\n\r\n    get(key1: Key1T): Map<Key2T, ValueT>;\r\n    get(key1: Key1T, key2: Key2T): ValueT;\r\n    get(key1: Key1T, key2?: Key2T): ValueT | Map<Key2T, ValueT> {\r\n        if (isNullOrUndefined(key2)) {\r\n            return this.items.get(key1);\r\n        }\r\n        else if (this.items.has(key1)) {\r\n            return this.items.get(key1).get(key2);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    count(key1: Key1T): number {\r\n        if (this.items.has(key1)) {\r\n            return this.items.get(key1).size;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    get size(): number {\r\n        let size = 0;\r\n        for (const list of this.items.values()) {\r\n            size += list.size;\r\n        }\r\n        return size;\r\n    }\r\n\r\n    delete(key1: Key1T, key2?: Key2T) {\r\n        if (isNullOrUndefined(key2)) {\r\n            return this.items.delete(key1);\r\n        }\r\n        else if (this.items.has(key1)) {\r\n            return this.items.get(key1).delete(key2);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.items.clear();\r\n    }\r\n}\r\n", "import { arrayClear, arrayRemoveAt, isBoolean, isDefined, isFunction, isNullOrUndefined } from \"../\";\r\n\r\ntype EventCallback = (evt: Event) => any;\r\n\r\nexport class EventBase implements EventTarget {\r\n    private readonly listeners = new Map<string, EventCallback[]>();\r\n    private readonly listenerOptions = new Map<EventCallback, boolean | AddEventListenerOptions>();\r\n\r\n    addEventListener(type: string, callback: (evt: Event) => any, options?: boolean | AddEventListenerOptions): void {\r\n        if (isFunction(callback)) {\r\n            let listeners = this.listeners.get(type);\r\n            if (!listeners) {\r\n                listeners = new Array<EventCallback>();\r\n                this.listeners.set(type, listeners);\r\n            }\r\n\r\n            if (!listeners.find((c) => c === callback)) {\r\n                listeners.push(callback);\r\n\r\n                if (options) {\r\n                    this.listenerOptions.set(callback, options);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (evt: Event) => any) {\r\n        if (isFunction(callback)) {\r\n            const listeners = this.listeners.get(type);\r\n            if (listeners) {\r\n                this.removeListener(listeners, callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    clearEventListeners(type?: string) {\r\n        for (const [evtName, handlers] of this.listeners) {\r\n            if (isNullOrUndefined(type) || type === evtName) {\r\n                for (const handler of handlers) {\r\n                    this.removeEventListener(type, handler);\r\n                }\r\n                arrayClear(handlers);\r\n                this.listeners.delete(evtName);\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeListener(listeners: EventCallback[], callback: EventCallback) {\r\n        const idx = listeners.findIndex((c) => c === callback);\r\n        if (idx >= 0) {\r\n            arrayRemoveAt(listeners, idx);\r\n            if (this.listenerOptions.has(callback)) {\r\n                this.listenerOptions.delete(callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(evt: Event): boolean {\r\n        const listeners = this.listeners.get(evt.type);\r\n        if (listeners) {\r\n            for (const callback of listeners) {\r\n                const options = this.listenerOptions.get(callback);\r\n                if (isDefined(options)\r\n                    && !isBoolean(options)\r\n                    && options.once) {\r\n                    this.removeListener(listeners, callback);\r\n                }\r\n\r\n                callback.call(this, evt);\r\n            }\r\n        }\r\n        return !evt.defaultPrevented;\r\n    }\r\n}\r\n\r\nexport class TypedEvent<T extends string> extends Event {\r\n\r\n    override get type(): T {\r\n        return super.type as T;\r\n    }\r\n\r\n    constructor(type: T) {\r\n        super(type);\r\n    }\r\n}\r\n\r\nexport class TypedEventBase<EventsT> extends EventBase {\r\n    private readonly bubblers = new Set<TypedEventBase<EventsT>>();\r\n    private readonly scopes = new WeakMap<object, Array<[any, any]>>();\r\n\r\n    addBubbler(bubbler: TypedEventBase<EventsT>) {\r\n        this.bubblers.add(bubbler);\r\n    }\r\n\r\n    removeBubbler(bubbler: TypedEventBase<EventsT>) {\r\n        this.bubblers.delete(bubbler);\r\n    }\r\n\r\n    override addEventListener<K extends keyof EventsT & string>(type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any, options?: boolean | AddEventListenerOptions): void {\r\n        super.addEventListener(type, callback as any, options);\r\n    }\r\n\r\n    override removeEventListener<K extends keyof EventsT & string>(type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any) {\r\n        super.removeEventListener(type, callback as any);\r\n    }\r\n\r\n    override clearEventListeners<K extends keyof EventsT & string>(type?: K): void {\r\n        return super.clearEventListeners(type);\r\n    }\r\n\r\n    addScopedEventListener<K extends keyof EventsT & string>(scope: object, type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any, options?: boolean | AddEventListenerOptions): void {\r\n        if (!this.scopes.has(scope)) {\r\n            this.scopes.set(scope, []);\r\n        }\r\n        this.scopes.get(scope).push([type, callback]);\r\n        this.addEventListener(type, callback as any, options);\r\n    }\r\n\r\n    removeScope<K extends keyof EventsT & string>(scope: object) {\r\n        const listeners = this.scopes.get(scope);\r\n        if (listeners) {\r\n            this.scopes.delete(scope);\r\n            for (const [type, listener] of listeners) {\r\n                this.removeEventListener(type as K, listener);\r\n            }\r\n        }\r\n    }\r\n\r\n    override dispatchEvent<T extends Event>(evt: T): boolean {\r\n        if (!super.dispatchEvent(evt)) {\r\n            return false;\r\n        }\r\n\r\n        for (const bubbler of this.bubblers) {\r\n            if (!bubbler.dispatchEvent(evt)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}", "import { alwaysTrue, isBoolean, isDefined, isFunction } from \"../\";\r\nimport { Predicate } from \"./Predicate\";\r\n\r\nexport class Task<ResultsT = void, ErrorT = unknown> implements Promise<ResultsT> {\r\n\r\n    private readonly promise: Promise<ResultsT>;\r\n\r\n    private _resolve: (value: ResultsT) => void = null;\r\n    private _reject: (reason: ErrorT) => void = null;\r\n    private _result: ResultsT = null;\r\n    private _error: ErrorT = null;\r\n    private _started = false;\r\n    private _finished = false;\r\n\r\n    get result(): ResultsT {\r\n        if (isDefined(this.error)) {\r\n            throw this.error;\r\n        }\r\n\r\n        return this._result;\r\n    }\r\n\r\n    get error(): ErrorT {\r\n        return this._error;\r\n    }\r\n\r\n    get started(): boolean {\r\n        return this._started;\r\n    }\r\n\r\n    get finished(): boolean {\r\n        return this._finished;\r\n    }\r\n\r\n    readonly resolve: (value: ResultsT) => void = null;\r\n    readonly reject: (reason: ErrorT) => void = null;\r\n\r\n    constructor(autoStart?: boolean);\r\n    constructor(resolveTest: Predicate<ResultsT>, autoStart?: boolean)\r\n    constructor(resolveTest: Predicate<ResultsT>, rejectTest: Predicate<ErrorT>, autoStart?: boolean);\r\n    constructor(resolveTestOrAutoStart?: boolean | Predicate<ResultsT>, rejectTestOrAutoStart?: boolean | Predicate<ErrorT>, autoStart = true) {\r\n        let resolveTest: Predicate<ResultsT> = alwaysTrue;\r\n        let rejectTest: Predicate<ErrorT> = alwaysTrue;\r\n\r\n        if (isFunction(resolveTestOrAutoStart)) {\r\n            resolveTest = resolveTestOrAutoStart;\r\n        }\r\n\r\n        if (isFunction(rejectTestOrAutoStart)) {\r\n            rejectTest = rejectTestOrAutoStart;\r\n        }\r\n\r\n        if (isBoolean(resolveTestOrAutoStart)) {\r\n            autoStart = resolveTestOrAutoStart;\r\n        }\r\n        else if (isBoolean(rejectTestOrAutoStart)) {\r\n            autoStart = rejectTestOrAutoStart;\r\n        }\r\n\r\n        this.resolve = (value: ResultsT): void => {\r\n            if (isDefined(this._resolve)) {\r\n                this._resolve(value);\r\n            }\r\n        };\r\n\r\n        this.reject = (reason: ErrorT): void => {\r\n            if (isDefined(this._reject)) {\r\n                this._reject(reason);\r\n            }\r\n        };\r\n\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this._resolve = (value: ResultsT) => {\r\n                if (resolveTest(value)) {\r\n                    this._result = value;\r\n                    this._finished = true;\r\n                    resolve(value);\r\n                }\r\n            };\r\n\r\n            this._reject = (reason: ErrorT) => {\r\n                if (rejectTest(reason)) {\r\n                    this._error = reason;\r\n                    this._finished = true;\r\n                    reject(reason);\r\n                }\r\n            };\r\n        });\r\n\r\n        if (autoStart) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    start() {\r\n        this._started = true;\r\n    }\r\n\r\n    get [Symbol.toStringTag](): string {\r\n        return this.promise.toString();\r\n    }\r\n\r\n    then<TResult1 = ResultsT, TResult2 = never>(onfulfilled?: (value: ResultsT) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\r\n        return this.promise.then(onfulfilled, onrejected);\r\n    }\r\n\r\n    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<ResultsT | TResult> {\r\n        return this.promise.catch(onrejected);\r\n    }\r\n\r\n    finally(onfinally?: () => void): Promise<ResultsT> {\r\n        return this.promise.finally(onfinally);\r\n    }\r\n}", "import { alwaysFalse, alwaysTrue, Exception, isNullOrUndefined, isNumber, isString } from \"../\";\r\nimport { EventBase, TypedEventBase } from \"./EventBase\";\r\nimport { Task } from \"./Task\";\r\n\r\nfunction targetValidateEvent(target: EventTarget, type: string) {\r\n    return (\"on\" + type) in target;\r\n}\r\n\r\n/**\r\n * Wait for a specific event, one time.\r\n * @param target - the event target.\r\n * @param resolveEvt - the name of the event that will resolve the Promise this method creates.\r\n * @param [rejectEvt] - the name of the event that could reject the Promise this method creates.\r\n * @param [timeout] - the number of milliseconds to wait for the resolveEvt, before rejecting.\r\n */\r\nexport function once<EventsT>(target: TypedEventBase<EventsT> | EventTarget, resolveEvt: keyof EventsT & string, timeout: number, ...rejectEvts: (keyof EventsT & string)[]): Task<EventsT[typeof resolveEvt], EventsT[keyof EventsT]>;\r\nexport function once<EventsT>(target: TypedEventBase<EventsT> | EventTarget, resolveEvt: keyof EventsT & string, ...rejectEvts: (keyof EventsT & string)[]): Task<EventsT[typeof resolveEvt], EventsT[keyof EventsT]>;\r\nexport function once<EventsT>(target: EventTarget, resolveEvt: keyof EventsT & string, rejectEvtOrTimeout?: number | (keyof EventsT & string), ...rejectEvts: (keyof EventsT & string)[]): Task<EventsT[typeof resolveEvt], EventsT[keyof EventsT]> {\r\n\r\n    if (isNullOrUndefined(rejectEvts)) {\r\n        rejectEvts = [];\r\n    }\r\n\r\n    let timeout: number = undefined;\r\n    if (isString(rejectEvtOrTimeout)) {\r\n        rejectEvts.unshift(rejectEvtOrTimeout);\r\n    }\r\n    else if (isNumber(rejectEvtOrTimeout)) {\r\n        timeout = rejectEvtOrTimeout;\r\n    }\r\n\r\n    if (!(target instanceof EventBase)) {\r\n        if (!targetValidateEvent(target, resolveEvt)) {\r\n            throw new Exception(`Target does not have a ${resolveEvt} rejection event`);\r\n        }\r\n\r\n        for (const evt of rejectEvts) {\r\n            if (!targetValidateEvent(target, evt)) {\r\n                throw new Exception(`Target does not have a ${evt} rejection event`);\r\n            }\r\n        }\r\n    }\r\n\r\n    const task = new Task<EventsT[typeof resolveEvt], EventsT[keyof EventsT]>();\r\n\r\n    if (isNumber(timeout)) {\r\n        const timeoutHandle = setTimeout(task.reject, timeout, `'${resolveEvt}' has timed out.`);\r\n        task.finally(clearTimeout.bind(globalThis, timeoutHandle));\r\n    }\r\n\r\n    const register = (evt: keyof EventsT & string, callback: (evt: Event) => void) => {\r\n        target.addEventListener(evt, callback);\r\n        task.finally(() => target.removeEventListener(evt, callback));\r\n    }\r\n\r\n    const onResolve = (evt: Event) => task.resolve(evt as any as EventsT[typeof resolveEvt]);\r\n    const onReject = (evt: Event) => task.reject(evt as any as EventsT[keyof EventsT]);\r\n    register(resolveEvt, onResolve);\r\n\r\n    for (const rejectEvt of rejectEvts) {\r\n        register(rejectEvt, onReject);\r\n    }\r\n\r\n    return task;\r\n}\r\n\r\nexport function success<T, E>(task: Task<T, E>): Promise<boolean> {\r\n    return task.then(alwaysTrue)\r\n        .catch(alwaysFalse);\r\n};", "export class Promisifier<T = void> implements Promise<T> {\r\n\r\n    private readonly promise: Promise<T>;\r\n\r\n    callback: (...args: any[]) => void = null;\r\n\r\n    constructor(\r\n        resolveRejectTest: (...args: any[]) => boolean,\r\n        selectValue: (...args: any[]) => T,\r\n        selectRejectionReason: (...args: any[]) => any) {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.callback = (...args: any[]) => {\r\n                if (resolveRejectTest(...args)) {\r\n                    resolve(selectValue(...args));\r\n                }\r\n                else {\r\n                    reject(selectRejectionReason(...args));\r\n                }\r\n            };\r\n        });\r\n\r\n    }\r\n\r\n    get [Symbol.toStringTag](): string {\r\n        return this.promise.toString();\r\n    }\r\n\r\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\r\n        return this.promise.then(onfulfilled, onrejected);\r\n    }\r\n\r\n    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<T | TResult> {\r\n        return this.promise.catch(onrejected);\r\n    }\r\n\r\n    finally(onfinally?: () => void): Promise<T> {\r\n        return this.promise.finally(onfinally);\r\n    }\r\n}", "export class Exception extends Error {\r\n    constructor(message: string, public readonly innerError: any = null) {\r\n        super(message);\r\n    }\r\n}", "\r\nexport function isChrome() {\r\n    return \"chrome\" in globalThis && !navigator.userAgent.match(\"CriOS\");\r\n}\r\n\r\nexport function isFirefox() {\r\n    return \"InstallTrigger\" in globalThis;\r\n}\r\n\r\nexport function isSafari() {\r\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n}\r\n\r\nexport function isMacOS() {\r\n    return /^mac/i.test(navigator.platform);\r\n}\r\n\r\nexport function isIOS() {\r\n    return /iP(ad|hone|od)/.test(navigator.platform)\r\n        || /Macintosh(.*?) FxiOS(.*?)\\//.test(navigator.platform)\r\n        || isMacOS()\r\n            && \"maxTouchPoints\" in navigator\r\n            && (navigator as any).maxTouchPoints > 2;\r\n}\r\n\r\nexport function isApple() {\r\n    return isIOS()\r\n        || isMacOS();\r\n}\r\n\r\nexport function isMobileVR() {\r\n    return /Mobile VR/.test(navigator.userAgent)\r\n        || isOculusBrowser;\r\n}\r\n\r\nexport function hasWebXR() {\r\n    return \"xr\" in navigator\r\n        && \"isSessionSupported\" in (navigator as any).xr;\r\n}\r\n\r\nexport function hasWebVR() {\r\n    return \"getVRDisplays\" in navigator;\r\n}\r\n\r\nexport function hasVR() {\r\n    return hasWebXR() || hasWebVR();\r\n}\r\n\r\nexport function isMobile() {\r\n    return /Android/.test(navigator.userAgent)\r\n        || /BlackBerry/.test(navigator.userAgent)\r\n        || /(UC Browser |UCWEB)/.test(navigator.userAgent)\r\n        || isIOS()\r\n        || isMobileVR();\r\n}\r\n\r\nexport function isDesktop() {\r\n    return !isMobile();\r\n}\r\n\r\nconst oculusBrowserPattern = /OculusBrowser\\/(\\d+)\\.(\\d+)\\.(\\d+)/i;\r\nconst oculusMatch = navigator.userAgent.match(oculusBrowserPattern);\r\nexport const isOculusBrowser = !!oculusMatch;\r\nexport const oculusBrowserVersion: { major: number, minor: number, patch: number } = isOculusBrowser && {\r\n    major: parseFloat(oculusMatch[1]),\r\n    minor: parseFloat(oculusMatch[2]),\r\n    patch: parseFloat(oculusMatch[3])\r\n};\r\n\r\nexport const isOculusGo = isOculusBrowser && /pacific/i.test(navigator.userAgent);\r\nexport const isOculusQuest = isOculusBrowser && /quest/i.test(navigator.userAgent);\r\nexport const isOculusQuest2 = isOculusBrowser && /quest 2/i.test(navigator.userAgent);\r\nexport const isOculusQuest1 = isOculusBrowser && !isOculusQuest2;\r\n\r\nexport const isWorker = !(\"Document\" in globalThis);", "const FalseNorthing: number = 10000000;\r\nconst invF: number = 298.257223563;\r\nconst equatorialRadius: number = 6378137;\r\nconst pointScaleFactor: number = 0.9996;\r\nconst E0: number = 500000;\r\n\r\nconst flattening: number = 1 / invF;\r\nconst flatteningComp: number = 1 - flattening;\r\nconst n: number = flattening / (2 - flattening);\r\nconst A: number = (equatorialRadius / (1 + n)) * (1 + (n * n / 4) + (n * n * n * n / 64));\r\n\r\nconst e: number = Math.sqrt(1 - (flatteningComp * flatteningComp));\r\nconst esq: number = 1 - (flatteningComp * flatteningComp);\r\nconst e0sq: number = e * e / (1 - (e * e));\r\n\r\nconst alpha1: number = 1 - (esq * (0.25 + (esq * ((3 / 64) + (5 * esq / 256)))));\r\nconst alpha2: number = esq * ((3 / 8) + (esq * ((3 / 32) + (45 * esq / 1024))));\r\nconst alpha3: number = esq * esq * ((15 / 256) + (esq * 45 / 1024));\r\nconst alpha4: number = esq * esq * esq * (35 / 3072);\r\n\r\nconst beta: number[] = [\r\n    (n / 2) - (2 * n * n / 3) + (37 * n * n * n / 96),\r\n    (n * n / 48) + (n * n * n / 15),\r\n    17 * n * n * n / 480\r\n];\r\n\r\nconst delta: number[] = [\r\n    (2 * n) - (2 * n * n / 3),\r\n    (7 * n * n / 3) - (8 * n * n * n / 5),\r\n    56 * n * n * n / 15\r\n];\r\n\r\nexport const DatumWGS_84 = {\r\n    FalseNorthing,\r\n    equatorialRadius,\r\n    pointScaleFactor,\r\n    E0,\r\n\r\n    A,\r\n    flattening,\r\n    \r\n    e,\r\n    esq,\r\n    e0sq,\r\n\r\n    alpha1,\r\n    alpha2,\r\n    alpha3,\r\n    alpha4,\r\n\r\n    beta,\r\n    delta\r\n};", "export function identity<T>(item: T): T {\r\n    return item;\r\n}\r\n\r\nexport function nothing(): void {\r\n}\r\n\r\nexport function negate(value: number) {\r\n    return -value;\r\n}\r\n\r\nexport function alwaysTrue(): true {\r\n    return true;\r\n}\r\n\r\nexport function alwaysFalse(): false {\r\n    return false;\r\n}\r\n\r\nexport function not(value: boolean) {\r\n    return !value;\r\n}\r\n\r\nexport function and(a: boolean, b: boolean): boolean {\r\n    return a && b;\r\n}\r\n\r\nexport function or(a: boolean, b: boolean): boolean {\r\n    return a || b;\r\n}\r\n\r\nexport function xor(a: boolean, b: boolean): boolean {\r\n    return a !== b;\r\n}\r\n\r\nexport function nand(a: boolean, b: boolean): boolean {\r\n    return not(and(a, b));\r\n}\r\n\r\nexport function nor(a: boolean, b: boolean): boolean {\r\n    return not(or(a, b));\r\n}\r\n\r\nexport function equal<T>(a: T, b: T): boolean {\r\n    return a === b;\r\n}\r\n\r\nexport type AsyncCallback = () => Promise<void>;", "const Tau = 2 * Math.PI;\r\n\r\nexport function angleClamp(v: number) {\r\n    return ((v % Tau) + Tau) % Tau;\r\n}\r\n", "/**\r\n * Pick a value that is proportionally between two values.\r\n */\r\nexport function lerp(a: number, b: number, p: number) {\r\n    return (1 - p) * a + p * b;\r\n}\r\n", "function t(o: any, s: string, c: Function) {\r\n    return typeof o === s\r\n        || o instanceof c;\r\n}\r\n\r\nexport function isFunction(obj: any): obj is Function {\r\n    return t(obj, \"function\", Function);\r\n}\r\n\r\nexport function isString(obj: any): obj is string {\r\n    return t(obj, \"string\", String);\r\n}\r\n\r\nexport function isBoolean(obj: any): obj is boolean {\r\n    return t(obj, \"boolean\", Boolean);\r\n}\r\n\r\nexport function isNumber(obj: any): obj is number {\r\n    return t(obj, \"number\", Number);\r\n}\r\n\r\n/**\r\n * Check a value to see if it is of a number type\r\n * and is not the special NaN value.\r\n */\r\nexport function isGoodNumber(obj: any): obj is number {\r\n    return isNumber(obj)\r\n        && !Number.isNaN(obj);\r\n}\r\n\r\nexport function isObject(obj: any): obj is object {\r\n    return isDefined(obj)\r\n        && t(obj, \"object\", Object);\r\n}\r\n\r\nexport function isPromise<T>(obj: any): obj is Promise<T> {\r\n    return obj instanceof Promise;\r\n}\r\n\r\nexport function isDate(obj: any): obj is Date {\r\n    return obj instanceof Date;\r\n}\r\n\r\nexport function isArray(obj: any): obj is Array<any> {\r\n    return obj instanceof Array;\r\n}\r\n\r\nexport function assertNever(x: never, msg?: string): never {\r\n    throw new Error((msg || \"Unexpected object: \") + x);\r\n}\r\n\r\nexport function isNullOrUndefined<T>(obj: T | null | undefined): obj is null | undefined {\r\n    return obj === null\r\n        || obj === undefined;\r\n}\r\n\r\nexport function isDefined<T>(obj: T | null | undefined): obj is T {\r\n    return !isNullOrUndefined(obj);\r\n}\r\n\r\nexport function isEventListener(obj: EventListenerOrEventListenerObject): obj is EventListener {\r\n    return isFunction(obj);\r\n}\r\n\r\nexport function isEventListenerObject(obj: EventListenerOrEventListenerObject): obj is EventListenerObject {\r\n    return !isEventListener(obj);\r\n}\r\n\r\nexport function isArrayBufferView(obj: any): obj is ArrayBufferView {\r\n    return obj instanceof Uint8Array\r\n        || obj instanceof Uint8ClampedArray\r\n        || obj instanceof Int8Array\r\n        || obj instanceof Uint16Array\r\n        || obj instanceof Int16Array\r\n        || obj instanceof Uint32Array\r\n        || obj instanceof Int32Array\r\n        || obj instanceof Float32Array\r\n        || obj instanceof Float64Array\r\n        || \"BigUint64Array\" in globalThis && obj instanceof globalThis[\"BigUint64Array\"]\r\n        || \"BigInt64Array\" in globalThis && obj instanceof globalThis[\"BigInt64Array\"];\r\n}\r\n\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}", "import { lerp } from \"../\";\r\n\r\nexport abstract class BaseTimerTickEvent {\r\n    t = 0;\r\n    dt = 0;\r\n    sdt = 0;\r\n    fps: number = 0;\r\n\r\n    set(t: number, dt: number) {\r\n        this.t = t;\r\n        this.dt = dt;\r\n        this.sdt = lerp(this.sdt, dt, 0.01);\r\n        if (dt > 0) {\r\n            this.fps = 1000 / dt;\r\n        }\r\n    }\r\n}\r\n\r\nexport class TimerTickEvent extends BaseTimerTickEvent {\r\n    constructor() {\r\n        super();\r\n        Object.seal(this);\r\n    }\r\n}\r\n\r\nexport interface ITimer {\r\n    isRunning: boolean;\r\n    start(): void;\r\n    stop(): void;\r\n    restart(): void;\r\n    addTickHandler(onTick: (evt: TimerTickEvent) => void): void;\r\n    removeTickHandler(onTick: (evt: TimerTickEvent) => void): void;\r\n}\r\n", "import { arrayRemove } from \"../\";\r\nimport { ITimer, TimerTickEvent } from \"./ITimer\";\r\n\r\nexport abstract class BaseTimer<TimerT>\r\n    implements ITimer {\r\n    protected timer: TimerT = null;\r\n    protected onTick: (t: number) => void;\r\n    private lt: number = -1;\r\n    private tickHandlers = new Array<(evt: TimerTickEvent) => void>();\r\n\r\n    constructor(targetFrameRate?: number) {\r\n        this.targetFPS = targetFrameRate;\r\n        const tickEvt = new TimerTickEvent();\r\n        let dt = 0;\r\n        this.onTick = (t: number) => {\r\n            if (this.lt >= 0) {\r\n                dt = t - this.lt;\r\n                tickEvt.set(t, dt);\r\n                this.tick(tickEvt);\r\n            }\r\n            this.lt = t;\r\n        };\r\n    }\r\n\r\n\r\n    #targetFPS: number = null;\r\n    get targetFPS() {\r\n        return this.#targetFPS;\r\n    }\r\n\r\n    set targetFPS(v: number) {\r\n        this.#targetFPS = v;\r\n    }\r\n\r\n    addTickHandler(onTick: (evt: TimerTickEvent) => void): void {\r\n        this.tickHandlers.push(onTick);\r\n    }\r\n\r\n    removeTickHandler(onTick: (evt: TimerTickEvent) => void): void {\r\n        arrayRemove(this.tickHandlers, onTick);\r\n    }\r\n\r\n    private tick(evt: TimerTickEvent): void {\r\n        for (const handler of this.tickHandlers) {\r\n            handler(evt);\r\n        }\r\n    }\r\n\r\n    restart() {\r\n        this.stop();\r\n        this.start();\r\n    }\r\n\r\n    get isRunning() {\r\n        return this.timer != null;\r\n    }\r\n\r\n    abstract start(): void;\r\n\r\n    stop() {\r\n        this.timer = null;\r\n        this.lt = -1;\r\n    }\r\n\r\n    protected get targetFrameTime() {\r\n        return 1000 / this.targetFPS;\r\n    }\r\n}", "import { isDefined } from \"./typeChecks\";\r\n\r\ntype ProtocolType = `${string}:`;\r\n\r\nfunction parsePort(portString: string): number {\r\n    if (isDefined(portString) && portString.length > 0) {\r\n        return parseFloat(portString);\r\n    }\r\n    return null;\r\n}\r\n\r\nexport class URLBuilder {\r\n    private _url: URL = null;\r\n    private _base: string | URL = undefined;\r\n    private _protocol: string = null\r\n    private _host: string = null;\r\n    private _hostName: string = null;\r\n    private _userName: string = null;\r\n    private _password: string = null;\r\n    private _port: number = null;\r\n    private _pathName: string = null;\r\n    private _hash: string = null;\r\n    private readonly _query = new Map<string, string>();\r\n\r\n    constructor(url?: string | URL, base?: string | URL) {\r\n        if (url !== undefined) {\r\n            this._url = new URL(url, base);\r\n            this.rehydrate();\r\n        }\r\n    }\r\n\r\n    private rehydrate(): void {\r\n        if (isDefined(this._protocol) && this._protocol !== this._url.protocol) {\r\n            this._url.protocol = this._protocol;\r\n        }\r\n\r\n        if (isDefined(this._host) && this._host !== this._url.host) {\r\n            this._url.host = this._host;\r\n        }\r\n\r\n        if (isDefined(this._hostName) && this._hostName !== this._url.hostname) {\r\n            this._url.hostname = this._hostName;\r\n        }\r\n\r\n        if (isDefined(this._userName) && this._userName !== this._url.username) {\r\n            this._url.username = this._userName;\r\n        }\r\n\r\n        if (isDefined(this._password) && this._password !== this._url.password) {\r\n            this._url.password = this._password;\r\n        }\r\n\r\n        if (isDefined(this._port) && this._port.toFixed(0) !== this._url.port) {\r\n            this._url.port = this._port.toFixed(0);\r\n        }\r\n\r\n        if (isDefined(this._pathName) && this._pathName !== this._url.pathname) {\r\n            this._url.pathname = this._pathName;\r\n        }\r\n\r\n        if (isDefined(this._hash) && this._hash !== this._url.hash) {\r\n            this._url.hash = this._hash;\r\n        }\r\n\r\n        for (const [k, v] of this._query) {\r\n            this._url.searchParams.set(k, v);\r\n        }\r\n\r\n        this._protocol = this._url.protocol;\r\n        this._host = this._url.host;\r\n        this._hostName = this._url.hostname;\r\n        this._userName = this._url.username;\r\n        this._password = this._url.password;\r\n        this._port = parsePort(this._url.port);\r\n        this._pathName = this._url.pathname;\r\n        this._hash = this._url.hash;\r\n        this._url.searchParams.forEach((v, k) =>\r\n            this._query.set(k, v));\r\n    }\r\n\r\n    private refresh(): boolean {\r\n        if (this._url === null) {\r\n            if (isDefined(this._protocol)\r\n                && (isDefined(this._host) || isDefined(this._hostName))) {\r\n                if (isDefined(this._host)) {\r\n                    this._url = new URL(`${this._protocol}//${this._host}`, this._base);\r\n                    this._port = parsePort(this._url.port);\r\n                    this.rehydrate();\r\n                    return false;\r\n                }\r\n                else if (isDefined(this._hostName)) {\r\n                    this._url = new URL(`${this._protocol}//${this._hostName}`, this._base);\r\n                    this.rehydrate();\r\n                    return false;\r\n                }\r\n            }\r\n            else if (isDefined(this._pathName) && isDefined(this._base)) {\r\n                this._url = new URL(this._pathName, this._base);\r\n                this.rehydrate();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return isDefined(this._url);\r\n    }\r\n\r\n    base(base: string | URL) {\r\n        if (this._url !== null) {\r\n            throw new Error(\"Cannot redefine base after defining the protocol and domain\")\r\n        }\r\n\r\n        this._base = base;\r\n        this.refresh();\r\n        return this;\r\n    }\r\n\r\n    protocol(protocol: ProtocolType) {\r\n        this._protocol = protocol;\r\n        if (this.refresh()) {\r\n            this._url.protocol = protocol;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    host(host: string) {\r\n        this._host = host;\r\n        if (this.refresh()) {\r\n            this._url.host = host;\r\n            this._hostName = this._url.hostname;\r\n            this._port = parsePort(this._url.port);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    hostName(hostName: string) {\r\n        this._hostName = hostName;\r\n        if (this.refresh()) {\r\n            this._url.hostname = hostName;\r\n            this._host = `${this._url.hostname}:${this._url.port}`;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    port(port: number) {\r\n        this._port = port;\r\n        if (this.refresh()) {\r\n            this._url.port = port.toFixed(0);\r\n            this._host = `${this._url.hostname}:${this._url.port}`;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    userName(userName: string) {\r\n        this._userName = userName;\r\n        if (this.refresh()) {\r\n            this._url.username = userName;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    password(password: string) {\r\n        this._password = password;\r\n        if (this.refresh()) {\r\n            this._url.password = password;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    path(path: string) {\r\n        this._pathName = path;\r\n        if (this.refresh()) {\r\n            this._url.pathname = path;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    pathPop(pattern?: RegExp) {\r\n        pattern = pattern || /\\/[^\\/]+\\/?$/;\r\n        return this.path(this._pathName.replace(pattern, \"\"));\r\n    }\r\n\r\n    pathPush(part: string) {\r\n        let path = this._pathName;\r\n        if (!path.endsWith('/')) {\r\n            path += '/';\r\n        }\r\n\r\n        path += part;\r\n\r\n        return this.path(path);\r\n    }\r\n\r\n    query(name: string, value: string) {\r\n        this._query.set(name, value);\r\n        if (this.refresh()) {\r\n            this._url.searchParams.set(name, value);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    hash(hash: string) {\r\n        this._hash = hash;\r\n        if (this.refresh()) {\r\n            this._url.hash = hash;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    toURL() {\r\n        return this._url;\r\n    }\r\n\r\n    toString() {\r\n        return this._url.href;\r\n    }\r\n\r\n    [Symbol.toStringTag]() {\r\n        return this.toString();\r\n    }\r\n}", "export function mapInvert<T, U>(map: Map<T, U>): Map<U, T> {\r\n    const mapOut = new Map<U, T>();\r\n    for (const [key, value] of map) {\r\n        mapOut.set(value, key);\r\n    }\r\n    return mapOut;\r\n}\r\n\r\n", "import { mapInvert } from \"../collections/mapInvert\";\r\nimport { assertNever } from \"../typeChecks\";\r\n\r\ntype Base = 2 | 10;\r\n\r\ntype Base2Units = \"KiB\"\r\n    | \"MiB\"\r\n    | \"GiB\"\r\n    | \"TiB\";\r\n\r\ntype Base10Units = \"KB\"\r\n    | \"MB\"\r\n    | \"GB\"\r\n    | \"TB\";\r\n\r\ntype Units = \"B\"\r\n    | Base2Units\r\n    | Base10Units;\r\n\r\nfunction isBase2Units(label: Units): label is Base2Units {\r\n    return label !== \"B\"\r\n        && label[1] === 'i';\r\n}\r\n\r\nfunction isBase10Units(label: Units): label is Base10Units {\r\n    return label !== \"B\"\r\n        && !isBase10Units(label);\r\n}\r\n\r\nconst base2Labels = new Map<number, Base2Units>([\r\n    [1, \"KiB\"],\r\n    [2, \"MiB\"],\r\n    [3, \"GiB\"],\r\n    [4, \"TiB\"]\r\n]);\r\n\r\nconst base10Labels = new Map<number, Base10Units>([\r\n    [1, \"KB\"],\r\n    [2, \"MB\"],\r\n    [3, \"GB\"],\r\n    [4, \"TB\"]\r\n]);\r\n\r\nconst base2Sizes = mapInvert(base2Labels);\r\nconst base10Sizes = mapInvert(base10Labels);\r\n\r\nconst labels = new Map<Base, Map<number, Units>>([\r\n    [2, base2Labels],\r\n    [10, base10Labels]\r\n]);\r\n\r\nexport function formatBytes(value: number, base: 2 | 10 = 10) {\r\n    const isNegative = value < 0;\r\n    value = Math.abs(value);\r\n\r\n    const systemBase = base === 2 ? 1024 : 1000;\r\n    let size = Math.min(4, Math.floor(Math.log(value) / Math.log(systemBase)));\r\n    let divisor = Math.pow(systemBase, size);\r\n    if (2 * value >= systemBase * divisor && size < 4) {\r\n        size++;\r\n        divisor *= systemBase;\r\n    }\r\n\r\n    let label: string;\r\n    if (size === 0) {\r\n        label = \"B\";\r\n    }\r\n    else {\r\n        const levels = labels.get(base);\r\n        label = levels.get(size);\r\n        value /= divisor;\r\n    }\r\n\r\n    const isExact = (value % 1) === 0;\r\n    const str = `${isNegative ? \"-\" : \"\"}${value.toFixed(isExact ? 0 : 2)} ${label}`;\r\n\r\n    return str;\r\n}\r\n\r\nexport function toBytes(value: number, units: Units): number {\r\n    if (units === \"B\") {\r\n        return value;\r\n    }\r\n    else {\r\n        let systemBase: number;\r\n        let size: number;\r\n        if (isBase2Units(units)) {\r\n            systemBase = 1024;\r\n            size = base2Sizes.get(units);\r\n        }\r\n        else if (isBase10Units(units)) {\r\n            systemBase = 1000;\r\n            size = base10Sizes.get(units);\r\n        }\r\n        else {\r\n            assertNever(units);\r\n        }\r\n\r\n        const multiplier = Math.pow(systemBase, size);\r\n        return value * multiplier;\r\n    }\r\n}", "const MICROMETERS_PER_MILLIMETER = 1000;\r\nconst MILLIMETERS_PER_CENTIMETER = 10;\r\nconst CENTIMETERS_PER_INCH = 2.54;\r\nconst CENTIMETERS_PER_METER = 100;\r\nconst INCHES_PER_HAND = 4;\r\nconst HANDS_PER_FOOT = 3;\r\nconst FEET_PER_YARD = 3;\r\nconst FEET_PER_ROD = 16.5;\r\nconst METERS_PER_KILOMETER = 1000;\r\nconst RODS_PER_FURLONG = 40;\r\nconst FURLONGS_PER_MILE = 8;\r\n\r\nconst MICROMETERS_PER_CENTIMETER = MICROMETERS_PER_MILLIMETER * MILLIMETERS_PER_CENTIMETER;\r\nconst MICROMETERS_PER_INCH = MICROMETERS_PER_CENTIMETER * CENTIMETERS_PER_INCH;\r\nconst MICROMETERS_PER_HAND = MICROMETERS_PER_INCH * INCHES_PER_HAND;\r\nconst MICROMETERS_PER_FOOT = MICROMETERS_PER_HAND * HANDS_PER_FOOT;\r\nconst MICROMETERS_PER_YARD = MICROMETERS_PER_FOOT * FEET_PER_YARD;\r\nconst MICROMETERS_PER_METER = MICROMETERS_PER_CENTIMETER * CENTIMETERS_PER_METER;\r\nconst MICROMETERS_PER_ROD = MICROMETERS_PER_FOOT * FEET_PER_ROD;\r\nconst MICROMETERS_PER_FURLONG = MICROMETERS_PER_ROD * RODS_PER_FURLONG;\r\nconst MICROMETERS_PER_KILOMETER = MICROMETERS_PER_METER * METERS_PER_KILOMETER;\r\nconst MICROMETERS_PER_MILE = MICROMETERS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst MILLIMETERS_PER_INCH = MILLIMETERS_PER_CENTIMETER * CENTIMETERS_PER_INCH;\r\nconst MILLIMETERS_PER_HAND = MILLIMETERS_PER_INCH * INCHES_PER_HAND;\r\nconst MILLIMETERS_PER_FOOT = MILLIMETERS_PER_HAND * HANDS_PER_FOOT;\r\nconst MILLIMETERS_PER_YARD = MILLIMETERS_PER_FOOT * FEET_PER_YARD;\r\nconst MILLIMETERS_PER_METER = MILLIMETERS_PER_CENTIMETER * CENTIMETERS_PER_METER;\r\nconst MILLIMETERS_PER_ROD = MILLIMETERS_PER_FOOT * FEET_PER_ROD;\r\nconst MILLIMETERS_PER_FURLONG = MILLIMETERS_PER_ROD * RODS_PER_FURLONG;\r\nconst MILLIMETERS_PER_KILOMETER = MILLIMETERS_PER_METER * METERS_PER_KILOMETER;\r\nconst MILLIMETERS_PER_MILE = MILLIMETERS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst CENTIMETERS_PER_HAND = CENTIMETERS_PER_INCH * INCHES_PER_HAND;\r\nconst CENTIMETERS_PER_FOOT = CENTIMETERS_PER_HAND * HANDS_PER_FOOT;\r\nconst CENTIMETERS_PER_YARD = CENTIMETERS_PER_FOOT * FEET_PER_YARD;\r\nconst CENTIMETERS_PER_ROD = CENTIMETERS_PER_FOOT * FEET_PER_ROD;\r\nconst CENTIMETERS_PER_FURLONG = CENTIMETERS_PER_ROD * RODS_PER_FURLONG;\r\nconst CENTIMETERS_PER_KILOMETER = CENTIMETERS_PER_METER * METERS_PER_KILOMETER;\r\nconst CENTIMETERS_PER_MILE = CENTIMETERS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst INCHES_PER_FOOT = INCHES_PER_HAND * HANDS_PER_FOOT;\r\nconst INCHES_PER_YARD = INCHES_PER_FOOT * FEET_PER_YARD;\r\nconst INCHES_PER_METER = CENTIMETERS_PER_METER / CENTIMETERS_PER_INCH;\r\nconst INCHES_PER_ROD = INCHES_PER_FOOT * FEET_PER_ROD;\r\nconst INCHES_PER_FURLONG = INCHES_PER_ROD * RODS_PER_FURLONG;\r\nconst INCHES_PER_KILOMETER = INCHES_PER_METER * METERS_PER_KILOMETER;\r\nconst INCHES_PER_MILE = INCHES_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst HANDS_PER_YARD = HANDS_PER_FOOT * FEET_PER_YARD;\r\nconst HANDS_PER_METER = CENTIMETERS_PER_METER / CENTIMETERS_PER_HAND;\r\nconst HANDS_PER_ROD = HANDS_PER_FOOT * FEET_PER_ROD;\r\nconst HANDS_PER_FURLONG = HANDS_PER_ROD * RODS_PER_FURLONG;\r\nconst HANDS_PER_KILOMETER = HANDS_PER_METER * METERS_PER_KILOMETER;\r\nconst HANDS_PER_MILE = HANDS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst FEET_PER_METER = INCHES_PER_METER / INCHES_PER_FOOT;\r\nconst FEET_PER_FURLONG = FEET_PER_ROD * RODS_PER_FURLONG;\r\nconst FEET_PER_KILOMETER = FEET_PER_METER * METERS_PER_KILOMETER;\r\nconst FEET_PER_MILE = FEET_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst YARDS_PER_METER = INCHES_PER_METER / INCHES_PER_YARD;\r\nconst YARDS_PER_ROD = FEET_PER_ROD / FEET_PER_YARD;\r\nconst YARDS_PER_FURLONG = YARDS_PER_ROD * RODS_PER_FURLONG;\r\nconst YARDS_PER_KILOMETER = YARDS_PER_METER * METERS_PER_KILOMETER;\r\nconst YARDS_PER_MILE = YARDS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst METERS_PER_ROD = FEET_PER_ROD / FEET_PER_METER;\r\nconst METERS_PER_FURLONG = METERS_PER_ROD * RODS_PER_FURLONG;\r\nconst METERS_PER_MILE = METERS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst RODS_PER_KILOMETER = METERS_PER_KILOMETER / METERS_PER_ROD;\r\nconst RODS_PER_MILE = RODS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst FURLONGS_PER_KILOMETER = METERS_PER_KILOMETER /METERS_PER_FURLONG;\r\n\r\nconst KILOMETERS_PER_MILE = FURLONGS_PER_MILE / FURLONGS_PER_KILOMETER;\r\n\r\n\r\nexport function centimeters2Micrometers(centimeters: number): number {\r\n    return centimeters * MICROMETERS_PER_CENTIMETER;\r\n}\r\n\r\nexport function centimeters2Millimeters(centimeters: number): number {\r\n    return centimeters * MILLIMETERS_PER_CENTIMETER;\r\n}\r\n\r\nexport function centimeters2Inches(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_INCH;\r\n}\r\n\r\nexport function centimeters2Hands(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_HAND;\r\n}\r\n\r\nexport function centimeters2Feet(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_FOOT;\r\n}\r\n\r\nexport function centimeters2Yards(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_YARD;\r\n}\r\n\r\nexport function centimeters2Meters(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_METER;\r\n}\r\n\r\nexport function centimeters2Rods(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_ROD;\r\n}\r\n\r\nexport function centimeters2Furlongs(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function centimeters2Kilometers(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function centimeters2Miles(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_MILE;\r\n}\r\n\r\nexport function feet2Micrometers(feet: number): number {\r\n    return feet * MICROMETERS_PER_FOOT;\r\n}\r\n\r\nexport function feet2Millimeters(feet: number): number {\r\n    return feet * MILLIMETERS_PER_FOOT;\r\n}\r\n\r\nexport function feet2Centimeters(feet: number): number {\r\n    return feet * CENTIMETERS_PER_FOOT;\r\n}\r\n\r\nexport function feet2Inches(feet: number): number {\r\n    return feet * INCHES_PER_FOOT;\r\n}\r\n\r\nexport function feet2Hands(feet: number): number {\r\n    return feet * HANDS_PER_FOOT;\r\n}\r\n\r\nexport function feet2Yards(feet: number): number {\r\n    return feet / FEET_PER_YARD;\r\n}\r\n\r\nexport function feet2Meters(feet: number): number {\r\n    return feet / FEET_PER_METER;\r\n}\r\n\r\nexport function feet2Rods(feet: number): number {\r\n    return feet / FEET_PER_ROD;\r\n}\r\n\r\nexport function feet2Furlongs(feet: number): number {\r\n    return feet / FEET_PER_FURLONG;\r\n}\r\n\r\nexport function feet2Kilometers(feet: number): number {\r\n    return feet / FEET_PER_KILOMETER;\r\n}\r\n\r\nexport function feet2Miles(feet: number): number {\r\n    return feet / FEET_PER_MILE;\r\n}\r\n\r\nexport function furlongs2Micrometers(furlongs: number): number {\r\n    return furlongs * MICROMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Millimeters(furlongs: number): number {\r\n    return furlongs * MILLIMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Centimeters(furlongs: number): number {\r\n    return furlongs * CENTIMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Inches(furlongs: number): number {\r\n    return furlongs * INCHES_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Hands(furlongs: number): number {\r\n    return furlongs * HANDS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Feet(furlongs: number): number {\r\n    return furlongs * FEET_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Yards(furlongs: number): number {\r\n    return furlongs * YARDS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Meters(furlongs: number): number {\r\n    return furlongs * METERS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Rods(furlongs: number): number {\r\n    return furlongs * RODS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Kilometers(furlongs: number): number {\r\n    return furlongs / FURLONGS_PER_KILOMETER;\r\n}\r\n\r\nexport function furlongs2Miles(furlongs: number): number {\r\n    return furlongs / FURLONGS_PER_MILE;\r\n}\r\n\r\nexport function hands2Micrometers(hands: number): number {\r\n    return hands * MICROMETERS_PER_HAND;\r\n}\r\n\r\nexport function hands2Millimeters(hands: number): number {\r\n    return hands * MILLIMETERS_PER_HAND;\r\n}\r\n\r\nexport function hands2Centimeters(hands: number): number {\r\n    return hands * CENTIMETERS_PER_HAND;\r\n}\r\n\r\nexport function hands2Inches(hands: number): number {\r\n    return hands * INCHES_PER_HAND;\r\n}\r\n\r\nexport function hands2Feet(hands: number): number {\r\n    return hands / HANDS_PER_FOOT;\r\n}\r\n\r\nexport function hands2Yards(hands: number): number {\r\n    return hands / HANDS_PER_YARD;\r\n}\r\n\r\nexport function hands2Meters(hands: number): number {\r\n    return hands / HANDS_PER_METER;\r\n}\r\n\r\nexport function hands2Rods(hands: number): number {\r\n    return hands / HANDS_PER_ROD;\r\n}\r\n\r\nexport function hands2Furlongs(hands: number): number {\r\n    return hands / HANDS_PER_FURLONG;\r\n}\r\n\r\nexport function hands2Kilometers(hands: number): number {\r\n    return hands / HANDS_PER_KILOMETER;\r\n}\r\n\r\nexport function hands2Miles(hands: number): number {\r\n    return hands / HANDS_PER_MILE;\r\n}\r\n\r\nexport function inches2Micrometers(inches: number): number {\r\n    return inches * MICROMETERS_PER_INCH;\r\n}\r\n\r\nexport function inches2Millimeters(inches: number): number {\r\n    return inches * MILLIMETERS_PER_INCH;\r\n}\r\n\r\nexport function inches2Centimeters(inches: number): number {\r\n    return inches * CENTIMETERS_PER_INCH;\r\n}\r\n\r\nexport function inches2Hands(inches: number): number {\r\n    return inches / INCHES_PER_HAND;\r\n}\r\n\r\nexport function inches2Feet(inches: number): number {\r\n    return inches / INCHES_PER_FOOT;\r\n}\r\n\r\nexport function inches2Yards(inches: number): number {\r\n    return inches / INCHES_PER_YARD;\r\n}\r\n\r\nexport function inches2Meters(inches: number): number {\r\n    return inches / INCHES_PER_METER;\r\n}\r\n\r\nexport function inches2Rods(inches: number): number {\r\n    return inches / INCHES_PER_ROD;\r\n}\r\n\r\nexport function inches2Furlongs(inches: number): number {\r\n    return inches / INCHES_PER_FURLONG;\r\n}\r\n\r\nexport function inches2Kilometers(inches: number): number {\r\n    return inches / INCHES_PER_KILOMETER;\r\n}\r\n\r\nexport function inches2Miles(inches: number): number {\r\n    return inches / INCHES_PER_MILE;\r\n}\r\n\r\nexport function kilometers2Micrometers(kilometers: number): number {\r\n    return kilometers * MICROMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Millimeters(kilometers: number): number {\r\n    return kilometers * MILLIMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Centimeters(kilometers: number): number {\r\n    return kilometers * CENTIMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Inches(kilometers: number): number {\r\n    return kilometers * INCHES_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Hands(kilometers: number): number {\r\n    return kilometers * HANDS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Feet(kilometers: number): number {\r\n    return kilometers * FEET_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Yards(kilometers: number): number {\r\n    return kilometers * YARDS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Meters(kilometers: number): number {\r\n    return kilometers * METERS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Rods(kilometers: number): number {\r\n    return kilometers * RODS_PER_KILOMETER;\r\n}\r\nexport function kilometers2Furlongs(kilometers: number): number {\r\n    return kilometers * FURLONGS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Miles(kilometers: number): number {\r\n    return kilometers / KILOMETERS_PER_MILE;\r\n}\r\n\r\nexport function meters2Micrometers(meters: number): number {\r\n    return meters * MICROMETERS_PER_METER;\r\n}\r\n\r\nexport function meters2Millimeters(meters: number): number {\r\n    return meters * MILLIMETERS_PER_METER;\r\n}\r\n\r\nexport function meters2Centimeters(meters: number): number {\r\n    return meters * CENTIMETERS_PER_METER;\r\n}\r\n\r\nexport function meters2Inches(meters: number): number {\r\n    return meters * INCHES_PER_METER;\r\n}\r\n\r\nexport function meters2Hands(meters: number): number {\r\n    return meters * HANDS_PER_METER;\r\n}\r\n\r\nexport function meters2Feet(meters: number): number {\r\n    return meters * FEET_PER_METER;\r\n}\r\n\r\nexport function meters2Yards(meters: number): number {\r\n    return meters * YARDS_PER_METER;\r\n}\r\n\r\nexport function meters2Rods(meters: number): number {\r\n    return meters / METERS_PER_ROD;\r\n}\r\n\r\nexport function meters2Furlongs(meters: number): number {\r\n    return meters / METERS_PER_FURLONG;\r\n}\r\n\r\nexport function meters2Kilometers(meters: number): number {\r\n    return meters / METERS_PER_KILOMETER;\r\n}\r\n\r\nexport function meters2Miles(meters: number): number {\r\n    return meters / METERS_PER_MILE;\r\n}\r\n\r\nexport function micrometers2Millimeters(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_MILLIMETER;\r\n}\r\n\r\nexport function micrometers2Centimeters(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_CENTIMETER;\r\n}\r\n\r\nexport function micrometers2Inches(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_INCH;\r\n}\r\n\r\nexport function micrometers2Hands(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_HAND;\r\n}\r\n\r\nexport function micrometers2Feet(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_FOOT;\r\n}\r\n\r\nexport function micrometers2Yards(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_YARD;\r\n}\r\n\r\nexport function micrometers2Meters(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_METER;\r\n}\r\n\r\nexport function micrometers2Rods(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_ROD;\r\n}\r\n\r\nexport function micrometers2Furlongs(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function micrometers2Kilometers(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function micrometers2Miles(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Micrometers(miles: number): number {\r\n    return miles * MICROMETERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Millimeters(miles: number): number {\r\n    return miles * MILLIMETERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Centimeters(miles: number): number {\r\n    return miles * CENTIMETERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Inches(miles: number): number {\r\n    return miles * INCHES_PER_MILE;\r\n}\r\n\r\nexport function miles2Hands(miles: number): number {\r\n    return miles * HANDS_PER_MILE;\r\n}\r\n\r\nexport function miles2Feet(miles: number): number {\r\n    return miles * FEET_PER_MILE;\r\n}\r\n\r\nexport function miles2Yards(miles: number): number {\r\n    return miles * YARDS_PER_MILE;\r\n}\r\n\r\nexport function miles2Meters(miles: number): number {\r\n    return miles * METERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Rods(miles: number): number {\r\n    return miles * RODS_PER_MILE;\r\n}\r\n\r\nexport function miles2Furlongs(miles: number): number {\r\n    return miles * FURLONGS_PER_MILE;\r\n}\r\n\r\nexport function miles2Kilometers(miles: number): number {\r\n    return miles * KILOMETERS_PER_MILE;\r\n}\r\n\r\nexport function millimeters2Micrometers(millimeters: number): number {\r\n    return millimeters * MICROMETERS_PER_MILLIMETER;\r\n}\r\n\r\nexport function millimeters2Centimeters(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_CENTIMETER;\r\n}\r\n\r\nexport function millimeters2Inches(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_INCH;\r\n}\r\n\r\nexport function millimeters2Hands(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_HAND;\r\n}\r\n\r\nexport function millimeters2Feet(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_FOOT;\r\n}\r\n\r\nexport function millimeters2Yards(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_YARD;\r\n}\r\n\r\nexport function millimeters2Meters(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_METER;\r\n}\r\n\r\nexport function millimeters2Rods(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_ROD;\r\n}\r\n\r\nexport function millimeters2Furlongs(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function millimeters2Kilometers(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function millimeters2Miles(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_MILE;\r\n}\r\n\r\nexport function rods2Micrometers(rods: number): number {\r\n    return rods * MICROMETERS_PER_ROD;\r\n}\r\n\r\nexport function rods2Millimeters(rods: number): number {\r\n    return rods * MILLIMETERS_PER_ROD;\r\n}\r\n\r\nexport function rods2Centimeters(rods: number): number {\r\n    return rods * CENTIMETERS_PER_ROD;\r\n}\r\n\r\nexport function rods2Inches(rods: number): number {\r\n    return rods * INCHES_PER_ROD;\r\n}\r\n\r\nexport function rods2Hands(rods: number): number {\r\n    return rods * HANDS_PER_ROD;\r\n}\r\n\r\nexport function rods2Feet(rods: number): number {\r\n    return rods * FEET_PER_ROD;\r\n}\r\n\r\nexport function rods2Yards(rods: number): number {\r\n    return rods * YARDS_PER_ROD;\r\n}\r\n\r\nexport function rods2Meters(rods: number): number {\r\n    return rods * METERS_PER_ROD;\r\n}\r\n\r\nexport function rods2Furlongs(rods: number): number {\r\n    return rods / RODS_PER_FURLONG;\r\n}\r\n\r\nexport function rods2Kilometers(rods: number): number {\r\n    return rods / RODS_PER_KILOMETER;\r\n}\r\n\r\nexport function rods2Miles(rods: number): number {\r\n    return rods / RODS_PER_MILE;\r\n}\r\n\r\nexport function yards2Micrometers(yards: number): number {\r\n    return yards * MICROMETERS_PER_YARD;\r\n}\r\n\r\nexport function yards2Millimeters(yards: number): number {\r\n    return yards * MILLIMETERS_PER_YARD;\r\n}\r\n\r\nexport function yards2Centimeters(yards: number): number {\r\n    return yards * CENTIMETERS_PER_YARD;\r\n}\r\n\r\nexport function yards2Inches(yards: number): number {\r\n    return yards * INCHES_PER_YARD;\r\n}\r\n\r\nexport function yards2Hands(yards: number): number {\r\n    return yards * HANDS_PER_YARD;\r\n}\r\n\r\nexport function yards2Feet(yards: number): number {\r\n    return yards * FEET_PER_YARD;\r\n}\r\n\r\nexport function yards2Meters(yards: number): number {\r\n    return yards / YARDS_PER_METER;\r\n}\r\n\r\nexport function yards2Rods(yards: number): number {\r\n    return yards / YARDS_PER_ROD;\r\n}\r\n\r\nexport function yards2Furlongs(yards: number): number {\r\n    return yards / YARDS_PER_FURLONG;\r\n}\r\n\r\nexport function yards2Kilometers(yards: number): number {\r\n    return yards / YARDS_PER_KILOMETER;\r\n}\r\n\r\nexport function yards2Miles(yards: number): number {\r\n    return yards / YARDS_PER_MILE;\r\n}", "import { arrayCompare, identity, IDisposable, isArray, isDefined, isNullOrUndefined, isString, mapMap, once, PriorityList, PriorityMap, success, Task } from \"@juniper-lib/tslib\";\r\n\r\ninterface IndexDef {\r\n    name: string;\r\n    keyPath: string | string[];\r\n    options?: IDBIndexParameters;\r\n}\r\n\r\ninterface StoreDef {\r\n    name: string;\r\n    options?: IDBObjectStoreParameters;\r\n    indexes?: IndexDef[];\r\n}\r\n\r\nexport class IDexDB implements IDisposable {\r\n\r\n    static async getCurrentVersion(dbName: string) {\r\n        if (isDefined(indexedDB.databases)) {\r\n            const databases = await indexedDB.databases();\r\n            for (const { name, version } of databases) {\r\n                if (name === dbName) {\r\n                    return version;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static delete(dbName: string) {\r\n        const deleteRequest = indexedDB.deleteDatabase(dbName);\r\n        const task = once<IDBOpenDBRequestEventMap>(deleteRequest, \"success\", \"error\", \"blocked\");\r\n        return success(task);\r\n    }\r\n\r\n    static async open(name: string, ...storeDefs: StoreDef[]): Promise<IDexDB> {\r\n\r\n        const storesByName = mapMap(storeDefs, (v) => v.name, identity);\r\n        const indexesByName = new PriorityMap<string, string, IndexDef>(\r\n            storeDefs\r\n                .filter((storeDef) => isDefined(storeDef.indexes))\r\n                .flatMap<[string, string, IndexDef]>((storeDef) =>\r\n                    storeDef.indexes.map<[string, string, IndexDef]>((indexDef) =>\r\n                        [storeDef.name, indexDef.name, indexDef])));\r\n\r\n        const storesToAdd = new Array<string>();\r\n        const storesToRemove = new Array<string>();\r\n        const storesToChange = new Array<string>();\r\n        const indexesToAdd = new PriorityList<string, string>();\r\n        const indexesToRemove = new PriorityList<string, string>();\r\n\r\n        let version = await this.getCurrentVersion(name);\r\n\r\n        if (isNullOrUndefined(version)) {\r\n            storesToAdd.push(...storesByName.keys());\r\n            for (const storeDef of storeDefs) {\r\n                if (isDefined(storeDef.indexes)) {\r\n                    for (const indexDef of storeDef.indexes) {\r\n                        indexesToAdd.add(storeDef.name, indexDef.name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const D = indexedDB.open(name);\r\n            if (await success(once<IDBOpenDBRequestEventMap>(D, \"success\", \"error\", \"blocked\"))) {\r\n                const db = D.result;\r\n\r\n                const storesToScrutinize = new Array<string>();\r\n\r\n                for (const storeName of Array.from(db.objectStoreNames)) {\r\n                    if (!storesByName.has(storeName)) {\r\n                        storesToRemove.push(storeName);\r\n                    }\r\n                }\r\n\r\n                for (const storeName of storesByName.keys()) {\r\n                    if (!db.objectStoreNames.contains(storeName)) {\r\n                        storesToAdd.push(storeName);\r\n                    }\r\n                    else {\r\n                        storesToScrutinize.push(storeName);\r\n                    }\r\n                }\r\n                if (storesToScrutinize.length > 0) {\r\n                    const transaction = db.transaction(storesToScrutinize);\r\n                    const transacting = once<IDBTransactionEventMap>(transaction, \"complete\", \"error\", \"abort\");\r\n                    const transacted = success(transacting);\r\n\r\n                    for (const storeName of storesToScrutinize) {\r\n                        const store = transaction.objectStore(storeName);\r\n                        for (const indexName of Array.from(store.indexNames)) {\r\n                            if (!indexesByName.has(storeName, indexName)) {\r\n                                if (storesToChange.indexOf(storeName) === -1) {\r\n                                    storesToChange.push(storeName);\r\n                                }\r\n                                indexesToRemove.add(storeName, indexName);\r\n                            }\r\n                        }\r\n\r\n                        if (indexesByName.has(storeName)) {\r\n                            for (const indexName of indexesByName.get(storeName).keys()) {\r\n                                if (!store.indexNames.contains(indexName)) {\r\n                                    if (storesToChange.indexOf(storeName) === -1) {\r\n                                        storesToChange.push(storeName);\r\n                                    }\r\n                                    indexesToAdd.add(storeName, indexName);\r\n                                }\r\n                                else {\r\n                                    const indexDef = indexesByName.get(storeName, indexName);\r\n                                    const index = store.index(indexName);\r\n                                    if (isString(indexDef.keyPath) !== isString(index.keyPath)\r\n                                        || isString(indexDef.keyPath) && isString(index.keyPath) && indexDef.keyPath !== index.keyPath\r\n                                        || isArray(indexDef.keyPath) && isArray(index.keyPath) && arrayCompare(indexDef.keyPath, index.keyPath)) {\r\n                                        if (storesToChange.indexOf(storeName) === -1) {\r\n                                            storesToChange.push(storeName);\r\n                                        }\r\n                                        indexesToRemove.add(storeName, indexName);\r\n                                        indexesToAdd.add(storeName, indexName);\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    transaction.commit();\r\n                    await transacted;\r\n                }\r\n\r\n                db.close();\r\n            }\r\n\r\n            if (storesToAdd.length > 0\r\n                || storesToRemove.length > 0\r\n                || indexesToAdd.size > 0\r\n                || indexesToRemove.size > 0) {\r\n                ++version;\r\n            }\r\n        }\r\n\r\n        const upgrading = new Task<boolean, Event>();\r\n        const openRequest = isDefined(version)\r\n            ? indexedDB.open(name, version)\r\n            : indexedDB.open(name);\r\n        const opening = once<IDBOpenDBRequestEventMap>(openRequest, \"success\", \"error\", \"blocked\");\r\n        const upgraded = success(upgrading);\r\n        const opened = success(opening);\r\n\r\n        const noUpgrade = () => upgrading.resolve(false);\r\n        openRequest.addEventListener(\"success\", noUpgrade);\r\n\r\n        openRequest.addEventListener(\"upgradeneeded\", () => {\r\n            const transacting = once<IDBTransactionEventMap>(openRequest.transaction, \"complete\", \"error\", \"abort\");\r\n            const db = openRequest.result;\r\n            for (const storeName of storesToRemove) {\r\n                db.deleteObjectStore(storeName);\r\n            }\r\n\r\n            const stores = new Map<string, IDBObjectStore>();\r\n\r\n            for (const storeName of storesToAdd) {\r\n                const storeDef = storesByName.get(storeName);\r\n                const store = db.createObjectStore(storeName, storeDef.options);\r\n                stores.set(storeName, store);\r\n            }\r\n\r\n            for (const storeName of storesToChange) {\r\n                const store = openRequest.transaction.objectStore(storeName);\r\n                stores.set(storeName, store);\r\n            }\r\n\r\n            for (const [storeName, store] of stores) {\r\n                for (const indexName of indexesToRemove.get(storeName)) {\r\n                    store.deleteIndex(indexName);\r\n                }\r\n\r\n                for (const indexName of indexesToAdd.get(storeName)) {\r\n                    const indexDef = indexesByName.get(storeName, indexName);\r\n                    store.createIndex(indexName, indexDef.keyPath, indexDef.options);\r\n                }\r\n            }\r\n\r\n            success(transacting)\r\n                .then(upgrading.resolve)\r\n                .catch(upgrading.reject)\r\n                .finally(() => openRequest.removeEventListener(\"success\", noUpgrade));\r\n        });\r\n\r\n        if (!(await upgraded)) {\r\n            throw upgrading.error;\r\n        }\r\n\r\n        if (!(await opened)) {\r\n            throw opening.error;\r\n        }\r\n\r\n        return new IDexDB(openRequest.result);\r\n    }\r\n\r\n    constructor(private readonly db: IDBDatabase) {\r\n\r\n    }\r\n\r\n    dispose() {\r\n        this.db.close();\r\n    }\r\n\r\n    get name() {\r\n        return this.db.name;\r\n    }\r\n\r\n    get version() {\r\n        return this.db.version;\r\n    }\r\n\r\n    get storeNames() {\r\n        return Array.from(this.db.objectStoreNames);\r\n    }\r\n\r\n    getStore<T>(storeName: string): IDexStore<T> {\r\n        return new IDexStore<T>(this.db, storeName);\r\n    }\r\n}\r\n\r\nexport class IDexStore<T> {\r\n    constructor(private readonly db: IDBDatabase, private readonly storeName: string) {\r\n\r\n    }\r\n\r\n    private async request<T>(makeRequest: (store: IDBObjectStore) => IDBRequest<T>, mode: IDBTransactionMode): Promise<T> {\r\n        const transaction = this.db.transaction(this.storeName, mode);\r\n        const transacting = once<IDBTransactionEventMap>(transaction, \"complete\", \"error\");\r\n\r\n        const store = transaction.objectStore(this.storeName);\r\n        const request = makeRequest(store);\r\n        const requesting = once<IDBRequestEventMap>(request, \"success\", \"error\");\r\n\r\n        if (!(await success(requesting))) {\r\n            transaction.abort();\r\n            throw requesting.error;\r\n        }\r\n\r\n        transaction.commit();\r\n        if (!(await success(transacting))) {\r\n            throw transacting.error;\r\n        }\r\n\r\n        return request.result;\r\n    }\r\n\r\n    add<T>(value: T, key?: IDBValidKey): Promise<IDBValidKey> {\r\n        return this.request((store) => store.add(value, key), \"readwrite\");\r\n    }\r\n\r\n    clear() {\r\n        return this.request((store) => store.clear(), \"readwrite\");\r\n    }\r\n\r\n    getCount(query?: IDBValidKey | IDBKeyRange): Promise<number> {\r\n        return this.request((store) => store.count(query), \"readonly\");\r\n    }\r\n\r\n    delete(query: IDBValidKey | IDBKeyRange) {\r\n        return this.request((store) => store.delete(query), \"readwrite\");\r\n    }\r\n\r\n    get(key: IDBValidKey): Promise<T> {\r\n        return this.request((store) => store.get<T>(key), \"readonly\");\r\n    }\r\n\r\n    getAll(): Promise<T[]> {\r\n        return this.request((store) => store.getAll<T>(), \"readonly\")\r\n    }\r\n\r\n    getAllKeys(): Promise<IDBValidKey[]> {\r\n        return this.request((store) => store.getAllKeys(), \"readonly\")\r\n    }\r\n\r\n    getKey(query: IDBValidKey | IDBKeyRange): Promise<IDBValidKey | undefined> {\r\n        return this.request((store) => store.getKey(query), \"readonly\");\r\n    }\r\n\r\n    openCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): Promise<IDBCursorWithValue | null> {\r\n        return this.request((store) => store.openCursor(query, direction), \"readonly\");\r\n    }\r\n\r\n    openKeyCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): Promise<IDBCursor | null> {\r\n        return this.request((store) => store.openKeyCursor(query, direction), \"readonly\");\r\n    }\r\n\r\n    put(value: T, key?: IDBValidKey): Promise<IDBValidKey> {\r\n        return this.request((store) => store.put(value, key), \"readwrite\");\r\n    }\r\n}", "import { IResponse } from \"./IResponse\";\r\n\r\nexport async function translateResponse<T, U>(response: IResponse<T>, translate: (v: T) => U | Promise<U>): Promise<IResponse<U>> {\r\n    const {\r\n        status,\r\n        path,\r\n        content,\r\n        contentType,\r\n        contentLength,\r\n        fileName,\r\n        headers,\r\n        date\r\n    } = response;\r\n\r\n    return {\r\n        status,\r\n        path,\r\n        content: await translate(content),\r\n        contentType,\r\n        contentLength,\r\n        fileName,\r\n        headers,\r\n        date\r\n    };\r\n}", "import { assertNever, identity, IProgress, isArrayBuffer, isArrayBufferView, isDefined, isNullOrUndefined, isString, mapJoin, PriorityList, PriorityMap, progressSplit, Task, using } from \"@juniper-lib/tslib\";\r\nimport { IDexDB, IDexStore } from \"@juniper-lib/indexdb\";\r\nimport { HTTPMethods } from \"./HTTPMethods\";\r\nimport { IFetchingServiceImpl, XMLHttpRequestResponseTypeMap } from \"./IFetchingServiceImpl\";\r\nimport { IRequest, IRequestWithBody } from \"./IRequest\";\r\nimport { IResponse } from \"./IResponse\";\r\nimport { translateResponse } from \"./ResponseTranslator\";\r\n\r\nfunction isXHRBodyInit(obj: any): obj is XMLHttpRequestBodyInit {\r\n    return isString(obj)\r\n        || isArrayBufferView(obj)\r\n        || obj instanceof Blob\r\n        || obj instanceof FormData\r\n        || isArrayBuffer(obj)\r\n        || obj instanceof ReadableStream\r\n        || \"Document\" in globalThis && obj instanceof Document;\r\n}\r\n\r\nfunction trackProgress(name: string, xhr: XMLHttpRequest, target: (XMLHttpRequest | XMLHttpRequestUpload), prog: IProgress, skipLoading: boolean, prevTask?: Promise<void>): Promise<void> {\r\n\r\n    let prevDone = !prevTask;\r\n    if (prevTask) {\r\n        prevTask.then(() => prevDone = true);\r\n    }\r\n\r\n    let done = false;\r\n    let loaded = skipLoading;\r\n\r\n    const requestComplete = new Task(\r\n        () => loaded && done,\r\n        () => prevDone);\r\n\r\n    target.addEventListener(\"loadstart\", () => {\r\n        if (prevDone && !done && prog) {\r\n            prog.start(name);\r\n        }\r\n    });\r\n\r\n    target.addEventListener(\"progress\", (ev: Event) => {\r\n        if (prevDone && !done) {\r\n            const evt = ev as ProgressEvent<XMLHttpRequestEventTarget>;\r\n            if (prog) {\r\n                prog.report(evt.loaded, Math.max(evt.loaded, evt.total), name);\r\n            }\r\n            if (evt.loaded === evt.total) {\r\n                loaded = true;\r\n                requestComplete.resolve();\r\n            }\r\n        }\r\n    });\r\n\r\n    target.addEventListener(\"load\", () => {\r\n        if (prevDone && !done) {\r\n            if (prog) {\r\n                prog.end(name);\r\n            }\r\n            done = true;\r\n            requestComplete.resolve();\r\n        }\r\n    });\r\n\r\n    const onError = (msg: string) => () => requestComplete.reject(`${msg} (${xhr.status})`);\r\n\r\n    target.addEventListener(\"error\", onError(\"error\"));\r\n    target.addEventListener(\"abort\", onError(\"abort\"));\r\n    target.addEventListener(\"timeout\", onError(\"timeout\"));\r\n\r\n    return requestComplete;\r\n}\r\n\r\nfunction sendRequest(xhr: XMLHttpRequest, method: HTTPMethods, path: string, timeout: number, headers: Map<string, string>, body?: XMLHttpRequestBodyInit): void {\r\n    xhr.open(method, path);\r\n    xhr.responseType = \"blob\";\r\n    xhr.timeout = timeout;\r\n    if (headers) {\r\n        for (const [key, value] of headers) {\r\n            xhr.setRequestHeader(key, value);\r\n        }\r\n    }\r\n\r\n    if (isDefined(body)) {\r\n        xhr.send(body);\r\n    }\r\n    else {\r\n        xhr.send();\r\n    }\r\n}\r\n\r\nfunction readResponseHeader<T>(headers: Map<string, string>, key: string, translate: (value: string) => T): T {\r\n    if (!headers.has(key)) {\r\n        return null;\r\n    }\r\n\r\n    const value = headers.get(key);\r\n    try {\r\n        const translated = translate(value);\r\n        headers.delete(key);\r\n        return translated;\r\n    }\r\n    catch (exp) {\r\n        console.warn(key, exp);\r\n    }\r\n    return null;\r\n}\r\n\r\nconst FILE_NAME_PATTERN = /filename=\\\"(.+)\\\"(;|$)/;\r\nconst DB_NAME = \"Juniper:Fetcher:Cache\";\r\n\r\nexport class FetchingServiceImplXHR implements IFetchingServiceImpl {\r\n\r\n    private readonly cacheReady: Promise<void>;\r\n    private cache: IDexDB = null;\r\n    private store: IDexStore<IResponse<Blob>> = null;\r\n\r\n    constructor() {\r\n        this.cacheReady = this.openCache();\r\n    }\r\n\r\n    async drawImageToCanvas(request: IRequest, canvas: OffscreenCanvas, progress: IProgress): Promise<IResponse> {\r\n        const response = await this.sendNothingGetSomething(\"blob\", request, progress);\r\n        const blob = response.content;\r\n        return using(await createImageBitmap(blob, {\r\n            imageOrientation: \"none\"\r\n        }), (img) => {\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            const g = canvas.getContext(\"2d\");\r\n            g.drawImage(img, 0, 0);\r\n            return translateResponse(response, () => null);\r\n        });\r\n    }\r\n\r\n    private async openCache(): Promise<void> {\r\n        this.cache = await IDexDB.open(DB_NAME, {\r\n            name: \"files\",\r\n            options: {\r\n                keyPath: \"path\"\r\n            }\r\n        });\r\n\r\n        this.store = await this.cache.getStore(\"files\");\r\n    }\r\n\r\n    async clearCache(): Promise<void> {\r\n        await this.cacheReady;\r\n        await this.store.clear();\r\n    }\r\n\r\n    private async readResponseHeaders(path: string, xhr: XMLHttpRequest): Promise<IResponse> {\r\n        const headerParts = xhr\r\n            .getAllResponseHeaders()\r\n            .split(/[\\r\\n]+/)\r\n            .map((v) => v.trim())\r\n            .filter((v) => v.length > 0)\r\n            .map<[string, string]>((line) => {\r\n                const parts = line.split(\": \");\r\n                const key = parts.shift().toLowerCase();\r\n                const value = parts.join(\": \");\r\n                return [key, value];\r\n            });\r\n\r\n        const pList = new PriorityList<string, string>(headerParts);\r\n        const normalizedHeaderParts = Array.from(pList.keys())\r\n            .map<[string, string]>((key) =>\r\n                [\r\n                    key,\r\n                    pList.get(key)\r\n                        .join(\", \")\r\n                ]);\r\n\r\n        const headers = new Map<string, string>(normalizedHeaderParts);\r\n        const contentType = readResponseHeader(headers, \"content-type\", identity);\r\n        const contentLength = readResponseHeader(headers, \"content-length\", parseFloat);\r\n        const date = readResponseHeader(headers, \"date\", (v) => new Date(v));\r\n        const fileName = readResponseHeader(headers, \"content-disposition\", (v) => {\r\n            if (isDefined(v)) {\r\n                const match = v.match(FILE_NAME_PATTERN);\r\n                if (isDefined(match)) {\r\n                    return match[1];\r\n                }\r\n            }\r\n\r\n            return null;\r\n        });\r\n\r\n        const response: IResponse = {\r\n            status: xhr.status,\r\n            path,\r\n            content: undefined,\r\n            contentType,\r\n            contentLength,\r\n            fileName,\r\n            date,\r\n            headers\r\n        };\r\n\r\n        return response;\r\n    }\r\n\r\n    private async readResponse(path: string, xhr: XMLHttpRequest): Promise<IResponse<Blob>> {\r\n        const {\r\n            status,\r\n            contentType,\r\n            contentLength,\r\n            fileName,\r\n            date,\r\n            headers\r\n        } = await this.readResponseHeaders(path, xhr);\r\n\r\n        const response: IResponse<Blob> = {\r\n            path,\r\n            status,\r\n            contentType,\r\n            contentLength,\r\n            fileName,\r\n            date,\r\n            headers,\r\n            content: xhr.response as Blob\r\n        }\r\n\r\n        if (isDefined(response.content)) {\r\n            response.contentType = response.contentType || response.content.type;\r\n            response.contentLength = response.contentLength || response.content.size;\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    private async decodeContent<K extends keyof (XMLHttpRequestResponseTypeMap), T extends XMLHttpRequestResponseTypeMap[K]>(xhrType: K, response: IResponse<Blob>): Promise<IResponse<T>> {\r\n        return translateResponse<Blob, T>(response, async (contentBlob) => {\r\n            if (xhrType === \"\") {\r\n                return null;\r\n            }\r\n            else if (isNullOrUndefined(response.contentType)) {\r\n                const headerBlock = Array.from(response.headers.entries())\r\n                    .map((kv) => kv.join(\": \"))\r\n                    .join(\"\\n  \");\r\n                throw new Error(\"No content type found in headers: \\n  \" + headerBlock);\r\n            }\r\n            else if (xhrType === \"blob\") {\r\n                return contentBlob as any as T;\r\n            }\r\n            else if (xhrType === \"arraybuffer\") {\r\n                return (await contentBlob.arrayBuffer()) as any as T;\r\n            }\r\n            else if (xhrType === \"json\") {\r\n                const text = await contentBlob.text();\r\n                if (text.length > 0) {\r\n                    return JSON.parse(text) as T;\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n            else if (xhrType === \"document\") {\r\n                const parser = new DOMParser();\r\n                if (response.contentType === \"application/xhtml+xml\"\r\n                    || response.contentType === \"text/html\"\r\n                    || response.contentType === \"application/xml\"\r\n                    || response.contentType === \"image/svg+xml\"\r\n                    || response.contentType === \"text/xml\") {\r\n                    return parser.parseFromString(await contentBlob.text(), response.contentType) as any as T;\r\n                }\r\n                else {\r\n                    throw new Error(\"Couldn't parse document\");\r\n                }\r\n            }\r\n            else if (xhrType === \"text\") {\r\n                return (await contentBlob.text()) as any as T;\r\n            }\r\n            else {\r\n                assertNever(xhrType);\r\n            }\r\n        });\r\n    }\r\n\r\n    private readonly tasks = new PriorityMap<HTTPMethods, string, Promise<any>>();\r\n\r\n    private async withCachedTask<T>(request: IRequest, action: () => Promise<IResponse<T>>): Promise<IResponse<T>> {\r\n        if (request.method !== \"GET\"\r\n            && request.method !== \"HEAD\"\r\n            && request.method !== \"OPTIONS\") {\r\n            return await action();\r\n        }\r\n\r\n        if (!this.tasks.has(request.method, request.path)) {\r\n            this.tasks.add(\r\n                request.method,\r\n                request.path,\r\n                action().finally(() =>\r\n                    this.tasks.delete(request.method, request.path)));\r\n        }\r\n\r\n        return this.tasks.get(request.method, request.path);\r\n    }\r\n\r\n    sendNothingGetNothing(request: IRequest): Promise<IResponse> {\r\n        return this.withCachedTask(request, async () => {\r\n            const xhr = new XMLHttpRequest();\r\n            const download = trackProgress(`requesting: ${request.path}`, xhr, xhr, null, true);\r\n\r\n            sendRequest(xhr, request.method, request.path, request.timeout, request.headers);\r\n\r\n            await download;\r\n\r\n            return await this.readResponseHeaders(request.path, xhr);\r\n        });\r\n    }\r\n\r\n    sendNothingGetSomething<K extends keyof (XMLHttpRequestResponseTypeMap), T extends XMLHttpRequestResponseTypeMap[K]>(xhrType: K, request: IRequest, progress: IProgress): Promise<IResponse<T>> {\r\n        return this.withCachedTask(request, async () => {\r\n            let response: IResponse<Blob> = null;\r\n\r\n            const useCache = request.useCache && request.method === \"GET\";\r\n\r\n            if (useCache) {\r\n                if (isDefined(progress)) {\r\n                    progress.start();\r\n                }\r\n                await this.cacheReady;\r\n                response = await this.store.get(request.path);\r\n            }\r\n\r\n            const hadCachedResponse = isNullOrUndefined(response);\r\n\r\n            if (hadCachedResponse) {\r\n                const xhr = new XMLHttpRequest();\r\n                const download = trackProgress(`requesting: ${request.path}`, xhr, xhr, progress, true);\r\n\r\n                sendRequest(xhr, request.method, request.path, request.timeout, request.headers);\r\n\r\n                await download;\r\n\r\n                response = await this.readResponse(request.path, xhr);\r\n\r\n                if (useCache) {\r\n                    await this.store.add(response);\r\n                }\r\n            }\r\n\r\n            const value = await this.decodeContent<K, T>(xhrType, response);\r\n\r\n            if (hadCachedResponse && isDefined(progress)) {\r\n                progress.end();\r\n            }\r\n\r\n            return value;\r\n        });\r\n    }\r\n\r\n    async sendSomethingGetSomething<K extends keyof (XMLHttpRequestResponseTypeMap), T extends XMLHttpRequestResponseTypeMap[K]>(xhrType: K, request: IRequestWithBody, defaultPostHeaders: Map<string, string>, progress: IProgress): Promise<IResponse<T>> {\r\n        let body: XMLHttpRequestBodyInit = null;\r\n\r\n        const headers = mapJoin(new Map<string, string>(), defaultPostHeaders, request.headers);\r\n\r\n        if (request.body instanceof FormData\r\n            && isDefined(headers)) {\r\n            const toDelete = new Array<string>();\r\n            for (const key of headers.keys()) {\r\n                if (key.toLowerCase() === \"content-type\") {\r\n                    toDelete.push(key);\r\n                }\r\n            }\r\n            for (const key of toDelete) {\r\n                headers.delete(key);\r\n            }\r\n        }\r\n\r\n        if (isXHRBodyInit(request.body) && !isString(request.body)) {\r\n            body = request.body;\r\n        }\r\n        else if (isDefined(request.body)) {\r\n            body = JSON.stringify(request.body);\r\n        }\r\n\r\n        const progs = progressSplit(progress, 2);\r\n        const xhr = new XMLHttpRequest();\r\n        const upload = isDefined(body)\r\n            ? trackProgress(\"uploading\", xhr, xhr.upload, progs.shift(), false)\r\n            : Promise.resolve();\r\n        const downloadProg = progs.shift();\r\n        const download = trackProgress(\"saving\", xhr, xhr, downloadProg, true, upload);\r\n\r\n        sendRequest(xhr, request.method, request.path, request.timeout, headers, body);\r\n\r\n        await upload;\r\n        await download;\r\n\r\n        const response = await this.readResponse(request.path, xhr);\r\n        return await this.decodeContent(xhrType, response);\r\n    }\r\n}\r\n", "import { IProgress } from \"@juniper-lib/tslib\";\r\nimport { IFetchingService } from \"./IFetchingService\";\r\nimport { IFetchingServiceImpl } from \"./IFetchingServiceImpl\";\r\nimport { IRequest, IRequestWithBody } from \"./IRequest\";\r\nimport { IResponse } from \"./IResponse\";\r\nimport { translateResponse } from \"./ResponseTranslator\";\r\n\r\n\r\nexport class FetchingService implements IFetchingService {\r\n\r\n    constructor(private readonly impl: IFetchingServiceImpl) {\r\n    }\r\n\r\n    protected readonly defaultPostHeaders = new Map<string, string>();\r\n\r\n    setRequestVerificationToken(value: string): void {\r\n        this.defaultPostHeaders.set(\"RequestVerificationToken\", value);\r\n    }\r\n\r\n    clearCache(): Promise<void> {\r\n        return this.impl.clearCache();\r\n    }\r\n\r\n    sendNothingGetNothing(request: IRequest): Promise<IResponse> {\r\n        return this.impl.sendNothingGetNothing(request);\r\n    }\r\n\r\n    sendNothingGetBlob(request: IRequest, progress: IProgress): Promise<IResponse<Blob>> {\r\n        return this.impl.sendNothingGetSomething(\"blob\", request, progress);\r\n    }\r\n\r\n    sendObjectGetBlob(request: IRequestWithBody, progress: IProgress): Promise<IResponse<Blob>> {\r\n        return this.impl.sendSomethingGetSomething(\"blob\", request, this.defaultPostHeaders, progress);\r\n    }\r\n\r\n    sendNothingGetBuffer(request: IRequest, progress: IProgress): Promise<IResponse<ArrayBuffer>> {\r\n        return this.impl.sendNothingGetSomething(\"arraybuffer\", request, progress);\r\n    }\r\n\r\n    sendObjectGetBuffer(request: IRequestWithBody, progress: IProgress): Promise<IResponse<ArrayBuffer>> {\r\n        return this.impl.sendSomethingGetSomething(\"arraybuffer\", request, this.defaultPostHeaders, progress);\r\n    }\r\n\r\n    sendNothingGetText(request: IRequest, progress: IProgress): Promise<IResponse<string>> {\r\n        return this.impl.sendNothingGetSomething(\"text\", request, progress);\r\n    }\r\n\r\n    sendObjectGetText(request: IRequestWithBody, progress: IProgress): Promise<IResponse<string>> {\r\n        return this.impl.sendSomethingGetSomething(\"text\", request, this.defaultPostHeaders, progress);\r\n    }\r\n\r\n    async sendNothingGetObject<T>(request: IRequest, progress: IProgress): Promise<T> {\r\n        const response = await this.impl.sendNothingGetSomething<\"json\", T>(\"json\", request, progress);\r\n        return response.content;\r\n    }\r\n\r\n    async sendObjectGetObject<T>(request: IRequestWithBody, progress: IProgress): Promise<T> {\r\n        const response = await this.impl.sendSomethingGetSomething<\"json\", T>(\"json\", request, this.defaultPostHeaders, progress);\r\n        return response.content;\r\n    }\r\n\r\n    sendObjectGetNothing(request: IRequestWithBody, progress: IProgress): Promise<IResponse> {\r\n        return this.impl.sendSomethingGetSomething(\"\", request, this.defaultPostHeaders, progress);\r\n    }\r\n\r\n    drawImageToCanvas(request: IRequest, canvas: OffscreenCanvas, progress: IProgress): Promise<IResponse> {\r\n        return this.impl.drawImageToCanvas(request, canvas, progress);\r\n    }\r\n\r\n    async sendNothingGetFile(request: IRequest, progress: IProgress): Promise<IResponse<string>> {\r\n        return translateResponse(\r\n            await this.sendNothingGetBlob(request, progress),\r\n            URL.createObjectURL);\r\n    }\r\n\r\n    async sendObjectGetFile(request: IRequestWithBody, progress: IProgress): Promise<IResponse<string>> {\r\n        return translateResponse(\r\n            await this.sendObjectGetBlob(request, progress),\r\n            URL.createObjectURL);\r\n    }\r\n\r\n    async sendNothingGetXml(request: IRequest, progress: IProgress): Promise<IResponse<HTMLElement>> {\r\n        return translateResponse(\r\n            await this.impl.sendNothingGetSomething(\"document\", request, progress),\r\n            (doc) => doc.documentElement);\r\n    }\r\n\r\n    async sendObjectGetXml(request: IRequestWithBody, progress: IProgress): Promise<IResponse<HTMLElement>> {\r\n        return translateResponse(\r\n            await this.impl.sendSomethingGetSomething(\"document\", request, this.defaultPostHeaders, progress),\r\n            (doc) => doc.documentElement);\r\n    }\r\n\r\n    async sendNothingGetImageBitmap(request: IRequest, progress: IProgress): Promise<IResponse<ImageBitmap>> {\r\n        return translateResponse(\r\n            await this.sendNothingGetBlob(request, progress),\r\n            createImageBitmap)\r\n    }\r\n\r\n    async sendObjectGetImageBitmap(request: IRequestWithBody, progress: IProgress): Promise<IResponse<ImageBitmap>> {\r\n        return translateResponse(\r\n            await this.sendObjectGetBlob(request, progress),\r\n            createImageBitmap);\r\n    }\r\n}\r\n", "import { BaseProgress, isArray, isDefined, TypedEventBase } from \"@juniper-lib/tslib\";\r\nimport { WorkerClientMethodCallMessage, WorkerServerErrorMessage, WorkerServerEventMessage, WorkerServerMessages, WorkerServerProgressMessage, WorkerServerReturnMessage } from \"@juniper-lib/workers/WorkerMessages\";\r\n\r\ntype workerServerMethod = (taskID: number, ...params: any[]) => Promise<void>;\r\n\r\ntype createTransferableCallback<T> = (returnValue: T) => (Transferable | OffscreenCanvas)[];\r\n\r\ntype Executor<T> = (...params: any[]) => Promise<T>;\r\n\r\ntype VoidExecutor = (...params: any[]) => void;\r\n\r\nclass WorkerServerProgress extends BaseProgress {\r\n    constructor(private readonly server: WorkerServer, private readonly taskID: number) {\r\n        super();\r\n    }\r\n\r\n\r\n    /**\r\n     * Report progress through long-running invocations. If your invocable\r\n     * functions don't report progress, this can be safely ignored.\r\n     * @param soFar - how much of the process we've gone through.\r\n     * @param total - the total amount we need to go through.\r\n     * @param msg - an optional message to include as part of the progress update.\r\n     * @param est - an optional estimate of how many milliseconds are left in the progress.\r\n     */\r\n    override report(soFar: number, total: number, msg?: string, est?: number): void {\r\n        const message: WorkerServerProgressMessage = {\r\n            type: \"progress\",\r\n            taskID: this.taskID,\r\n            soFar,\r\n            total,\r\n            msg,\r\n            est\r\n        };\r\n        this.server.postMessage(message);\r\n    }\r\n}\r\n\r\nexport class WorkerServer {\r\n    private methods = new Map<string, workerServerMethod>();\r\n\r\n    /**\r\n     * Creates a new worker thread method call listener.\r\n     * @param self - the worker scope in which to listen.\r\n     */\r\n    constructor(private self: DedicatedWorkerGlobalScope) {\r\n        this.self.addEventListener(\"message\", (evt: MessageEvent<WorkerClientMethodCallMessage>): void => {\r\n            const data = evt.data;\r\n            this.callMethod(data);\r\n        });\r\n    }\r\n\r\n    postMessage(message: WorkerServerMessages, transferables?: (Transferable | OffscreenCanvas)[]): void {\r\n        if (isDefined(transferables)) {\r\n            this.self.postMessage(message, transferables);\r\n        }\r\n        else {\r\n            this.self.postMessage(message);\r\n        }\r\n    }\r\n\r\n    private callMethod(data: WorkerClientMethodCallMessage) {\r\n        const method = this.methods.get(data.methodName);\r\n        if (method) {\r\n            try {\r\n                if (isArray(data.params)) {\r\n                    method(data.taskID, ...data.params);\r\n                }\r\n                else if (isDefined(data.params)) {\r\n                    method(data.taskID, data.params);\r\n                }\r\n                else {\r\n                    method(data.taskID);\r\n                }\r\n            }\r\n            catch (exp) {\r\n                this.onError(data.taskID, `method invocation error: ${data.methodName}(${exp.message || exp})`);\r\n            }\r\n        }\r\n        else {\r\n            this.onError(data.taskID, `method not found: ${data.methodName}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Report an error back to the calling thread.\r\n     * @param taskID - the invocation ID of the method that errored.\r\n     * @param errorMessage - what happened?\r\n     */\r\n    private onError(taskID: number, errorMessage: string): void {\r\n        const message: WorkerServerErrorMessage = {\r\n            type: \"error\",\r\n            taskID,\r\n            errorMessage\r\n        };\r\n        this.postMessage(message);\r\n    }\r\n\r\n    /**\r\n     * Return back to the client.\r\n     * @param taskID - the invocation ID of the method that is returning.\r\n     * @param returnValue - the (optional) value to return.\r\n     * @param transferReturnValue - a mapping function to extract any Transferable objects from the return value.\r\n     */\r\n    private onReturn<T>(taskID: number, returnValue: T, transferReturnValue: createTransferableCallback<T>): void {\r\n        let message: WorkerServerReturnMessage = null;\r\n        if (returnValue === undefined) {\r\n            message = {\r\n                type: \"return\",\r\n                taskID\r\n            };\r\n        }\r\n        else {\r\n            message = {\r\n                type: \"return\",\r\n                taskID,\r\n                returnValue\r\n            };\r\n        }\r\n\r\n        if (isDefined(transferReturnValue)) {\r\n            const transferables = transferReturnValue(returnValue);\r\n            this.postMessage(message, transferables);\r\n        }\r\n        else {\r\n            this.postMessage(message);\r\n        }\r\n    }\r\n\r\n    private addMethodInternal<T>(methodName: string, asyncFunc: Function, transferReturnValue?: createTransferableCallback<T>) {\r\n        if (this.methods.has(methodName)) {\r\n            throw new Error(`${methodName} method has already been mapped.`);\r\n        }\r\n\r\n        this.methods.set(methodName, async (taskID: number, ...params: any[]) => {\r\n            const prog = new WorkerServerProgress(this, taskID);\r\n\r\n            try {\r\n                // Even functions returning void and functions returning bare, unPromised values, can be awaited.\r\n                // This creates a convenient fallback where we don't have to consider the exact return type of the function.\r\n                const returnValue = await asyncFunc(...params, prog);\r\n                this.onReturn(taskID, returnValue, transferReturnValue);\r\n            }\r\n            catch (exp) {\r\n                console.error(exp);\r\n                this.onError(taskID, exp.message || exp);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Registers a function call for cross-thread invocation.\r\n     * @param methodName - the name of the function to use during invocations.\r\n     * @param asyncFunc - the function to execute when the method is invoked.\r\n     * @param transferReturnValue - an (optional) function that reports on which values in the `returnValue` should be transfered instead of copied.\r\n     */\r\n    addFunction<T>(methodName: string, asyncFunc: Executor<T>, transferReturnValue?: createTransferableCallback<T>) {\r\n        this.addMethodInternal<T>(methodName, asyncFunc, transferReturnValue);\r\n    }\r\n\r\n    /**\r\n     * Registers a function call for cross-thread invocation.\r\n     * @param methodName - the name of the function to use during invocations.\r\n     * @param asyncFunc - the function to execute when the method is invoked.\r\n     */\r\n    addVoidFunction(methodName: string, asyncFunc: VoidExecutor) {\r\n        this.addMethodInternal(methodName, asyncFunc);\r\n    }\r\n\r\n    /**\r\n     * Registers a class method call for cross-thread invocation.\r\n     * @param obj - the object on which to find the method.\r\n     * @param methodName - the name of the method to use during invocations.\r\n     * @param transferReturnValue - an (optional) function that reports on which values in the `returnValue` should be transfered instead of copied.\r\n     */\r\n    addMethod<\r\n        ClassT,\r\n        MethodNameT extends keyof ClassT & string,\r\n        MethodT extends ClassT[MethodNameT] & Executor<any>,\r\n        ReturnT extends (ReturnType<MethodT> extends Promise<infer T> ? T : ReturnT)\r\n    >(\r\n        obj: ClassT,\r\n        methodName: MethodNameT,\r\n        method: MethodT,\r\n        transferReturnValue?: createTransferableCallback<ReturnT>\r\n    ): void {\r\n        this.addFunction(methodName, method.bind(obj), transferReturnValue);\r\n    }\r\n\r\n\r\n    /**\r\n     * Registers a class method call for cross-thread invocation.\r\n     * @param methodName - the name of the method to use during invocations.\r\n     * @param obj - the object on which to find the method.\r\n     */\r\n    addVoidMethod<\r\n        ClassT,\r\n        MethodNameT extends keyof ClassT & string,\r\n        MethodT extends ClassT[MethodNameT] & VoidExecutor\r\n    >(\r\n        obj: ClassT,\r\n        methodName: MethodNameT,\r\n        method: MethodT\r\n    ): void {\r\n        this.addVoidFunction(methodName, method.bind(obj));\r\n    }\r\n\r\n\r\n    addEvent<\r\n        EventsT,\r\n        TransferableT\r\n    >(\r\n        object: TypedEventBase<EventsT>,\r\n        eventName: keyof EventsT & string,\r\n        makePayload?: (evt: Event) => TransferableT,\r\n        transferReturnValue?: createTransferableCallback<TransferableT>\r\n    ): void {\r\n        object.addEventListener(eventName, (evt: Event) => {\r\n            let message: WorkerServerEventMessage = null;\r\n            if (isDefined(makePayload)) {\r\n                message = {\r\n                    type: \"event\",\r\n                    eventName,\r\n                    data: makePayload(evt)\r\n                };\r\n            }\r\n            else {\r\n                message = {\r\n                    type: \"event\",\r\n                    eventName\r\n                };\r\n            }\r\n\r\n            if (message.data !== undefined\r\n                && isDefined(transferReturnValue)) {\r\n                const transferables = transferReturnValue(message.data);\r\n                this.postMessage(message, transferables);\r\n            }\r\n            else {\r\n                this.postMessage(message);\r\n            }\r\n        });\r\n    }\r\n}", "import { FetchingService } from \"@juniper-lib/fetcher-base/FetchingService\";\r\nimport type { IFetchingService } from \"@juniper-lib/fetcher-base/IFetchingService\";\r\nimport type { IFetchingServiceImpl } from \"@juniper-lib/fetcher-base/IFetchingServiceImpl\";\r\nimport type { IResponse } from \"@juniper-lib/fetcher-base/IResponse\";\r\nimport { WorkerServer } from \"@juniper-lib/worker-server\";\r\n\r\nexport class FetchingServiceServer extends WorkerServer {\r\n    constructor(self: DedicatedWorkerGlobalScope, impl: IFetchingServiceImpl) {\r\n        super(self);\r\n        const fetcher = new FetchingService(impl);\r\n        addFetcherMethods(this, fetcher);\r\n    }\r\n}\r\n\r\nfunction getContent<T extends Transferable | OffscreenCanvas>(response: IResponse<T>): Array<Transferable | OffscreenCanvas> {\r\n    return [response.content];\r\n}\r\n\r\nexport function addFetcherMethods(server: WorkerServer, fetcher: IFetchingService) {\r\n    server.addVoidMethod(fetcher, \"setRequestVerificationToken\", fetcher.setRequestVerificationToken);\r\n\r\n    server.addMethod(fetcher, \"clearCache\", fetcher.clearCache);\r\n\r\n    server.addMethod(fetcher, \"sendNothingGetNothing\", fetcher.sendNothingGetNothing);\r\n\r\n    server.addMethod(fetcher, \"sendNothingGetBuffer\", fetcher.sendNothingGetBuffer, getContent);\r\n    server.addMethod(fetcher, \"sendNothingGetImageBitmap\", fetcher.sendNothingGetImageBitmap, getContent);\r\n    server.addMethod(fetcher, \"sendNothingGetObject\", fetcher.sendNothingGetObject);\r\n    server.addMethod(fetcher, \"sendNothingGetFile\", fetcher.sendNothingGetFile);\r\n    server.addMethod(fetcher, \"sendNothingGetText\", fetcher.sendNothingGetText);\r\n\r\n    server.addMethod(fetcher, \"sendObjectGetNothing\", fetcher.sendObjectGetNothing);\r\n\r\n    server.addMethod(fetcher, \"sendObjectGetImageBitmap\", fetcher.sendObjectGetImageBitmap, getContent);\r\n    server.addMethod(fetcher, \"sendObjectGetBuffer\", fetcher.sendObjectGetBuffer, getContent);\r\n    server.addMethod(fetcher, \"sendObjectGetObject\", fetcher.sendObjectGetObject);\r\n    server.addMethod(fetcher, \"sendObjectGetFile\", fetcher.sendObjectGetFile);\r\n    server.addMethod(fetcher, \"sendObjectGetText\", fetcher.sendObjectGetText);\r\n\r\n    server.addMethod(fetcher, \"drawImageToCanvas\", fetcher.drawImageToCanvas);\r\n}\r\n", "import { FetchingServiceImplXHR as FetchingServiceImpl } from \"@juniper-lib/fetcher-base/FetchingServiceImplXHR\";\r\nimport { FetchingServiceServer } from \"./FetchingServiceServer\";\r\n(globalThis as any).server = new FetchingServiceServer(\r\n    (globalThis as any) as DedicatedWorkerGlobalScope,\r\n    new FetchingServiceImpl());"],
  "mappings": "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",
  "names": []
}
