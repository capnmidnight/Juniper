type GraphMode = "directed" | "reverse-directed" | "undirected";
export declare class ForceDirectedGraph<T> {
    private readonly container;
    private readonly getWeightMod;
    private readonly makeElementClass;
    private readonly makeContent;
    private readonly graph;
    private readonly elementToNode;
    private mouseDown;
    private readonly mousePoint;
    private readonly displayCenter;
    private readonly content;
    private readonly connectorsCanvas;
    private readonly g;
    private readonly render;
    private readonly resize;
    private _running;
    private _scale;
    private displayCount;
    private selectedNode;
    private data;
    private grabbed;
    private timer;
    performLayout: boolean;
    displayDepth: number;
    limit: number;
    cooling: boolean;
    attract: number;
    repel: number;
    centeringGravity: number;
    get running(): boolean;
    get w(): number;
    get h(): number;
    get scale(): number;
    set scale(v: number);
    private mid;
    constructor(container: HTMLElement, getWeightMod: (connected: boolean, dist: number, a: T, b: T) => number, makeElementClass: (value: T) => string, makeContent: (value: T) => string | HTMLElement);
    start(): void;
    stop(): void;
    showCycles(show: boolean, strict: boolean): void;
    get values(): T[];
    set values(v: T[]);
    connect(connections: [T, T][], mode?: GraphMode): void;
    reset(): void;
    private _render;
    private setMouse;
    private readonly boundsCache;
    private draw;
    getElement(value: T): HTMLElement;
    private setElementClass;
    select(value: T): void;
    unpinAll(): void;
    private updateDepths;
    private applyForces;
    fr91(): void;
}
export {};
//# sourceMappingURL=ForceDirectedGraph.d.ts.map