{
  "version": 3,
  "sources": ["../../../tslib/dist/collections/arrayClear.js", "../../../tslib/dist/animation/tween.js", "../../../tslib/dist/typeChecks.js", "../../../tslib/dist/collections/arrayRemoveAt.js", "../../../tslib/dist/events/EventBase.js", "../../../tslib/dist/collections/mapJoin.js", "../../../tslib/dist/flags.js", "../../../tslib/dist/gis/Datum.js", "../../../tslib/dist/gis/UTMPoint.js", "../../../tslib/dist/math/angleClamp.js", "../../../tslib/dist/progress/BaseProgress.js", "../../../tslib/dist/progress/ChildProgressCallback.js", "../../../tslib/dist/progress/BaseParentProgressCallback.js", "../../../tslib/dist/progress/IProgress.js", "../../../tslib/dist/progress/progressPopper.js", "../../../tslib/dist/units/fileSize.js", "../../../tslib/dist/units/length.js", "../../../worker/dist/workers/WorkerServer.js", "../../../browser/dist/fullscreen.js", "../../../browser/dist/typeChecks.js", "../../../browser/dist/workers/WorkerClient.js", "../../../browser/dist/workers/WorkerPool.js", "../../src/ResponseTranslator.ts", "../../src/FetchingServiceImpl.ts", "../../src/FetchingServiceServer.ts", "../../src/fetcher/index.ts"],
  "sourcesContent": ["/**\r\n * Empties out an array, returning the items that were in the array.\r\n *\r\n * @param arr the array to empty\r\n */\r\nexport function arrayClear(arr) {\r\n    return arr.splice(0);\r\n}\r\n", "/**\r\n * Different modes of animating a single value from 0 to 1.\r\n **/\r\nexport var TweenType;\r\n(function (TweenType) {\r\n    /**\r\n     * The most basic form of `tween, values increase in proportion to time, from\r\n     * 0 to 1 in the forward direction, then 1 to 0 in the reverse direction.\r\n     **/\r\n    TweenType[TweenType[\"Linear\"] = 0] = \"Linear\";\r\n    /**\r\n     * Values increase in proportion to time from -1 to 0 in the forward direction,\r\n     * then 0 to 1 in the reverse, rather than decreasing from 1 to 0.\r\n     **/\r\n    TweenType[TweenType[\"LinearContinuous\"] = 1] = \"LinearContinuous\";\r\n    /**\r\n     * Values increase in proportion to the square of time, from 0 to 1 in the forward direction,\r\n     * then 1 to 0 in the reverse direction.\r\n     **/\r\n    TweenType[TweenType[\"Quadratic\"] = 2] = \"Quadratic\";\r\n    /**\r\n     * Values increase in proportion to the square of time. from -1 to 0 in the forward direction,\r\n     * then 0 to 1 in the reverse direction.\r\n     **/\r\n    TweenType[TweenType[\"QuadraticContinuous\"] = 3] = \"QuadraticContinuous\";\r\n    TweenType[TweenType[\"Sine\"] = 4] = \"Sine\";\r\n    TweenType[TweenType[\"SineContinuous\"] = 5] = \"SineContinuous\";\r\n    /**\r\n     * Similar to <see cref=\"Sine\"/>, but values bump in the opposite direction slightly, before\r\n     * the beginning and the end of the curve.\r\n     **/\r\n    TweenType[TweenType[\"Bump\"] = 6] = \"Bump\";\r\n    /**\r\n     * Similar to <see cref=\"Sine\"/>, but values bump in the opposite direction slightly, before\r\n     * the beginning and the end of the curve.\r\n     **/\r\n    TweenType[TweenType[\"BumpContinuous\"] = 7] = \"BumpContinuous\";\r\n    TweenType[TweenType[\"Jump\"] = 8] = \"Jump\";\r\n})(TweenType || (TweenType = {}));\r\n/**\r\n * Implementations for each of the values in <see cref=\"TweenType\"/>.\r\n * All functions receive a value t, representing the proportion of the way through the animation process we are\r\n * calculating. All functions take an extra `k` parameter, for scaling tertiary effects; most functions do not use it.\r\n * All functions return a value v, mapping the value t to one of the desired 'tween shapes.\r\n **/\r\nexport function isContinuous(tween) {\r\n    return tween == TweenType.LinearContinuous\r\n        || tween == TweenType.QuadraticContinuous\r\n        || tween == TweenType.SineContinuous\r\n        || tween == TweenType.BumpContinuous;\r\n}\r\n/**\r\n * A lookup for the tween functions, so we don't have to use reflection every time we want one.\r\n **/\r\nexport const functions = /*@__PURE__*/ new Map([\r\n    [TweenType.Linear, linear],\r\n    [TweenType.LinearContinuous, linearContinuous],\r\n    [TweenType.Quadratic, quadratic],\r\n    [TweenType.QuadraticContinuous, quadraticContinuous],\r\n    [TweenType.Sine, sine],\r\n    [TweenType.SineContinuous, sineContinuous],\r\n    [TweenType.Bump, bump],\r\n    [TweenType.BumpContinuous, bumpContinuous],\r\n    [TweenType.Jump, jump]\r\n]);\r\nexport function linear(t) {\r\n    return t;\r\n}\r\nexport function quadratic(t) {\r\n    return t * t;\r\n}\r\nexport function sine(t) {\r\n    var a = t * Math.PI;\r\n    return Math.sin(a);\r\n}\r\nexport function bump(t, k) {\r\n    var a = t * Math.PI;\r\n    return ((0.5 * (1 - Math.cos(a))) - (k * Math.sin(2 * a)));\r\n}\r\nexport function jump(t, k) {\r\n    var a = (t - 0.5) * Math.PI;\r\n    return t * t + k * Math.cos(a);\r\n}\r\nexport function linearContinuous(t, _k, d) {\r\n    if (d) {\r\n        return t - 1;\r\n    }\r\n    else {\r\n        return 1 - t;\r\n    }\r\n}\r\nexport function quadraticContinuous(t, _k, d) {\r\n    t = linearContinuous(t, null, d);\r\n    return Math.sign(t) * quadratic(t);\r\n}\r\nexport function sineContinuous(t, _k, d) {\r\n    t = linearContinuous(t, null, d);\r\n    return sine(t);\r\n}\r\nexport function bumpContinuous(t, k, d) {\r\n    t = linearContinuous(t, null, d);\r\n    return bump(t, k);\r\n}\r\n", "function t(o, s, c) {\r\n    return typeof o === s\r\n        || o instanceof c;\r\n}\r\nexport function isFunction(obj) {\r\n    return t(obj, \"function\", Function);\r\n}\r\nexport function isString(obj) {\r\n    return t(obj, \"string\", String);\r\n}\r\nexport function isBoolean(obj) {\r\n    return t(obj, \"boolean\", Boolean);\r\n}\r\nexport function isNumber(obj) {\r\n    return t(obj, \"number\", Number);\r\n}\r\n/**\r\n * Check a value to see if it is of a number type\r\n * and is not the special NaN value.\r\n */\r\nexport function isGoodNumber(obj) {\r\n    return isNumber(obj)\r\n        && !Number.isNaN(obj);\r\n}\r\nexport function isObject(obj) {\r\n    return isDefined(obj)\r\n        && t(obj, \"object\", Object);\r\n}\r\nexport function isPromise(obj) {\r\n    return obj instanceof Promise;\r\n}\r\nexport function isDate(obj) {\r\n    return obj instanceof Date;\r\n}\r\nexport function isArray(obj) {\r\n    return obj instanceof Array;\r\n}\r\nexport function assertNever(x, msg) {\r\n    throw new Error((msg || \"Unexpected object: \") + x);\r\n}\r\nexport function isNullOrUndefined(obj) {\r\n    return obj === null\r\n        || obj === undefined;\r\n}\r\nexport function isDefined(obj) {\r\n    return !isNullOrUndefined(obj);\r\n}\r\nexport function isEventListener(obj) {\r\n    return isFunction(obj);\r\n}\r\nexport function isEventListenerObject(obj) {\r\n    return !isEventListener(obj);\r\n}\r\nexport function isArrayBufferView(obj) {\r\n    return obj instanceof Uint8Array\r\n        || obj instanceof Uint8ClampedArray\r\n        || obj instanceof Int8Array\r\n        || obj instanceof Uint16Array\r\n        || obj instanceof Int16Array\r\n        || obj instanceof Uint32Array\r\n        || obj instanceof Int32Array\r\n        || obj instanceof Float32Array\r\n        || obj instanceof Float64Array\r\n        || \"BigUint64Array\" in globalThis && obj instanceof globalThis[\"BigUint64Array\"]\r\n        || \"BigInt64Array\" in globalThis && obj instanceof globalThis[\"BigInt64Array\"];\r\n}\r\n", "/**\r\n * Removes an item at the given index from an array.\r\n */\r\nexport function arrayRemoveAt(arr, idx) {\r\n    return arr.splice(idx, 1)[0];\r\n}\r\n", "import { arrayClear } from \"../collections/arrayClear\";\r\nimport { arrayRemoveAt } from \"../collections/arrayRemoveAt\";\r\nimport { isBoolean, isDefined, isFunction, isNullOrUndefined } from \"../typeChecks\";\r\nconst allListeners = new WeakMap();\r\nexport class EventBase {\r\n    listeners = new Map();\r\n    listenerOptions = new Map();\r\n    constructor() {\r\n        allListeners.set(this, this.listeners);\r\n    }\r\n    addEventListener(type, callback, options) {\r\n        if (isFunction(callback)) {\r\n            let listeners = this.listeners.get(type);\r\n            if (!listeners) {\r\n                listeners = new Array();\r\n                this.listeners.set(type, listeners);\r\n            }\r\n            if (!listeners.find(c => c === callback)) {\r\n                listeners.push(callback);\r\n                if (options) {\r\n                    this.listenerOptions.set(callback, options);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    removeEventListener(type, callback) {\r\n        if (isFunction(callback)) {\r\n            const listeners = this.listeners.get(type);\r\n            if (listeners) {\r\n                this.removeListener(listeners, callback);\r\n            }\r\n        }\r\n    }\r\n    removeListener(listeners, callback) {\r\n        const idx = listeners.findIndex(c => c === callback);\r\n        if (idx >= 0) {\r\n            arrayRemoveAt(listeners, idx);\r\n            if (this.listenerOptions.has(callback)) {\r\n                this.listenerOptions.delete(callback);\r\n            }\r\n        }\r\n    }\r\n    dispatchEvent(evt) {\r\n        const listeners = this.listeners.get(evt.type);\r\n        if (listeners) {\r\n            for (const callback of listeners) {\r\n                const options = this.listenerOptions.get(callback);\r\n                if (isDefined(options)\r\n                    && !isBoolean(options)\r\n                    && options.once) {\r\n                    this.removeListener(listeners, callback);\r\n                }\r\n                callback.call(this, evt);\r\n            }\r\n        }\r\n        return !evt.defaultPrevented;\r\n    }\r\n}\r\nexport class TypedEvent extends Event {\r\n    get type() {\r\n        return super.type;\r\n    }\r\n    constructor(type) {\r\n        super(type);\r\n    }\r\n}\r\nexport class TypedEventBase extends EventBase {\r\n    bubblers = new Set();\r\n    scopes = new WeakMap();\r\n    addBubbler(bubbler) {\r\n        this.bubblers.add(bubbler);\r\n    }\r\n    removeBubbler(bubbler) {\r\n        this.bubblers.delete(bubbler);\r\n    }\r\n    addEventListener(type, callback, options) {\r\n        super.addEventListener(type, callback, options);\r\n    }\r\n    removeEventListener(type, callback) {\r\n        super.removeEventListener(type, callback);\r\n    }\r\n    addScopedEventListener(scope, type, callback, options) {\r\n        if (!this.scopes.has(scope)) {\r\n            this.scopes.set(scope, []);\r\n        }\r\n        this.scopes.get(scope).push([type, callback]);\r\n        this.addEventListener(type, callback, options);\r\n    }\r\n    removeScope(scope) {\r\n        const listeners = this.scopes.get(scope);\r\n        if (listeners) {\r\n            this.scopes.delete(scope);\r\n            for (const [type, listener] of listeners) {\r\n                this.removeEventListener(type, listener);\r\n            }\r\n        }\r\n    }\r\n    clearEventListeners(type) {\r\n        const listeners = allListeners.get(this);\r\n        for (const [evtName, handlers] of listeners) {\r\n            if (isNullOrUndefined(type) || type === evtName) {\r\n                arrayClear(handlers);\r\n                listeners.delete(evtName);\r\n            }\r\n        }\r\n    }\r\n    dispatchEvent(evt) {\r\n        if (!super.dispatchEvent(evt)) {\r\n            return false;\r\n        }\r\n        for (const bubbler of this.bubblers) {\r\n            if (!bubbler.dispatchEvent(evt)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n", "import { isDefined } from \"../typeChecks\";\r\nexport function mapJoin(dest, ...sources) {\r\n    for (const source of sources) {\r\n        if (isDefined(source)) {\r\n            for (const [key, value] of source) {\r\n                dest.set(key, value);\r\n            }\r\n        }\r\n    }\r\n    return dest;\r\n}\r\n", "export function isChrome() {\r\n    return \"chrome\" in globalThis && !navigator.userAgent.match(\"CriOS\");\r\n}\r\nexport function isFirefox() {\r\n    return \"InstallTrigger\" in globalThis;\r\n}\r\nexport function isSafari() {\r\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n}\r\nexport function isMacOS() {\r\n    return /^mac/i.test(navigator.platform);\r\n}\r\nexport function isIOS() {\r\n    return /iP(ad|hone|od)/.test(navigator.platform)\r\n        || /Macintosh(.*?) FxiOS(.*?)\\//.test(navigator.platform)\r\n        || isMacOS()\r\n            && \"maxTouchPoints\" in navigator\r\n            && navigator.maxTouchPoints > 2;\r\n}\r\nexport function isApple() {\r\n    return isIOS()\r\n        || isMacOS();\r\n}\r\nexport function isMobileVR() {\r\n    return /Mobile VR/.test(navigator.userAgent)\r\n        || isOculusBrowser;\r\n}\r\nexport function hasWebXR() {\r\n    return \"xr\" in navigator\r\n        && \"isSessionSupported\" in navigator.xr;\r\n}\r\nexport function hasWebVR() {\r\n    return \"getVRDisplays\" in navigator;\r\n}\r\nexport function hasVR() {\r\n    return hasWebXR() || hasWebVR();\r\n}\r\nexport function isMobile() {\r\n    return /Android/.test(navigator.userAgent)\r\n        || /BlackBerry/.test(navigator.userAgent)\r\n        || /(UC Browser |UCWEB)/.test(navigator.userAgent)\r\n        || isIOS()\r\n        || isMobileVR();\r\n}\r\nexport function isDesktop() {\r\n    return !isMobile();\r\n}\r\nconst oculusBrowserPattern = /OculusBrowser\\/(\\d+)\\.(\\d+)\\.(\\d+)/i;\r\nconst oculusMatch = navigator.userAgent.match(oculusBrowserPattern);\r\nexport const isOculusBrowser = !!oculusMatch;\r\nexport const oculusBrowserVersion = isOculusBrowser && {\r\n    major: parseFloat(oculusMatch[1]),\r\n    minor: parseFloat(oculusMatch[2]),\r\n    patch: parseFloat(oculusMatch[3])\r\n};\r\nexport const isOculusGo = isOculusBrowser && /pacific/i.test(navigator.userAgent);\r\nexport const isOculusQuest = isOculusBrowser && /quest/i.test(navigator.userAgent);\r\nexport const isOculusQuest2 = isOculusBrowser && /quest 2/i.test(navigator.userAgent);\r\nexport const isOculusQuest1 = isOculusBrowser && !isOculusQuest2;\r\n", "const FalseNorthing = 10000000;\r\nconst invF = 298.257223563;\r\nconst equatorialRadius = 6378137;\r\nconst pointScaleFactor = 0.9996;\r\nconst E0 = 500000;\r\nconst flattening = 1 / invF;\r\nconst flatteningComp = 1 - flattening;\r\nconst n = flattening / (2 - flattening);\r\nconst A = (equatorialRadius / (1 + n)) * (1 + (n * n / 4) + (n * n * n * n / 64));\r\nconst e = Math.sqrt(1 - (flatteningComp * flatteningComp));\r\nconst esq = 1 - (flatteningComp * flatteningComp);\r\nconst e0sq = e * e / (1 - (e * e));\r\nconst alpha1 = 1 - (esq * (0.25 + (esq * ((3 / 64) + (5 * esq / 256)))));\r\nconst alpha2 = esq * ((3 / 8) + (esq * ((3 / 32) + (45 * esq / 1024))));\r\nconst alpha3 = esq * esq * ((15 / 256) + (esq * 45 / 1024));\r\nconst alpha4 = esq * esq * esq * (35 / 3072);\r\nconst beta = [\r\n    (n / 2) - (2 * n * n / 3) + (37 * n * n * n / 96),\r\n    (n * n / 48) + (n * n * n / 15),\r\n    17 * n * n * n / 480\r\n];\r\nconst delta = [\r\n    (2 * n) - (2 * n * n / 3),\r\n    (7 * n * n / 3) - (8 * n * n * n / 5),\r\n    56 * n * n * n / 15\r\n];\r\nexport const DatumWGS_84 = {\r\n    FalseNorthing,\r\n    equatorialRadius,\r\n    pointScaleFactor,\r\n    E0,\r\n    A,\r\n    flattening,\r\n    e,\r\n    esq,\r\n    e0sq,\r\n    alpha1,\r\n    alpha2,\r\n    alpha3,\r\n    alpha4,\r\n    beta,\r\n    delta\r\n};\r\n", "import { vec2, vec3 } from \"gl-matrix\";\r\nimport { deg2rad } from \"../math/deg2rad\";\r\nimport { isDefined, isObject } from \"../typeChecks\";\r\nimport { DatumWGS_84 } from \"./Datum\";\r\nimport { LatLngPoint } from \"./LatLngPoint\";\r\n/**\r\n * The globe hemispheres in which the UTM point could sit.\r\n **/\r\nexport var GlobeHemisphere;\r\n(function (GlobeHemisphere) {\r\n    GlobeHemisphere[GlobeHemisphere[\"Northern\"] = 0] = \"Northern\";\r\n    GlobeHemisphere[GlobeHemisphere[\"Southern\"] = 1] = \"Southern\";\r\n})(GlobeHemisphere || (GlobeHemisphere = {}));\r\n/**\r\n * The Universal Transverse Mercator (UTM) conformal projection uses a 2-dimensional Cartesian\r\n * coordinate system to give locations on the surface of the Earth. Like the traditional method\r\n * of latitude and longitude, it is a horizontal position representation, i.e. it is used to\r\n * identify locations on the Earth independently of vertical position. However, it differs from\r\n * that method in several respects.\r\n *\r\n * The UTM system is not a single map projection. The system instead divides the Earth into sixty\r\n * zones, each being a six-degree band of longitude, and uses a secant transverse Mercator\r\n * projection in each zone.\r\n **/\r\nexport class UTMPoint {\r\n    /**\r\n     * The east/west component of the coordinate.\r\n     **/\r\n    get easting() {\r\n        return this._easting;\r\n    }\r\n    _easting;\r\n    /**\r\n     * The north/south component of the coordinate.\r\n     **/\r\n    get northing() {\r\n        return this._northing;\r\n    }\r\n    _northing;\r\n    /**\r\n     * An altitude component.\r\n     **/\r\n    get altitude() {\r\n        return this._altitude;\r\n    }\r\n    _altitude;\r\n    /**\r\n     * The UTM Zone for which this coordinate represents.\r\n     **/\r\n    get zone() {\r\n        return this._zone;\r\n    }\r\n    _zone;\r\n    /**\r\n     * The hemisphere in which the UTM point sits.\r\n     **/\r\n    get hemisphere() {\r\n        return this._hemisphere;\r\n    }\r\n    _hemisphere;\r\n    constructor(eastingOrCopy, northing, altitude, zone, hemisphere) {\r\n        if (isObject(eastingOrCopy)) {\r\n            this._easting = eastingOrCopy.easting;\r\n            this._northing = eastingOrCopy.northing;\r\n            this._altitude = eastingOrCopy.altitude;\r\n            this._zone = eastingOrCopy.zone;\r\n            this._hemisphere = eastingOrCopy.hemisphere;\r\n        }\r\n        else {\r\n            this._easting = eastingOrCopy || 0;\r\n            this._northing = northing || 0;\r\n            this._altitude = altitude || 0;\r\n            this._zone = zone || 0;\r\n            this._hemisphere = hemisphere || GlobeHemisphere.Northern;\r\n        }\r\n    }\r\n    toJSON() {\r\n        return JSON.stringify({\r\n            easting: this.easting,\r\n            northing: this.northing,\r\n            altitude: this.altitude,\r\n            zone: this.zone,\r\n            hemisphere: this.hemisphere\r\n        });\r\n    }\r\n    toString() {\r\n        return `(${this.easting}, ${this.northing}, ${this.altitude}) zone ${this.zone}`;\r\n    }\r\n    equals(other) {\r\n        return isDefined(other)\r\n            && this.hemisphere == other.hemisphere\r\n            && this.easting == other.easting\r\n            && this.northing == other.northing\r\n            && this.altitude == other.altitude\r\n            && this.zone == other.zone;\r\n    }\r\n    /**\r\n     * Converts this UTMPoint to a Latitude/Longitude point using the WGS-84 datum. The\r\n     * coordinate pair's units will be in meters, and should be usable to make distance\r\n     * calculations over short distances.\r\n     * reference: http://www.uwgb.edu/dutchs/usefuldata/utmformulas.htm\r\n     **/\r\n    fromLatLng(latLng) {\r\n        const hemisphere = latLng.lat < 0\r\n            ? GlobeHemisphere.Southern\r\n            : GlobeHemisphere.Northern;\r\n        const phi = deg2rad(latLng.lat);\r\n        const sinPhi = Math.sin(phi);\r\n        const cosPhi = Math.cos(phi);\r\n        const sin2Phi = 2 * sinPhi * cosPhi;\r\n        const cos2Phi = (2 * cosPhi * cosPhi) - 1;\r\n        const sin4Phi = 2 * sin2Phi * cos2Phi;\r\n        const cos4Phi = (2 * cos2Phi * cos2Phi) - 1;\r\n        const sin6Phi = (sin4Phi * cos2Phi) + (cos4Phi * sin2Phi);\r\n        const tanPhi = sinPhi / cosPhi;\r\n        const ePhi = DatumWGS_84.e * sinPhi;\r\n        const N = DatumWGS_84.equatorialRadius / Math.sqrt(1 - (ePhi * ePhi));\r\n        const utmz = 1 + ((latLng.lng + 180) / 6) | 0;\r\n        const zcm = 3 + (6 * (utmz - 1)) - 180;\r\n        const A = deg2rad(latLng.lng - zcm) * cosPhi;\r\n        const M = DatumWGS_84.equatorialRadius * ((phi * DatumWGS_84.alpha1)\r\n            - (sin2Phi * DatumWGS_84.alpha2)\r\n            + (sin4Phi * DatumWGS_84.alpha3)\r\n            - (sin6Phi * DatumWGS_84.alpha4));\r\n        // Easting\r\n        const T = tanPhi * tanPhi;\r\n        const C = DatumWGS_84.e0sq * cosPhi * cosPhi;\r\n        const Asqr = A * A;\r\n        const Tsqr = T * T;\r\n        const x0 = 1 - T + C;\r\n        const x1 = 5 - (18 * T) + Tsqr + (72 * C) - (58 * DatumWGS_84.e0sq);\r\n        const x2 = Asqr * x1 / 120;\r\n        const x3 = (x0 / 6) + x2;\r\n        const x4 = 1 + (Asqr * x3);\r\n        const easting = DatumWGS_84.pointScaleFactor * N * A * x4 + DatumWGS_84.E0;\r\n        // Northing\r\n        let northing = DatumWGS_84.pointScaleFactor * (M + (N * tanPhi * (Asqr * (0.5 + (Asqr * (((5 - T + (9 * C) + (4 * C * C)) / 24) + (Asqr * (61 - (58 * T) + Tsqr + (600 * C) - (330 * DatumWGS_84.e0sq)) / 720)))))));\r\n        if (hemisphere == GlobeHemisphere.Southern) {\r\n            northing += DatumWGS_84.FalseNorthing;\r\n        }\r\n        this._easting = easting;\r\n        this._northing = northing;\r\n        this._altitude = latLng.alt || 0;\r\n        this._zone = utmz;\r\n        this._hemisphere = hemisphere;\r\n        return this;\r\n    }\r\n    /**\r\n     * Converts this UTMPoint to a Latitude/Longitude point using the WGS-84 datum. The\r\n     * coordinate pair's units will be in meters, and should be usable to make distance\r\n     * calculations over short distances.\r\n     * reference: http://www.uwgb.edu/dutchs/usefuldata/utmformulas.htm\r\n     **/\r\n    toLatLng() {\r\n        return new LatLngPoint().fromUTM(this);\r\n    }\r\n    fromVec2(arr, zone, hemisphere) {\r\n        this._easting = arr[0];\r\n        this._northing = -arr[1];\r\n        this._altitude = 0;\r\n        this._zone = zone;\r\n        this._hemisphere = hemisphere;\r\n        return this;\r\n    }\r\n    fromVec3(arr, zone, hemisphere) {\r\n        this._easting = arr[0];\r\n        this._altitude = arr[1];\r\n        this._northing = -arr[2];\r\n        this._zone = zone;\r\n        this._hemisphere = hemisphere;\r\n        return this;\r\n    }\r\n    copy(other) {\r\n        this._easting = other.easting;\r\n        this._northing = other.northing;\r\n        this._altitude = other.altitude;\r\n        this._zone = other.zone;\r\n        this._hemisphere = other.hemisphere;\r\n        return this;\r\n    }\r\n    toVec2() {\r\n        const v = vec2.create();\r\n        vec2.set(v, this.easting, -this.northing);\r\n        return v;\r\n    }\r\n    toVec3() {\r\n        const v = vec3.create();\r\n        vec3.set(v, this.easting, this.altitude, -this.northing);\r\n        return v;\r\n    }\r\n}\r\n", "const Tau = 2 * Math.PI;\r\nexport function angleClamp(v) {\r\n    return ((v % Tau) + Tau) % Tau;\r\n}\r\n", "import { arrayClear } from \"../collections/arrayClear\";\r\nexport class BaseProgress {\r\n    attached = new Array();\r\n    soFar = null;\r\n    total = null;\r\n    msg = null;\r\n    est = null;\r\n    report(soFar, total, msg, est) {\r\n        this.soFar = soFar;\r\n        this.total = total;\r\n        this.msg = msg;\r\n        this.est = est;\r\n        for (const attach of this.attached) {\r\n            attach.report(soFar, total, msg, est);\r\n        }\r\n    }\r\n    attach(prog) {\r\n        this.attached.push(prog);\r\n        prog.report(this.soFar, this.total, this.msg, this.est);\r\n    }\r\n    end() {\r\n        this.report(1, 1, \"done\");\r\n        this.soFar = null;\r\n        this.total = null;\r\n        this.msg = null;\r\n        this.est = null;\r\n        arrayClear(this.attached);\r\n    }\r\n}\r\n", "import { BaseProgress } from \"./BaseProgress\";\r\nexport class ChildProgressCallback extends BaseProgress {\r\n    i;\r\n    prog;\r\n    constructor(i, prog) {\r\n        super();\r\n        this.i = i;\r\n        this.prog = prog;\r\n    }\r\n    report(soFar, total, msg, est) {\r\n        super.report(soFar, total, msg, est);\r\n        this.prog.update(this.i, soFar, total, msg);\r\n    }\r\n}\r\n", "import { ChildProgressCallback } from \"./ChildProgressCallback\";\r\nexport class BaseParentProgressCallback {\r\n    prog;\r\n    weightTotal = 0;\r\n    start;\r\n    subProgressCallbacks = new Array();\r\n    subProgressWeights = new Array();\r\n    subProgressValues = new Array();\r\n    constructor(prog) {\r\n        this.prog = prog;\r\n        this.start = performance.now();\r\n        for (let i = 0; i < this.subProgressWeights.length; ++i) {\r\n            this.subProgressValues[i] = 0;\r\n            this.subProgressCallbacks[i] = new ChildProgressCallback(i, this);\r\n        }\r\n    }\r\n    addSubProgress(weight) {\r\n        weight = weight || 1;\r\n        this.weightTotal += weight;\r\n        this.subProgressWeights.push(weight);\r\n        this.subProgressValues.push(0);\r\n        const child = new ChildProgressCallback(this.subProgressCallbacks.length, this);\r\n        this.subProgressCallbacks.push(child);\r\n        return child;\r\n    }\r\n    update(i, subSoFar, subTotal, msg) {\r\n        if (this.prog) {\r\n            this.subProgressValues[i] = subSoFar / subTotal;\r\n            let soFar = 0;\r\n            for (let j = 0; j < this.subProgressWeights.length; ++j) {\r\n                soFar += this.subProgressValues[j] * this.subProgressWeights[j];\r\n            }\r\n            const end = performance.now();\r\n            const delta = end - this.start;\r\n            const est = this.start - end + delta * this.weightTotal / soFar;\r\n            this.prog.report(soFar, this.weightTotal, msg, est);\r\n        }\r\n    }\r\n    ;\r\n}\r\n", "import { isDefined, isFunction } from \"../typeChecks\";\r\nexport function isProgressCallback(obj) {\r\n    return isDefined(obj)\r\n        && isFunction(obj.report)\r\n        && isFunction(obj.attach)\r\n        && isFunction(obj.end);\r\n}\r\n", "import { BaseParentProgressCallback } from \"./BaseParentProgressCallback\";\r\nexport function progressPopper(progress) {\r\n    return new PoppableParentProgressCallback(progress);\r\n}\r\nexport class PoppableParentProgressCallback extends BaseParentProgressCallback {\r\n    pop(weight) {\r\n        return this.addSubProgress(weight);\r\n    }\r\n}\r\n", "const labels = new Map([\r\n    [2, new Map([\r\n            [0, \"B\"],\r\n            [1, \"KiB\"],\r\n            [2, \"MiB\"],\r\n            [3, \"GiB\"],\r\n            [4, \"TiB\"]\r\n        ])],\r\n    [10, new Map([\r\n            [0, \"B\"],\r\n            [1, \"KB\"],\r\n            [2, \"MB\"],\r\n            [3, \"GB\"],\r\n            [4, \"TB\"]\r\n        ])]\r\n]);\r\nexport function formatBytes(value, base = 10) {\r\n    const isNegative = value < 0;\r\n    value = Math.abs(value);\r\n    const systemBase = base === 2 ? 1024 : 1000;\r\n    let size = Math.min(4, Math.floor(Math.log(value) / Math.log(systemBase)));\r\n    let divisor = Math.pow(systemBase, size);\r\n    if (2 * value >= systemBase * divisor && size < 4) {\r\n        size++;\r\n        divisor *= systemBase;\r\n    }\r\n    const levels = labels.get(base);\r\n    const label = levels.get(size);\r\n    const converted = value / divisor;\r\n    const str = `${isNegative ? \"-\" : \"\"}${converted.toFixed(2)} ${label}`;\r\n    return str;\r\n}\r\n", "const MICROMETERS_PER_MILLIMETER = 1000;\r\nconst MILLIMETERS_PER_CENTIMETER = 10;\r\nconst CENTIMETERS_PER_INCH = 2.54;\r\nconst CENTIMETERS_PER_METER = 100;\r\nconst INCHES_PER_HAND = 4;\r\nconst HANDS_PER_FOOT = 3;\r\nconst FEET_PER_YARD = 3;\r\nconst FEET_PER_ROD = 16.5;\r\nconst METERS_PER_KILOMETER = 1000;\r\nconst RODS_PER_FURLONG = 40;\r\nconst FURLONGS_PER_MILE = 8;\r\nconst MICROMETERS_PER_CENTIMETER = MICROMETERS_PER_MILLIMETER * MILLIMETERS_PER_CENTIMETER;\r\nconst MICROMETERS_PER_INCH = MICROMETERS_PER_CENTIMETER * CENTIMETERS_PER_INCH;\r\nconst MICROMETERS_PER_HAND = MICROMETERS_PER_INCH * INCHES_PER_HAND;\r\nconst MICROMETERS_PER_FOOT = MICROMETERS_PER_HAND * HANDS_PER_FOOT;\r\nconst MICROMETERS_PER_YARD = MICROMETERS_PER_FOOT * FEET_PER_YARD;\r\nconst MICROMETERS_PER_METER = MICROMETERS_PER_CENTIMETER * CENTIMETERS_PER_METER;\r\nconst MICROMETERS_PER_ROD = MICROMETERS_PER_FOOT * FEET_PER_ROD;\r\nconst MICROMETERS_PER_FURLONG = MICROMETERS_PER_ROD * RODS_PER_FURLONG;\r\nconst MICROMETERS_PER_KILOMETER = MICROMETERS_PER_METER * METERS_PER_KILOMETER;\r\nconst MICROMETERS_PER_MILE = MICROMETERS_PER_FURLONG * FURLONGS_PER_MILE;\r\nconst MILLIMETERS_PER_INCH = MILLIMETERS_PER_CENTIMETER * CENTIMETERS_PER_INCH;\r\nconst MILLIMETERS_PER_HAND = MILLIMETERS_PER_INCH * INCHES_PER_HAND;\r\nconst MILLIMETERS_PER_FOOT = MILLIMETERS_PER_HAND * HANDS_PER_FOOT;\r\nconst MILLIMETERS_PER_YARD = MILLIMETERS_PER_FOOT * FEET_PER_YARD;\r\nconst MILLIMETERS_PER_METER = MILLIMETERS_PER_CENTIMETER * CENTIMETERS_PER_METER;\r\nconst MILLIMETERS_PER_ROD = MILLIMETERS_PER_FOOT * FEET_PER_ROD;\r\nconst MILLIMETERS_PER_FURLONG = MILLIMETERS_PER_ROD * RODS_PER_FURLONG;\r\nconst MILLIMETERS_PER_KILOMETER = MILLIMETERS_PER_METER * METERS_PER_KILOMETER;\r\nconst MILLIMETERS_PER_MILE = MILLIMETERS_PER_FURLONG * FURLONGS_PER_MILE;\r\nconst CENTIMETERS_PER_HAND = CENTIMETERS_PER_INCH * INCHES_PER_HAND;\r\nconst CENTIMETERS_PER_FOOT = CENTIMETERS_PER_HAND * HANDS_PER_FOOT;\r\nconst CENTIMETERS_PER_YARD = CENTIMETERS_PER_FOOT * FEET_PER_YARD;\r\nconst CENTIMETERS_PER_ROD = CENTIMETERS_PER_FOOT * FEET_PER_ROD;\r\nconst CENTIMETERS_PER_FURLONG = CENTIMETERS_PER_ROD * RODS_PER_FURLONG;\r\nconst CENTIMETERS_PER_KILOMETER = CENTIMETERS_PER_METER * METERS_PER_KILOMETER;\r\nconst CENTIMETERS_PER_MILE = CENTIMETERS_PER_FURLONG * FURLONGS_PER_MILE;\r\nconst INCHES_PER_FOOT = INCHES_PER_HAND * HANDS_PER_FOOT;\r\nconst INCHES_PER_YARD = INCHES_PER_FOOT * FEET_PER_YARD;\r\nconst INCHES_PER_METER = CENTIMETERS_PER_METER / CENTIMETERS_PER_INCH;\r\nconst INCHES_PER_ROD = INCHES_PER_FOOT * FEET_PER_ROD;\r\nconst INCHES_PER_FURLONG = INCHES_PER_ROD * RODS_PER_FURLONG;\r\nconst INCHES_PER_KILOMETER = INCHES_PER_METER * METERS_PER_KILOMETER;\r\nconst INCHES_PER_MILE = INCHES_PER_FURLONG * FURLONGS_PER_MILE;\r\nconst HANDS_PER_YARD = HANDS_PER_FOOT * FEET_PER_YARD;\r\nconst HANDS_PER_METER = CENTIMETERS_PER_METER / CENTIMETERS_PER_HAND;\r\nconst HANDS_PER_ROD = HANDS_PER_FOOT * FEET_PER_ROD;\r\nconst HANDS_PER_FURLONG = HANDS_PER_ROD * RODS_PER_FURLONG;\r\nconst HANDS_PER_KILOMETER = HANDS_PER_METER * METERS_PER_KILOMETER;\r\nconst HANDS_PER_MILE = HANDS_PER_FURLONG * FURLONGS_PER_MILE;\r\nconst FEET_PER_METER = INCHES_PER_METER / INCHES_PER_FOOT;\r\nconst FEET_PER_FURLONG = FEET_PER_ROD * RODS_PER_FURLONG;\r\nconst FEET_PER_KILOMETER = FEET_PER_METER * METERS_PER_KILOMETER;\r\nconst FEET_PER_MILE = FEET_PER_FURLONG * FURLONGS_PER_MILE;\r\nconst YARDS_PER_METER = INCHES_PER_METER / INCHES_PER_YARD;\r\nconst YARDS_PER_ROD = FEET_PER_ROD / FEET_PER_YARD;\r\nconst YARDS_PER_FURLONG = YARDS_PER_ROD * RODS_PER_FURLONG;\r\nconst YARDS_PER_KILOMETER = YARDS_PER_METER * METERS_PER_KILOMETER;\r\nconst YARDS_PER_MILE = YARDS_PER_FURLONG * FURLONGS_PER_MILE;\r\nconst METERS_PER_ROD = FEET_PER_ROD / FEET_PER_METER;\r\nconst METERS_PER_FURLONG = METERS_PER_ROD * RODS_PER_FURLONG;\r\nconst METERS_PER_MILE = METERS_PER_FURLONG * FURLONGS_PER_MILE;\r\nconst RODS_PER_KILOMETER = METERS_PER_KILOMETER / METERS_PER_ROD;\r\nconst RODS_PER_MILE = RODS_PER_FURLONG * FURLONGS_PER_MILE;\r\nconst FURLONGS_PER_KILOMETER = METERS_PER_KILOMETER / METERS_PER_FURLONG;\r\nconst KILOMETERS_PER_MILE = FURLONGS_PER_MILE / FURLONGS_PER_KILOMETER;\r\nexport function centimeters2Micrometers(centimeters) {\r\n    return centimeters * MICROMETERS_PER_CENTIMETER;\r\n}\r\nexport function centimeters2Millimeters(centimeters) {\r\n    return centimeters * MILLIMETERS_PER_CENTIMETER;\r\n}\r\nexport function centimeters2Inches(centimeters) {\r\n    return centimeters / CENTIMETERS_PER_INCH;\r\n}\r\nexport function centimeters2Hands(centimeters) {\r\n    return centimeters / CENTIMETERS_PER_HAND;\r\n}\r\nexport function centimeters2Feet(centimeters) {\r\n    return centimeters / CENTIMETERS_PER_FOOT;\r\n}\r\nexport function centimeters2Yards(centimeters) {\r\n    return centimeters / CENTIMETERS_PER_YARD;\r\n}\r\nexport function centimeters2Meters(centimeters) {\r\n    return centimeters / CENTIMETERS_PER_METER;\r\n}\r\nexport function centimeters2Rods(centimeters) {\r\n    return centimeters / CENTIMETERS_PER_ROD;\r\n}\r\nexport function centimeters2Furlongs(centimeters) {\r\n    return centimeters / CENTIMETERS_PER_FURLONG;\r\n}\r\nexport function centimeters2Kilometers(centimeters) {\r\n    return centimeters / CENTIMETERS_PER_KILOMETER;\r\n}\r\nexport function centimeters2Miles(centimeters) {\r\n    return centimeters / CENTIMETERS_PER_MILE;\r\n}\r\nexport function feet2Micrometers(feet) {\r\n    return feet * MICROMETERS_PER_FOOT;\r\n}\r\nexport function feet2Millimeters(feet) {\r\n    return feet * MILLIMETERS_PER_FOOT;\r\n}\r\nexport function feet2Centimeters(feet) {\r\n    return feet * CENTIMETERS_PER_FOOT;\r\n}\r\nexport function feet2Inches(feet) {\r\n    return feet * INCHES_PER_FOOT;\r\n}\r\nexport function feet2Hands(feet) {\r\n    return feet * HANDS_PER_FOOT;\r\n}\r\nexport function feet2Yards(feet) {\r\n    return feet / FEET_PER_YARD;\r\n}\r\nexport function feet2Meters(feet) {\r\n    return feet / FEET_PER_METER;\r\n}\r\nexport function feet2Rods(feet) {\r\n    return feet / FEET_PER_ROD;\r\n}\r\nexport function feet2Furlongs(feet) {\r\n    return feet / FEET_PER_FURLONG;\r\n}\r\nexport function feet2Kilometers(feet) {\r\n    return feet / FEET_PER_KILOMETER;\r\n}\r\nexport function feet2Miles(feet) {\r\n    return feet / FEET_PER_MILE;\r\n}\r\nexport function furlongs2Micrometers(furlongs) {\r\n    return furlongs * MICROMETERS_PER_FURLONG;\r\n}\r\nexport function furlongs2Millimeters(furlongs) {\r\n    return furlongs * MILLIMETERS_PER_FURLONG;\r\n}\r\nexport function furlongs2Centimeters(furlongs) {\r\n    return furlongs * CENTIMETERS_PER_FURLONG;\r\n}\r\nexport function furlongs2Inches(furlongs) {\r\n    return furlongs * INCHES_PER_FURLONG;\r\n}\r\nexport function furlongs2Hands(furlongs) {\r\n    return furlongs * HANDS_PER_FURLONG;\r\n}\r\nexport function furlongs2Feet(furlongs) {\r\n    return furlongs * FEET_PER_FURLONG;\r\n}\r\nexport function furlongs2Yards(furlongs) {\r\n    return furlongs * YARDS_PER_FURLONG;\r\n}\r\nexport function furlongs2Meters(furlongs) {\r\n    return furlongs * METERS_PER_FURLONG;\r\n}\r\nexport function furlongs2Rods(furlongs) {\r\n    return furlongs * RODS_PER_FURLONG;\r\n}\r\nexport function furlongs2Kilometers(furlongs) {\r\n    return furlongs / FURLONGS_PER_KILOMETER;\r\n}\r\nexport function furlongs2Miles(furlongs) {\r\n    return furlongs / FURLONGS_PER_MILE;\r\n}\r\nexport function hands2Micrometers(hands) {\r\n    return hands * MICROMETERS_PER_HAND;\r\n}\r\nexport function hands2Millimeters(hands) {\r\n    return hands * MILLIMETERS_PER_HAND;\r\n}\r\nexport function hands2Centimeters(hands) {\r\n    return hands * CENTIMETERS_PER_HAND;\r\n}\r\nexport function hands2Inches(hands) {\r\n    return hands * INCHES_PER_HAND;\r\n}\r\nexport function hands2Feet(hands) {\r\n    return hands / HANDS_PER_FOOT;\r\n}\r\nexport function hands2Yards(hands) {\r\n    return hands / HANDS_PER_YARD;\r\n}\r\nexport function hands2Meters(hands) {\r\n    return hands / HANDS_PER_METER;\r\n}\r\nexport function hands2Rods(hands) {\r\n    return hands / HANDS_PER_ROD;\r\n}\r\nexport function hands2Furlongs(hands) {\r\n    return hands / HANDS_PER_FURLONG;\r\n}\r\nexport function hands2Kilometers(hands) {\r\n    return hands / HANDS_PER_KILOMETER;\r\n}\r\nexport function hands2Miles(hands) {\r\n    return hands / HANDS_PER_MILE;\r\n}\r\nexport function inches2Micrometers(inches) {\r\n    return inches * MICROMETERS_PER_INCH;\r\n}\r\nexport function inches2Millimeters(inches) {\r\n    return inches * MILLIMETERS_PER_INCH;\r\n}\r\nexport function inches2Centimeters(inches) {\r\n    return inches * CENTIMETERS_PER_INCH;\r\n}\r\nexport function inches2Hands(inches) {\r\n    return inches / INCHES_PER_HAND;\r\n}\r\nexport function inches2Feet(inches) {\r\n    return inches / INCHES_PER_FOOT;\r\n}\r\nexport function inches2Yards(inches) {\r\n    return inches / INCHES_PER_YARD;\r\n}\r\nexport function inches2Meters(inches) {\r\n    return inches / INCHES_PER_METER;\r\n}\r\nexport function inches2Rods(inches) {\r\n    return inches / INCHES_PER_ROD;\r\n}\r\nexport function inches2Furlongs(inches) {\r\n    return inches / INCHES_PER_FURLONG;\r\n}\r\nexport function inches2Kilometers(inches) {\r\n    return inches / INCHES_PER_KILOMETER;\r\n}\r\nexport function inches2Miles(inches) {\r\n    return inches / INCHES_PER_MILE;\r\n}\r\nexport function kilometers2Micrometers(kilometers) {\r\n    return kilometers * MICROMETERS_PER_KILOMETER;\r\n}\r\nexport function kilometers2Millimeters(kilometers) {\r\n    return kilometers * MILLIMETERS_PER_KILOMETER;\r\n}\r\nexport function kilometers2Centimeters(kilometers) {\r\n    return kilometers * CENTIMETERS_PER_KILOMETER;\r\n}\r\nexport function kilometers2Inches(kilometers) {\r\n    return kilometers * INCHES_PER_KILOMETER;\r\n}\r\nexport function kilometers2Hands(kilometers) {\r\n    return kilometers * HANDS_PER_KILOMETER;\r\n}\r\nexport function kilometers2Feet(kilometers) {\r\n    return kilometers * FEET_PER_KILOMETER;\r\n}\r\nexport function kilometers2Yards(kilometers) {\r\n    return kilometers * YARDS_PER_KILOMETER;\r\n}\r\nexport function kilometers2Meters(kilometers) {\r\n    return kilometers * METERS_PER_KILOMETER;\r\n}\r\nexport function kilometers2Rods(kilometers) {\r\n    return kilometers * RODS_PER_KILOMETER;\r\n}\r\nexport function kilometers2Furlongs(kilometers) {\r\n    return kilometers * FURLONGS_PER_KILOMETER;\r\n}\r\nexport function kilometers2Miles(kilometers) {\r\n    return kilometers / KILOMETERS_PER_MILE;\r\n}\r\nexport function meters2Micrometers(meters) {\r\n    return meters * MICROMETERS_PER_METER;\r\n}\r\nexport function meters2Millimeters(meters) {\r\n    return meters * MILLIMETERS_PER_METER;\r\n}\r\nexport function meters2Centimeters(meters) {\r\n    return meters * CENTIMETERS_PER_METER;\r\n}\r\nexport function meters2Inches(meters) {\r\n    return meters * INCHES_PER_METER;\r\n}\r\nexport function meters2Hands(meters) {\r\n    return meters * HANDS_PER_METER;\r\n}\r\nexport function meters2Feet(meters) {\r\n    return meters * FEET_PER_METER;\r\n}\r\nexport function meters2Yards(meters) {\r\n    return meters * YARDS_PER_METER;\r\n}\r\nexport function meters2Rods(meters) {\r\n    return meters / METERS_PER_ROD;\r\n}\r\nexport function meters2Furlongs(meters) {\r\n    return meters / METERS_PER_FURLONG;\r\n}\r\nexport function meters2Kilometers(meters) {\r\n    return meters / METERS_PER_KILOMETER;\r\n}\r\nexport function meters2Miles(meters) {\r\n    return meters / METERS_PER_MILE;\r\n}\r\nexport function micrometers2Millimeters(micrometers) {\r\n    return micrometers / MICROMETERS_PER_MILLIMETER;\r\n}\r\nexport function micrometers2Centimeters(micrometers) {\r\n    return micrometers / MICROMETERS_PER_CENTIMETER;\r\n}\r\nexport function micrometers2Inches(micrometers) {\r\n    return micrometers / MICROMETERS_PER_INCH;\r\n}\r\nexport function micrometers2Hands(micrometers) {\r\n    return micrometers / MICROMETERS_PER_HAND;\r\n}\r\nexport function micrometers2Feet(micrometers) {\r\n    return micrometers / MICROMETERS_PER_FOOT;\r\n}\r\nexport function micrometers2Yards(micrometers) {\r\n    return micrometers / MICROMETERS_PER_YARD;\r\n}\r\nexport function micrometers2Meters(micrometers) {\r\n    return micrometers / MICROMETERS_PER_METER;\r\n}\r\nexport function micrometers2Rods(micrometers) {\r\n    return micrometers / MICROMETERS_PER_ROD;\r\n}\r\nexport function micrometers2Furlongs(micrometers) {\r\n    return micrometers / MICROMETERS_PER_FURLONG;\r\n}\r\nexport function micrometers2Kilometers(micrometers) {\r\n    return micrometers / MICROMETERS_PER_KILOMETER;\r\n}\r\nexport function micrometers2Miles(micrometers) {\r\n    return micrometers / MICROMETERS_PER_MILE;\r\n}\r\nexport function miles2Micrometers(miles) {\r\n    return miles * MICROMETERS_PER_MILE;\r\n}\r\nexport function miles2Millimeters(miles) {\r\n    return miles * MILLIMETERS_PER_MILE;\r\n}\r\nexport function miles2Centimeters(miles) {\r\n    return miles * CENTIMETERS_PER_MILE;\r\n}\r\nexport function miles2Inches(miles) {\r\n    return miles * INCHES_PER_MILE;\r\n}\r\nexport function miles2Hands(miles) {\r\n    return miles * HANDS_PER_MILE;\r\n}\r\nexport function miles2Feet(miles) {\r\n    return miles * FEET_PER_MILE;\r\n}\r\nexport function miles2Yards(miles) {\r\n    return miles * YARDS_PER_MILE;\r\n}\r\nexport function miles2Meters(miles) {\r\n    return miles * METERS_PER_MILE;\r\n}\r\nexport function miles2Rods(miles) {\r\n    return miles * RODS_PER_MILE;\r\n}\r\nexport function miles2Furlongs(miles) {\r\n    return miles * FURLONGS_PER_MILE;\r\n}\r\nexport function miles2Kilometers(miles) {\r\n    return miles * KILOMETERS_PER_MILE;\r\n}\r\nexport function millimeters2Micrometers(millimeters) {\r\n    return millimeters * MICROMETERS_PER_MILLIMETER;\r\n}\r\nexport function millimeters2Centimeters(millimeters) {\r\n    return millimeters / MILLIMETERS_PER_CENTIMETER;\r\n}\r\nexport function millimeters2Inches(millimeters) {\r\n    return millimeters / MILLIMETERS_PER_INCH;\r\n}\r\nexport function millimeters2Hands(millimeters) {\r\n    return millimeters / MILLIMETERS_PER_HAND;\r\n}\r\nexport function millimeters2Feet(millimeters) {\r\n    return millimeters / MILLIMETERS_PER_FOOT;\r\n}\r\nexport function millimeters2Yards(millimeters) {\r\n    return millimeters / MILLIMETERS_PER_YARD;\r\n}\r\nexport function millimeters2Meters(millimeters) {\r\n    return millimeters / MILLIMETERS_PER_METER;\r\n}\r\nexport function millimeters2Rods(millimeters) {\r\n    return millimeters / MILLIMETERS_PER_ROD;\r\n}\r\nexport function millimeters2Furlongs(millimeters) {\r\n    return millimeters / MILLIMETERS_PER_FURLONG;\r\n}\r\nexport function millimeters2Kilometers(millimeters) {\r\n    return millimeters / MILLIMETERS_PER_KILOMETER;\r\n}\r\nexport function millimeters2Miles(millimeters) {\r\n    return millimeters / MILLIMETERS_PER_MILE;\r\n}\r\nexport function rods2Micrometers(rods) {\r\n    return rods * MICROMETERS_PER_ROD;\r\n}\r\nexport function rods2Millimeters(rods) {\r\n    return rods * MILLIMETERS_PER_ROD;\r\n}\r\nexport function rods2Centimeters(rods) {\r\n    return rods * CENTIMETERS_PER_ROD;\r\n}\r\nexport function rods2Inches(rods) {\r\n    return rods * INCHES_PER_ROD;\r\n}\r\nexport function rods2Hands(rods) {\r\n    return rods * HANDS_PER_ROD;\r\n}\r\nexport function rods2Feet(rods) {\r\n    return rods * FEET_PER_ROD;\r\n}\r\nexport function rods2Yards(rods) {\r\n    return rods * YARDS_PER_ROD;\r\n}\r\nexport function rods2Meters(rods) {\r\n    return rods * METERS_PER_ROD;\r\n}\r\nexport function rods2Furlongs(rods) {\r\n    return rods / RODS_PER_FURLONG;\r\n}\r\nexport function rods2Kilometers(rods) {\r\n    return rods / RODS_PER_KILOMETER;\r\n}\r\nexport function rods2Miles(rods) {\r\n    return rods / RODS_PER_MILE;\r\n}\r\nexport function yards2Micrometers(yards) {\r\n    return yards * MICROMETERS_PER_YARD;\r\n}\r\nexport function yards2Millimeters(yards) {\r\n    return yards * MILLIMETERS_PER_YARD;\r\n}\r\nexport function yards2Centimeters(yards) {\r\n    return yards * CENTIMETERS_PER_YARD;\r\n}\r\nexport function yards2Inches(yards) {\r\n    return yards * INCHES_PER_YARD;\r\n}\r\nexport function yards2Hands(yards) {\r\n    return yards * HANDS_PER_YARD;\r\n}\r\nexport function yards2Feet(yards) {\r\n    return yards * FEET_PER_YARD;\r\n}\r\nexport function yards2Meters(yards) {\r\n    return yards / YARDS_PER_METER;\r\n}\r\nexport function yards2Rods(yards) {\r\n    return yards / YARDS_PER_ROD;\r\n}\r\nexport function yards2Furlongs(yards) {\r\n    return yards / YARDS_PER_FURLONG;\r\n}\r\nexport function yards2Kilometers(yards) {\r\n    return yards / YARDS_PER_KILOMETER;\r\n}\r\nexport function yards2Miles(yards) {\r\n    return yards / YARDS_PER_MILE;\r\n}\r\n", "import { BaseProgress, isArray, isDefined } from \"juniper-tslib\";\r\nclass WorkerServerProgress extends BaseProgress {\r\n    server;\r\n    taskID;\r\n    constructor(server, taskID) {\r\n        super();\r\n        this.server = server;\r\n        this.taskID = taskID;\r\n    }\r\n    /**\r\n     * Report progress through long-running invocations. If your invocable\r\n     * functions don't report progress, this can be safely ignored.\r\n     * @param soFar - how much of the process we've gone through.\r\n     * @param total - the total amount we need to go through.\r\n     * @param msg - an optional message to include as part of the progress update.\r\n     * @param est - an optional estimate of how many milliseconds are left in the progress.\r\n     */\r\n    report(soFar, total, msg, est) {\r\n        const message = {\r\n            type: \"progress\",\r\n            taskID: this.taskID,\r\n            soFar,\r\n            total,\r\n            msg,\r\n            est\r\n        };\r\n        this.server.postMessage(message);\r\n    }\r\n}\r\nexport class WorkerServer {\r\n    self;\r\n    methods = new Map();\r\n    /**\r\n     * Creates a new worker thread method call listener.\r\n     * @param self - the worker scope in which to listen.\r\n     */\r\n    constructor(self) {\r\n        this.self = self;\r\n        this.self.addEventListener(\"message\", (evt) => {\r\n            const data = evt.data;\r\n            this.callMethod(data);\r\n        });\r\n    }\r\n    postMessage(message, transferables) {\r\n        if (isDefined(transferables)) {\r\n            this.self.postMessage(message, transferables);\r\n        }\r\n        else {\r\n            this.self.postMessage(message);\r\n        }\r\n    }\r\n    callMethod(data) {\r\n        const method = this.methods.get(data.methodName);\r\n        if (method) {\r\n            try {\r\n                if (isArray(data.params)) {\r\n                    method(data.taskID, ...data.params);\r\n                }\r\n                else if (isDefined(data.params)) {\r\n                    method(data.taskID, data.params);\r\n                }\r\n                else {\r\n                    method(data.taskID);\r\n                }\r\n            }\r\n            catch (exp) {\r\n                this.onError(data.taskID, `method invocation error: ${data.methodName}(${exp.message || exp})`);\r\n            }\r\n        }\r\n        else {\r\n            this.onError(data.taskID, `method not found: ${data.methodName}`);\r\n        }\r\n    }\r\n    /**\r\n     * Report an error back to the calling thread.\r\n     * @param taskID - the invocation ID of the method that errored.\r\n     * @param errorMessage - what happened?\r\n     */\r\n    onError(taskID, errorMessage) {\r\n        const message = {\r\n            type: \"error\",\r\n            taskID,\r\n            errorMessage\r\n        };\r\n        this.postMessage(message);\r\n    }\r\n    /**\r\n     * Return back to the client.\r\n     * @param taskID - the invocation ID of the method that is returning.\r\n     * @param returnValue - the (optional) value to return.\r\n     * @param transferReturnValue - a mapping function to extract any Transferable objects from the return value.\r\n     */\r\n    onReturn(taskID, returnValue, transferReturnValue) {\r\n        let message = null;\r\n        if (returnValue === undefined) {\r\n            message = {\r\n                type: \"return\",\r\n                taskID\r\n            };\r\n        }\r\n        else {\r\n            message = {\r\n                type: \"return\",\r\n                taskID,\r\n                returnValue\r\n            };\r\n        }\r\n        if (isDefined(transferReturnValue)) {\r\n            const transferables = transferReturnValue(returnValue);\r\n            this.postMessage(message, transferables);\r\n        }\r\n        else {\r\n            this.postMessage(message);\r\n        }\r\n    }\r\n    onEvent(eventName, evt, makePayload, transferReturnValue) {\r\n        let message = null;\r\n        if (isDefined(makePayload)) {\r\n            message = {\r\n                type: \"event\",\r\n                eventName,\r\n                data: makePayload(evt)\r\n            };\r\n        }\r\n        else {\r\n            message = {\r\n                type: \"event\",\r\n                eventName\r\n            };\r\n        }\r\n        if (message.data !== undefined\r\n            && isDefined(transferReturnValue)) {\r\n            const transferables = transferReturnValue(message.data);\r\n            this.postMessage(message, transferables);\r\n        }\r\n        else {\r\n            this.postMessage(message);\r\n        }\r\n    }\r\n    addMethodInternal(methodName, asyncFunc, transferReturnValue) {\r\n        if (this.methods.has(methodName)) {\r\n            throw new Error(`${methodName} method has already been mapped.`);\r\n        }\r\n        this.methods.set(methodName, async (taskID, ...params) => {\r\n            const onProgress = new WorkerServerProgress(this, taskID);\r\n            try {\r\n                // Even functions returning void and functions returning bare, unPromised values, can be awaited.\r\n                // This creates a convenient fallback where we don't have to consider the exact return type of the function.\r\n                const returnValue = await asyncFunc(...params, onProgress);\r\n                this.onReturn(taskID, returnValue, transferReturnValue);\r\n            }\r\n            catch (exp) {\r\n                console.error(exp);\r\n                this.onError(taskID, exp.message || exp);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Registers a function call for cross-thread invocation.\r\n     * @param methodName - the name of the function to use during invocations.\r\n     * @param asyncFunc - the function to execute when the method is invoked.\r\n     * @param transferReturnValue - an (optional) function that reports on which values in the `returnValue` should be transfered instead of copied.\r\n     */\r\n    addFunction(methodName, asyncFunc, transferReturnValue) {\r\n        this.addMethodInternal(methodName, asyncFunc, transferReturnValue);\r\n    }\r\n    /**\r\n     * Registers a function call for cross-thread invocation.\r\n     * @param methodName - the name of the function to use during invocations.\r\n     * @param asyncFunc - the function to execute when the method is invoked.\r\n     */\r\n    addVoidFunction(methodName, asyncFunc) {\r\n        this.addMethodInternal(methodName, asyncFunc);\r\n    }\r\n    /**\r\n     * Registers a class method call for cross-thread invocation.\r\n     * @param methodName - the name of the method to use during invocations.\r\n     * @param obj - the object on which to find the method.\r\n     * @param transferReturnValue - an (optional) function that reports on which values in the `returnValue` should be transfered instead of copied.\r\n     */\r\n    addMethod(methodName, obj, method, transferReturnValue) {\r\n        this.addFunction(methodName, method.bind(obj), transferReturnValue);\r\n    }\r\n    /**\r\n     * Registers a class method call for cross-thread invocation.\r\n     * @param methodName - the name of the method to use during invocations.\r\n     * @param obj - the object on which to find the method.\r\n     */\r\n    addVoidMethod(methodName, obj, method) {\r\n        this.addVoidFunction(methodName, method.bind(obj));\r\n    }\r\n    addEvent(object, type, makePayload, transferReturnValue) {\r\n        object.addEventListener(type, (evt) => this.onEvent(type, evt, makePayload, transferReturnValue));\r\n    }\r\n}\r\n", "if (!hasFullscreenAPI()) {\r\n    const Elm = Element.prototype;\r\n    const Doc = Document.prototype;\r\n    if (\"webkitRequestFullscreen\" in Elm) {\r\n        Elm.requestFullscreen = Elm.webkitRequestFullscreen;\r\n        Doc.exitFullscreen = Doc.webkitRequestFullscreen;\r\n        Object.defineProperties(Doc, {\r\n            \"fullscreenEnabled\": {\r\n                get: function () {\r\n                    return this.webkitFullscreenEnabled;\r\n                }\r\n            },\r\n            \"fullscreenElement\": {\r\n                get: function () {\r\n                    return this.webkitFullscreenElement;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    else if (\"mozRequestFullScreen\" in Elm) {\r\n        Elm.requestFullscreen = Elm.mozRequestFullScreen;\r\n        Doc.exitFullscreen = Doc.mozCancelFullScreen;\r\n        Object.defineProperties(Doc, {\r\n            \"fullscreenEnabled\": {\r\n                get: function () {\r\n                    return this.mozFullScreenEnabled;\r\n                }\r\n            },\r\n            \"fullscreenElement\": {\r\n                get: function () {\r\n                    return this.mozFullScreenElement;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    else if (\"msRequestFullscreen\" in Elm) {\r\n        Elm.requestFullscreen = Elm.msRequestFullscreen;\r\n        Doc.exitFullscreen = Doc.msExitFullscreen;\r\n        Object.defineProperties(Doc, {\r\n            \"fullscreenEnabled\": {\r\n                get: function () {\r\n                    return this.msFullscreenEnabled;\r\n                }\r\n            },\r\n            \"fullscreenElement\": {\r\n                get: function () {\r\n                    return this.msFullscreenElement;\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\nexport function hasFullscreenAPI() {\r\n    return \"requestFullscreen\" in document.documentElement;\r\n}\r\n", "import { isArrayBufferView, isString } from \"juniper-tslib\";\r\nexport function isHTMLElement(obj) {\r\n    return obj instanceof HTMLElement;\r\n}\r\nexport function isXHRBodyInit(obj) {\r\n    return isString(obj)\r\n        || isArrayBufferView(obj)\r\n        || obj instanceof Blob\r\n        || obj instanceof FormData\r\n        || obj instanceof ArrayBuffer\r\n        || obj instanceof ReadableStream\r\n        || \"Document\" in globalThis && obj instanceof Document;\r\n}\r\n", "import { assertNever, isArray, isDefined, isProgressCallback, TypedEvent, TypedEventBase } from \"juniper-tslib\";\r\nexport class WorkerClient extends TypedEventBase {\r\n    worker;\r\n    static isSupported = \"Worker\" in globalThis;\r\n    taskCounter = 0;\r\n    invocations = new Map();\r\n    /**\r\n     * Creates a new pooled worker method executor.\r\n     * @param options\r\n     */\r\n    constructor(worker) {\r\n        super();\r\n        this.worker = worker;\r\n        if (!WorkerClient.isSupported) {\r\n            console.warn(\"Workers are not supported on this system.\");\r\n        }\r\n        this.worker.addEventListener(\"message\", (evt) => {\r\n            const data = evt.data;\r\n            switch (data.type) {\r\n                case \"event\":\r\n                    this.propogateEvent(data);\r\n                    break;\r\n                case \"progress\":\r\n                    this.progressReport(data);\r\n                    break;\r\n                case \"return\":\r\n                    this.methodReturned(data);\r\n                    break;\r\n                case \"error\":\r\n                    this.invocationError(data);\r\n                    break;\r\n                default:\r\n                    assertNever(data);\r\n            }\r\n        });\r\n    }\r\n    postMessage(message, transferables) {\r\n        if (message.type !== \"methodCall\") {\r\n            assertNever(message.type);\r\n        }\r\n        if (transferables) {\r\n            this.worker.postMessage(message, transferables);\r\n        }\r\n        else {\r\n            this.worker.postMessage(message);\r\n        }\r\n    }\r\n    dispose() {\r\n        this.worker.terminate();\r\n    }\r\n    propogateEvent(data) {\r\n        const evt = new TypedEvent(data.eventName);\r\n        this.dispatchEvent(Object.assign(evt, data.data));\r\n    }\r\n    progressReport(data) {\r\n        const invocation = this.invocations.get(data.taskID);\r\n        const { onProgress } = invocation;\r\n        if (onProgress) {\r\n            onProgress.report(data.soFar, data.total, data.msg, data.est);\r\n        }\r\n    }\r\n    methodReturned(data) {\r\n        const messageHandler = this.removeInvocation(data.taskID);\r\n        const { resolve } = messageHandler;\r\n        resolve(data.returnValue);\r\n    }\r\n    invocationError(data) {\r\n        const messageHandler = this.removeInvocation(data.taskID);\r\n        const { reject, methodName } = messageHandler;\r\n        reject(new Error(`${methodName} failed. Reason: ${data.errorMessage}`));\r\n    }\r\n    /**\r\n     * When the invocation has errored, we want to stop listening to the worker\r\n     * message channel so we don't eat up processing messages that have no chance\r\n     * ever pertaining to the invocation.\r\n     **/\r\n    removeInvocation(taskID) {\r\n        const invocation = this.invocations.get(taskID);\r\n        this.invocations.delete(taskID);\r\n        return invocation;\r\n    }\r\n    /**\r\n     * Execute a method on a round-robin selected worker thread.\r\n     * @param methodName - the name of the method to execute.\r\n     * @param parameters - the parameters to pass to the method.\r\n     * @param transferables - any values in any of the parameters that should be transfered instead of copied to the worker thread.\r\n     * @param onProgress - a callback for receiving progress reports on long-running invocations.\r\n     */\r\n    callMethod(methodName, parameters, transferables, onProgress) {\r\n        if (!WorkerClient.isSupported) {\r\n            return Promise.reject(new Error(\"Workers are not supported on this system.\"));\r\n        }\r\n        // Normalize method parameters.\r\n        let params = null;\r\n        let tfers = null;\r\n        if (isProgressCallback(parameters)) {\r\n            onProgress = parameters;\r\n            parameters = null;\r\n            transferables = null;\r\n        }\r\n        if (isProgressCallback(transferables)\r\n            && !onProgress) {\r\n            onProgress = transferables;\r\n            transferables = null;\r\n        }\r\n        if (isArray(parameters)) {\r\n            params = parameters;\r\n        }\r\n        if (isArray(transferables)) {\r\n            tfers = transferables;\r\n        }\r\n        // taskIDs help us keep track of return values.\r\n        const taskID = this.taskCounter++;\r\n        return new Promise((resolve, reject) => {\r\n            const invocation = {\r\n                onProgress,\r\n                resolve,\r\n                reject,\r\n                methodName\r\n            };\r\n            this.invocations.set(taskID, invocation);\r\n            let message = null;\r\n            if (isDefined(parameters)) {\r\n                message = {\r\n                    type: \"methodCall\",\r\n                    taskID,\r\n                    methodName,\r\n                    params\r\n                };\r\n            }\r\n            else {\r\n                message = {\r\n                    type: \"methodCall\",\r\n                    taskID,\r\n                    methodName\r\n                };\r\n            }\r\n            this.postMessage(message, tfers);\r\n        });\r\n    }\r\n}\r\n", "import { arrayClear, isArray, isDefined, isNullOrUndefined, isNumber, isProgressCallback, TypedEventBase } from \"juniper-tslib\";\r\nimport { WorkerClient } from \"./WorkerClient\";\r\nexport class WorkerPool extends TypedEventBase {\r\n    static isSupported = \"Worker\" in globalThis;\r\n    scriptPath;\r\n    taskCounter;\r\n    workers;\r\n    /**\r\n     * Creates a new pooled worker method executor.\r\n     * @param options\r\n     */\r\n    constructor(options, WorkerClientClass) {\r\n        super();\r\n        this.scriptPath = options.scriptPath;\r\n        let workerPoolSize = -1;\r\n        const workersDef = options.workers;\r\n        let workers = null;\r\n        if (isNumber(workersDef)) {\r\n            workerPoolSize = workersDef;\r\n        }\r\n        else if (isDefined(workersDef)) {\r\n            this.taskCounter = workersDef.curTaskCounter;\r\n            workers = workersDef.workers;\r\n            workerPoolSize = workers.length;\r\n        }\r\n        else {\r\n            workerPoolSize = navigator.hardwareConcurrency || 4;\r\n        }\r\n        // Validate parameters\r\n        if (workerPoolSize < 1) {\r\n            throw new Error(\"Worker pool size must be a postive integer greater than 0\");\r\n        }\r\n        this.workers = new Array(workerPoolSize);\r\n        if (isNullOrUndefined(workers)) {\r\n            this.taskCounter = 0;\r\n            for (let i = 0; i < workerPoolSize; ++i) {\r\n                this.workers[i] = new WorkerClientClass(new Worker(this.scriptPath, { type: \"module\" }));\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < workerPoolSize; ++i) {\r\n                this.workers[i] = new WorkerClientClass(workers[i]);\r\n            }\r\n        }\r\n        for (const worker of this.workers) {\r\n            worker.addBubbler(this);\r\n        }\r\n    }\r\n    dispose() {\r\n        for (const worker of this.workers) {\r\n            worker.dispose();\r\n        }\r\n        arrayClear(this.workers);\r\n    }\r\n    /**\r\n     * Execute a method on a round-robin selected worker thread.\r\n     * @param methodName - the name of the method to execute.\r\n     * @param params - the parameters to pass to the method.\r\n     * @param transferables - any values in any of the parameters that should be transfered instead of copied to the worker thread.\r\n     * @param onProgress - a callback for receiving progress reports on long-running invocations.\r\n     */\r\n    callMethod(methodName, params, transferables, onProgress) {\r\n        if (!WorkerClient.isSupported) {\r\n            return Promise.reject(new Error(\"Workers are not supported on this system.\"));\r\n        }\r\n        // Normalize method parameters.\r\n        let parameters = null;\r\n        let tfers = null;\r\n        if (isProgressCallback(params)) {\r\n            onProgress = params;\r\n            params = null;\r\n            transferables = null;\r\n        }\r\n        if (isProgressCallback(transferables)\r\n            && !onProgress) {\r\n            onProgress = transferables;\r\n            transferables = null;\r\n        }\r\n        if (isArray(params)) {\r\n            parameters = params;\r\n        }\r\n        if (isArray(transferables)) {\r\n            tfers = transferables;\r\n        }\r\n        const worker = this.nextWorker();\r\n        return worker.callMethod(methodName, parameters, tfers, onProgress);\r\n    }\r\n    nextWorker() {\r\n        // taskIDs help us keep track of return values.\r\n        // The modulus selects them in a round-robin fashion.\r\n        const taskID = this.taskCounter++;\r\n        const workerID = taskID % this.workers.length;\r\n        return this.workers[workerID];\r\n    }\r\n}\r\n", "\uFEFFimport { IResponse } from \"./IFetcher\";\r\n\r\nexport class ResponseTranslator {\r\n    protected async translateResponse<T, U>(responseTask: Promise<IResponse<T>>, translate: (v: T) => U | Promise<U>): Promise<IResponse<U>> {\r\n        const {\r\n            status, content, contentType, contentLength, fileName, headers, date\r\n        } = await responseTask;\r\n\r\n        return {\r\n            status,\r\n            content: await translate(content),\r\n            contentType,\r\n            contentLength,\r\n            fileName,\r\n            headers,\r\n            date\r\n        };\r\n    }\r\n}\r\n", "import type { IProgress } from \"juniper-tslib\";\r\nimport { isDefined, isString, mapJoin, progressPopper } from \"juniper-tslib\";\r\nimport { isXHRBodyInit } from \"juniper-tslib-browser\";\r\nimport type { IFetchingService, IRequest, IRequestWithBody, IResponse } from \"./IFetcher\";\r\nimport { ResponseTranslator } from \"./ResponseTranslator\";\r\n\r\nfunction trackProgress(name: string, xhr: XMLHttpRequest, target: (XMLHttpRequest | XMLHttpRequestUpload), onProgress: IProgress, skipLoading: boolean, prevTask?: Promise<void>): Promise<void> {\r\n    return new Promise((resolve: () => void, reject: (msg: string) => void) => {\r\n        let prevDone = !prevTask;\r\n        if (prevTask) {\r\n            prevTask.then(() => prevDone = true);\r\n        }\r\n\r\n        let done = false;\r\n        let loaded = skipLoading;\r\n        function maybeResolve() {\r\n            if (loaded && done) {\r\n                resolve();\r\n            }\r\n        }\r\n\r\n        function onError(msg: string) {\r\n            return () => {\r\n                if (prevDone) {\r\n                    reject(`${msg} (${xhr.status})`);\r\n                }\r\n            }\r\n        }\r\n\r\n        target.addEventListener(\"loadstart\", () => {\r\n            if (prevDone && !done && onProgress) {\r\n                onProgress.report(0, 1, name);\r\n            }\r\n        });\r\n\r\n        target.addEventListener(\"progress\", (ev: Event) => {\r\n            if (prevDone && !done) {\r\n                const evt = ev as ProgressEvent<XMLHttpRequestEventTarget>;\r\n                if (onProgress) {\r\n                    onProgress.report(evt.loaded, Math.max(evt.loaded, evt.total), name);\r\n                }\r\n                if (evt.loaded === evt.total) {\r\n                    loaded = true;\r\n                    maybeResolve();\r\n                }\r\n            }\r\n        });\r\n\r\n        target.addEventListener(\"load\", () => {\r\n            if (prevDone && !done) {\r\n                if (onProgress) {\r\n                    onProgress.report(1, 1, name);\r\n                }\r\n                done = true;\r\n                maybeResolve();\r\n            }\r\n        });\r\n\r\n        target.addEventListener(\"error\", onError(\"error\"));\r\n        target.addEventListener(\"abort\", onError(\"abort\"));\r\n        target.addEventListener(\"timeout\", onError(\"timeout\"));\r\n    });\r\n}\r\n\r\nfunction sendRequest(xhr: XMLHttpRequest, xhrType: XMLHttpRequestResponseType, method: string, path: string, timeout: number, headers: Map<string, string>, body?: BodyInit): void {\r\n    xhr.open(method, path);\r\n    xhr.responseType = xhrType;\r\n    xhr.timeout = timeout;\r\n    if (headers) {\r\n        for (const [key, value] of headers) {\r\n            xhr.setRequestHeader(key, value);\r\n        }\r\n    }\r\n\r\n    if (isDefined(body)) {\r\n        xhr.send(body);\r\n    }\r\n    else {\r\n        xhr.send();\r\n    }\r\n}\r\n\r\nfunction readResponseHeader<T>(headers: Map<string, string>, key: string, translate: (value: string) => T): T {\r\n    if (!headers.has(key)) {\r\n        return null;\r\n    }\r\n\r\n    const value = headers.get(key);\r\n    try {\r\n        const translated = translate(value);\r\n        headers.delete(key);\r\n        return translated;\r\n    }\r\n    catch (exp) {\r\n        console.warn(key, exp);\r\n    }\r\n    return null;\r\n}\r\n\r\nconst FILE_NAME_PATTERN = /filename=\\\"(.+)\\\"(;|$)/;\r\nfunction readResponse<T>(xhr: XMLHttpRequest) {\r\n    const parts = xhr\r\n        .getAllResponseHeaders()\r\n        .split(/[\\r\\n]+/)\r\n        .map<[string, string]>(line => {\r\n            const parts = line.split(\": \");\r\n            const key = parts.shift();\r\n            const value = parts.join(\": \");\r\n            return [key, value];\r\n        })\r\n        .filter(kv => kv[0].length > 0);\r\n\r\n    const headers = new Map<string, string>(parts);\r\n\r\n    const response: IResponse<T> = {\r\n        status: xhr.status,\r\n        content: xhr.response as T,\r\n        contentType: readResponseHeader(headers, \"content-type\", v => v),\r\n        contentLength: readResponseHeader(headers, \"content-length\", parseFloat),\r\n        fileName: readResponseHeader(headers, \"content-disposition\", v => {\r\n            if (isDefined(v)) {\r\n                const match = v.match(FILE_NAME_PATTERN);\r\n                if (isDefined(match)) {\r\n                    return match[1];\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }),\r\n        date: readResponseHeader(headers, \"date\", v => new Date(v)),\r\n        headers\r\n    };\r\n\r\n    return response;\r\n}\r\n\r\nexport class FetchingServiceImpl\r\n    extends ResponseTranslator\r\n    implements IFetchingService {\r\n\r\n    private readonly defaultPostHeaders = new Map<string, string>();\r\n\r\n    setRequestVerificationToken(value: string): void {\r\n        this.defaultPostHeaders.set(\"RequestVerificationToken\", value);\r\n    }\r\n\r\n    private async headOrGetXHR<T>(method: string, xhrType: XMLHttpRequestResponseType, request: IRequest, progress: IProgress): Promise<IResponse<T>> {\r\n        const xhr = new XMLHttpRequest();\r\n        const download = trackProgress(`requesting: ${request.path}`, xhr, xhr, progress, true);\r\n\r\n        sendRequest(xhr, xhrType, method, request.path, request.timeout, request.headers);\r\n\r\n        await download;\r\n        return readResponse(xhr);\r\n    }\r\n\r\n    private getXHR<T>(xhrType: XMLHttpRequestResponseType, request: IRequest, progress: IProgress): Promise<IResponse<T>> {\r\n        return this.headOrGetXHR(\"GET\", xhrType, request, progress);\r\n    }\r\n\r\n    head(request: IRequest): Promise<IResponse<void>> {\r\n        return this.headOrGetXHR(\"HEAD\", \"\", request, null);\r\n    }\r\n\r\n    private async postXHR<T>(xhrType: XMLHttpRequestResponseType, request: IRequestWithBody, prog: IProgress): Promise<IResponse<T>> {\r\n\r\n        let body: BodyInit = null;\r\n\r\n        \r\n        const headers = mapJoin(new Map<string, string>(), this.defaultPostHeaders, request.headers);\r\n\r\n        if (request.body instanceof FormData\r\n            && isDefined(headers)) {\r\n            const toDelete = new Array<string>();\r\n            for (const key of headers.keys()) {\r\n                if (key.toLowerCase() === \"content-type\") {\r\n                    toDelete.push(key);\r\n                }\r\n            }\r\n            for (const key of toDelete) {\r\n                headers.delete(key);\r\n            }\r\n        }\r\n\r\n        if (isXHRBodyInit(request.body) && !isString(request.body)) {\r\n            body = request.body;\r\n        }\r\n        else if (isDefined(request.body)) {\r\n            body = JSON.stringify(request.body);\r\n        }\r\n\r\n        const progs = progressPopper(prog);\r\n        const xhr = new XMLHttpRequest();        \r\n        const upload = isDefined(body)\r\n            ? trackProgress(\"uploading\", xhr, xhr.upload, progs.pop(), false)\r\n            : Promise.resolve();\r\n        const download = trackProgress(\"saving\", xhr, xhr, progs.pop(), true, upload);\r\n\r\n        sendRequest(xhr, xhrType, \"POST\", request.path, request.timeout, headers, body);\r\n\r\n        await upload;\r\n        await download;\r\n        return readResponse(xhr);\r\n    }\r\n\r\n    getBlob(request: IRequest, progress: IProgress): Promise<IResponse<Blob>> {\r\n        return this.getXHR<Blob>(\"blob\", request, progress);\r\n    }\r\n\r\n    postObjectForBlob(request: IRequestWithBody, progress: IProgress): Promise<IResponse<Blob>> {\r\n        return this.postXHR<Blob>(\"blob\", request, progress);\r\n    }\r\n\r\n    getBuffer(request: IRequest, progress: IProgress): Promise<IResponse<ArrayBuffer>> {\r\n        return this.getXHR<ArrayBuffer>(\"arraybuffer\", request, progress);\r\n    }\r\n\r\n    postObjectForBuffer(request: IRequestWithBody, progress: IProgress): Promise<IResponse<ArrayBuffer>> {\r\n        return this.postXHR<ArrayBuffer>(\"arraybuffer\", request, progress);\r\n    }\r\n\r\n    getText(request: IRequest, progress: IProgress): Promise<IResponse<string>> {\r\n        return this.getXHR<string>(\"text\", request, progress);\r\n    }\r\n\r\n    postObjectForText(request: IRequestWithBody, progress: IProgress): Promise<IResponse<string>> {\r\n        return this.postXHR<string>(\"text\", request, progress);\r\n    }\r\n\r\n    async getObject<T>(request: IRequest, progress: IProgress): Promise<T> {\r\n        const response = await this.getXHR<T>(\"json\", request, progress);\r\n        return response.content;\r\n    }\r\n\r\n    async postObjectForObject<T>(request: IRequestWithBody, progress: IProgress): Promise<T> {\r\n        const response = await this.postXHR<T>(\"json\", request, progress);\r\n        return response.content;\r\n    }\r\n\r\n    postObject(request: IRequestWithBody, progress: IProgress): Promise<IResponse<void>> {\r\n        return this.postXHR<void>(\"\", request, progress);\r\n    }\r\n\r\n    getFile(request: IRequest, progress: IProgress): Promise<IResponse<string>> {\r\n        return this.translateResponse(\r\n            this.getBlob(request, progress),\r\n            URL.createObjectURL);\r\n    }\r\n\r\n    postObjectForFile(request: IRequestWithBody, progress: IProgress): Promise<IResponse<string>> {\r\n        return this.translateResponse(\r\n            this.postObjectForBlob(request, progress),\r\n            URL.createObjectURL);\r\n    }\r\n\r\n    getXml(request: IRequest, progress: IProgress): Promise<IResponse<HTMLElement>> {\r\n        return this.translateResponse(\r\n            this.getXHR<Document>(\"document\", request, progress),\r\n            doc => doc.documentElement);\r\n    }\r\n\r\n    postObjectForXml(request: IRequestWithBody, progress: IProgress): Promise<IResponse<HTMLElement>> {\r\n        return this.translateResponse(\r\n            this.postXHR<Document>(\"document\", request, progress),\r\n            doc => doc.documentElement);\r\n    }\r\n\r\n    getImageBitmap(request: IRequest, progress: IProgress): Promise<IResponse<ImageBitmap>> {\r\n        return this.translateResponse(\r\n            this.getBlob(request, progress),\r\n            createImageBitmap)\r\n    }\r\n\r\n    async postObjectForImageBitmap(request: IRequestWithBody, progress: IProgress): Promise<IResponse<ImageBitmap>> {\r\n        return this.translateResponse(\r\n            this.postObjectForBlob(request, progress),\r\n            createImageBitmap);\r\n    }\r\n}\r\n", "import { WorkerServer } from \"juniper-tslib-worker\";\r\nimport { FetchingServiceImpl } from \"./FetchingServiceImpl\";\r\nimport type { IFetchingService, IResponse } from \"./IFetcher\";\r\n\r\nexport class FetchingServiceServer extends WorkerServer {\r\n    constructor(self: DedicatedWorkerGlobalScope) {\r\n        super(self);\r\n\r\n        const fetcher = new FetchingServiceImpl();\r\n        addFetcherMethods(this, fetcher);\r\n    }\r\n}\r\n\r\nfunction getContent<T extends Transferable>(response: IResponse<T>): Array<Transferable> {\r\n    return [response.content];\r\n}\r\n\r\nexport function addFetcherMethods(server: WorkerServer, fetcher: IFetchingService) {\r\n    server.addVoidMethod(\"setRequestVerificationToken\", fetcher, fetcher.setRequestVerificationToken);\r\n\r\n    server.addMethod(\"getBuffer\", fetcher, fetcher.getBuffer, getContent);\r\n    server.addMethod(\"postObjectForBuffer\", fetcher, fetcher.postObjectForBuffer, getContent);\r\n    server.addMethod(\"getImageBitmap\", fetcher, fetcher.getImageBitmap, getContent);\r\n    server.addMethod(\"postObjectForImageBitmap\", fetcher, fetcher.postObjectForImageBitmap, getContent);\r\n\r\n    server.addMethod(\"getObject\", fetcher, fetcher.getObject);\r\n    server.addMethod(\"getFile\", fetcher, fetcher.getFile);\r\n    server.addMethod(\"getText\", fetcher, fetcher.getText);\r\n    server.addMethod(\"postObject\", fetcher, fetcher.postObject);\r\n    server.addMethod(\"postObjectForObject\", fetcher, fetcher.postObjectForObject);\r\n    server.addMethod(\"postObjectForFile\", fetcher, fetcher.postObjectForFile);\r\n    server.addMethod(\"postObjectForText\", fetcher, fetcher.postObjectForText);\r\n\r\n    server.addMethod(\"head\", fetcher, fetcher.head);\r\n}\r\n", "import { FetchingServiceServer } from \"../FetchingServiceServer\";\r\n(globalThis as any).server = new FetchingServiceServer((globalThis as any) as DedicatedWorkerGlobalScope);"],
  "mappings": "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",
  "names": []
}
