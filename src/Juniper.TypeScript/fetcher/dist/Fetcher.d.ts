import type { CanvasImageTypes } from "juniper-dom";
import { MediaType } from "juniper-mediatypes";
import { IProgress } from "juniper-tslib";
import { IFetcher, IFetcherGetHeadersAndProgressAndTimeoutAndWithCredentials, IFetcherGetResult, IFetcherHeadHeadersAndTimeoutAndWithCredentials, IFetcherHeadResult, IFetcherPostHeadersAndProgressAndBodyAndTimeoutAndWithCredentials, IFetcherPostResult, IFetchingService, IResponse } from "./IFetcher";
import { ResponseTranslator } from "./ResponseTranslator";
declare type HTTPMethods = "GET" | "POST" | "HEAD";
declare class RequestBuilder extends ResponseTranslator implements IFetcherGetHeadersAndProgressAndTimeoutAndWithCredentials, IFetcherPostHeadersAndProgressAndBodyAndTimeoutAndWithCredentials, IFetcherHeadHeadersAndTimeoutAndWithCredentials, IFetcherGetResult, IFetcherPostResult, IFetcherHeadResult {
    private readonly fetcher;
    private readonly useBlobURIs;
    private readonly method;
    private readonly request;
    private prog;
    constructor(fetcher: IFetchingService, useBlobURIs: boolean, method: HTTPMethods, path: string, handler?: string);
    header(name: string, value: string): this;
    timeout(value: number): this;
    progress(prog: IProgress): this;
    body(body: any, contentType?: string | MediaType): this;
    withCredentials(): this;
    private media;
    private content;
    private accept;
    blob(acceptType?: string | MediaType): Promise<IResponse<Blob>>;
    buffer(acceptType?: string | MediaType): Promise<IResponse<ArrayBuffer>>;
    file(acceptType?: string | MediaType): Promise<IResponse<string>>;
    text(acceptType?: string | MediaType): Promise<IResponse<string>>;
    object<T>(acceptType?: string | MediaType): Promise<T>;
    xml(acceptType?: string | MediaType): Promise<IResponse<HTMLElement>>;
    imageBitmap(acceptType?: string | MediaType): Promise<IResponse<ImageBitmap>>;
    exec(): Promise<IResponse<void>>;
    canvasImage(acceptType?: string | MediaType): Promise<IResponse<CanvasImageTypes>>;
    private audioBlob;
    audioBuffer(audioCtx: BaseAudioContext, acceptType?: string | MediaType): Promise<IResponse<AudioBuffer>>;
    private htmlElement;
    image(acceptType?: string | MediaType): Promise<IResponse<HTMLImageElement>>;
    audio(autoPlaying: boolean, looping: boolean, acceptType?: string | MediaType): Promise<IResponse<HTMLAudioElement>>;
    video(autoPlaying: boolean, looping: boolean, acceptType?: string | MediaType): Promise<IResponse<HTMLVideoElement>>;
    private getScript;
    script(test: () => boolean): Promise<void>;
    module<T>(): Promise<T>;
    wasm<T>(imports: Record<string, Record<string, WebAssembly.ImportValue>>): Promise<T>;
    worker(type?: WorkerType): Promise<Worker>;
}
export declare class Fetcher implements IFetcher {
    private readonly fetcher;
    private readonly useBlobURIs;
    constructor(fetcher: IFetchingService, useBlobURIs: boolean);
    get(path: string, handler?: string): RequestBuilder;
    post(path: string, handler?: string): RequestBuilder;
    head(path: string, handler?: string): RequestBuilder;
}
export {};
