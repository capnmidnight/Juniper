import { IResponse } from "@juniper-lib/util";
import { Task } from "@juniper-lib/events";
import { IFetcher } from "@juniper-lib/fetcher";
import { IProgress } from "@juniper-lib/progress";
import { FileViewValue } from "@juniper-lib/widgets";
import { DataTreeModel } from "../models/DataTreeModel";
import { DataType, DataTypeMap, StorageType } from "../models/DataType";
import { ENTITY, EntityModel, ReviewParts } from "../models/EntityModel";
import { ENTITY_TYPE, EntityTypeModel, SetEntityTypeInput } from "../models/EntityTypeModel";
import { FileModel } from "../models/FileModel";
import { TypedNameOrId } from "../models/NameOrId";
import { PropertyModel } from "../models/PropertyModel";
import { PropertyTemplateModel } from "../models/PropertyTemplateModel";
import { PROPERTY_TYPE, PropertyTypeModel } from "../models/PropertyTypeModel";
import { PropertyTypeValidValueModel } from "../models/PropertyTypeValidValueModel";
import { GetRelationshipInput, RelationshipModel } from "../models/RelationshipModel";
import { RelationshipTemplateModel } from "../models/RelationshipTemplateModel";
import { RELATIONSHIP_TYPE, RelationshipTypeModel } from "../models/RelationshipTypeModel";
import { RoleModel } from "../models/RoleModel";
import { UserModel } from "../models/UserModel";
import { UserRoleModel } from "../models/UserRoleModel";
export declare class CedrusDataAPI {
    #private;
    static get dataSourceTask(): Task<CedrusDataAPI>;
    protected readonly fetcher: IFetcher;
    constructor(fetcher?: IFetcher);
    protected get<T>(controller: string, path: string, prog?: IProgress): Promise<T>;
    getObject<T>(path: string, prog?: IProgress): Promise<T>;
    getText(path: string, prog?: IProgress): Promise<string>;
    protected head(controller: string, path: string): Promise<IResponse>;
    protected post<T>(controller: string, path: string, body: any, prog?: IProgress): Promise<T>;
    protected delete(controller: string, path: string): Promise<void>;
    getEndpoints(): Promise<object[]>;
    getEntities(...searchParams: TypedNameOrId<"entity" | "entityType">[]): Promise<EntityModel[]>;
    getEntity(entityId: number): Promise<EntityModel>;
    getEntity(entityName: string): Promise<EntityModel>;
    setEntity(name: string, type: ENTITY_TYPE): Promise<EntityModel>;
    deleteEntity(entity: EntityModel): Promise<void>;
    markEntityReviewed(entity: ENTITY): Promise<ReviewParts>;
    getEntityTypes(...searchParams: ENTITY_TYPE[]): Promise<EntityTypeModel[]>;
    getEntityType(entityTypeId: number): Promise<EntityTypeModel>;
    getEntityType(entityTypeName: string): Promise<EntityTypeModel>;
    setEntityType(input: SetEntityTypeInput): Promise<EntityTypeModel>;
    deleteEntityType(entityType: EntityTypeModel): Promise<void>;
    getFiles(): Promise<FileModel[]>;
    getFileInfo(path: string): Promise<IResponse<void>>;
    uploadFiles(files: File[] | FileList | IterableIterator<File>, prog?: IProgress): Promise<FileModel[]>;
    mergeFiles(files: FileViewValue[], prog?: IProgress): Promise<string[]>;
    deleteFile(file: FileModel): Promise<void>;
    getProperties(...searchParams: TypedNameOrId<"entity" | "entityType" | "propertyType">[]): Promise<PropertyModel[]>;
    setProperty<DataTypeT extends DataType, StorageTypeT extends StorageType>(entity: ENTITY, type: PROPERTY_TYPE, value: DataTypeMap[DataTypeT][StorageTypeT], unitOfMeasure: string, reference?: ENTITY): Promise<PropertyModel<DataTypeT, StorageTypeT>>;
    deleteProperty(property: PropertyModel): Promise<void>;
    getPropertyTypes(): Promise<PropertyTypeModel<DataType, StorageType>[]>;
    setPropertyType<DataTypeT extends DataType, StorageTypeT extends StorageType>(name: string, type: DataTypeT, storage: StorageTypeT, category: string, description: string): Promise<PropertyTypeModel<DataType, StorageType>>;
    deletePropertyType(propertyType: PropertyTypeModel): Promise<void>;
    getPropertyTypeValidValues(propertyType?: PropertyTypeModel): Promise<PropertyTypeValidValueModel<DataType, StorageType>[]>;
    setPropertyTypeValidValue<DataTypeT extends DataType, StorageTypeT extends StorageType>(propertyType: PropertyTypeModel<DataTypeT, StorageTypeT>, ...values: string[]): Promise<PropertyTypeValidValueModel<DataTypeT, StorageTypeT>[]>;
    deletePropertyTypeValidValue(propertyTypeValidValue: PropertyTypeValidValueModel): Promise<void>;
    getRelationships(searchParams?: GetRelationshipInput): Promise<RelationshipModel[]>;
    setRelationship(parentEntity: EntityModel, childEntity: EntityModel, propertyEntity: EntityModel, type?: RelationshipTypeModel): Promise<RelationshipModel>;
    deleteRelationship(relationship: RelationshipModel): Promise<void>;
    getRelationshipTypes(): Promise<RelationshipTypeModel[]>;
    setRelationshipType(parentRole: string, childRole?: string): Promise<RelationshipTypeModel>;
    deleteRelationshipType(relationshipType: RelationshipTypeModel): Promise<void>;
    getRoles(): Promise<RoleModel[]>;
    getRoleUsers(role?: RoleModel): Promise<UserRoleModel[]>;
    createRole(name: string): Promise<RoleModel>;
    deleteRole(role: RoleModel): Promise<void>;
    getTags(): Promise<string[]>;
    tagEntity(entity: EntityModel, tagName: string): Promise<EntityModel>;
    getPropertyTemplates(entityType?: EntityTypeModel): Promise<PropertyTemplateModel[]>;
    setPropertyTemplate(name: string, entityType: EntityTypeModel, ...propertyTypes: PropertyTypeModel[]): Promise<PropertyTemplateModel>;
    deletePropertyTemplate(template: PropertyTemplateModel): Promise<void>;
    getRelationshipTemplates(entityType?: EntityTypeModel): Promise<RelationshipTemplateModel[]>;
    setRelationshipTemplate(name: string, entityType: ENTITY_TYPE, relationshipType: RELATIONSHIP_TYPE, propertyEntityType: ENTITY_TYPE, ...entityTypes: ENTITY_TYPE[]): Promise<RelationshipTemplateModel>;
    deleteRelationshipTemplate(template: RelationshipTemplateModel): Promise<void>;
    getTree(...searchParams: TypedNameOrId<"entityType" | "propertyType">[]): Promise<DataTreeModel>;
    getUsers(): Promise<UserModel[]>;
    getUserRoles(user?: UserModel): Promise<UserRoleModel[]>;
    setUser(userName: string, email: string): Promise<UserModel>;
    deleteUser(user: UserModel): Promise<void>;
    removeUserFromRole(user: UserModel, role: RoleModel): Promise<void>;
    addUserToRole(user: UserModel, role: RoleModel): Promise<UserRoleModel>;
    grantUserAccess(userId: number): Promise<void>;
    getUnitsData(): Promise<Map<string, string[]>>;
    getUnitAbbreviations(): Promise<Map<string, string>>;
    convertUnits(value: number, from: string, to: string): Promise<number>;
}
//# sourceMappingURL=CedrusDataAPI.d.ts.map