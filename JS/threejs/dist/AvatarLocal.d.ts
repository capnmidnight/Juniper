import { IDisposable } from "@juniper-lib/util";
import { TypedEvent, TypedEventTarget } from "@juniper-lib/events";
import { Object3D, Quaternion, Vector2, Vector3 } from "three";
import type { BodyFollower } from "./animation/BodyFollower";
import { BufferReaderWriter } from "./BufferReaderWriter";
import { BaseEnvironment } from "./environment/BaseEnvironment";
import { IPointer } from "./eventSystem/devices/IPointer";
import type { Fader } from "./Fader";
import { ErsatzObject } from "./objects";
export declare class AvatarResetEvent extends TypedEvent<"avatarreset"> {
    constructor();
}
type AvatarLocalEvents = {
    avatarreset: AvatarResetEvent;
};
export declare class AvatarLocal extends TypedEventTarget<AvatarLocalEvents> implements ErsatzObject, IDisposable {
    private readonly env;
    private readonly avatarResetEvt;
    private controlMode;
    private snapTurnRadians;
    private readonly sensitivities;
    private readonly B;
    private readonly F;
    private readonly U;
    private readonly P;
    private readonly M;
    private readonly E;
    private readonly Q1;
    private readonly Q2;
    private readonly Q3;
    private readonly Q4;
    private readonly motion;
    private readonly rotStage;
    private readonly axisControl;
    private readonly deviceQ;
    private readonly uv;
    private readonly duv;
    private readonly move;
    private readonly move2;
    private readonly radialAcceleration;
    private readonly radialSpeed;
    private readonly radialEdgeFactor;
    private readonly minFOVDegrees;
    private readonly maxFOVDegrees;
    private readonly minPitchRadians;
    private readonly maxPitchRadians;
    private readonly followers;
    private readonly onKeyDown;
    private readonly onKeyUp;
    private dz;
    private _headingRadians;
    private _pitchRadians;
    private _rollRadians;
    private headX;
    private headZ;
    private _worldHeadingRadians;
    private _worldPitchRadians;
    private fwrd;
    private back;
    private left;
    private rght;
    private fwrd2;
    private back2;
    private left2;
    private rght2;
    private up;
    private down;
    private grow;
    private shrk;
    private _keyboardControlEnabled;
    private _height;
    private _disableHorizontal;
    private _disableVertical;
    private _invertHorizontal;
    private _invertVertical;
    readonly head: Object3D;
    readonly worldPos: Vector3;
    readonly worldQuat: Quaternion;
    lockMovement: boolean;
    fovZoomEnabled: boolean;
    set disableVertical(v: boolean);
    set invertVertical(v: boolean);
    set disableHorizontal(v: boolean);
    set invertHorizontal(v: boolean);
    get height(): number;
    get content3d(): Object3D<import("three").Event>;
    get worldHeadingRadians(): number;
    get worldPitchRadians(): number;
    private get fov();
    private set fov(value);
    get stage(): Object3D<import("three").Event>;
    constructor(env: BaseEnvironment, fader: Fader);
    snapTurn(direction: number): void;
    get keyboardControlEnabled(): boolean;
    set keyboardControlEnabled(v: boolean);
    addFollower(follower: BodyFollower): void;
    onMove(pointer: IPointer, uv: Vector2, duv: Vector2): void;
    setMode(pointer: IPointer): void;
    private gestureSatisfied;
    get name(): string;
    set name(v: string);
    get headingRadians(): number;
    private setHeading;
    get pitchRadians(): number;
    private setPitch;
    get rollRadians(): number;
    private setRoll;
    setHeadingImmediate(radians: number): void;
    setOrientationImmediate(headingRadians: number, pitchRadians: number): void;
    zoom(dz: number): void;
    update(dt: number): void;
    private scaleRadialComponent;
    lookAt(obj: Object3D): void;
    private updateOrientation;
    reset(): void;
    private resetFollowers;
    private deviceOrientation;
    private screenOrientation;
    private alphaOffset;
    private onDeviceOrientationChangeEvent;
    private onScreenOrientationChangeEvent;
    private motionEnabled;
    private getPermission;
    startMotionControl(): Promise<void>;
    stopMotionControl(): void;
    dispose(): void;
    get bufferSize(): number;
    private readonly pointersToSend;
    writeState(buffer: BufferReaderWriter): void;
}
export {};
//# sourceMappingURL=AvatarLocal.d.ts.map