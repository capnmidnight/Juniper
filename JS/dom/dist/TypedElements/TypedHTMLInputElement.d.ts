import { TypedEventMap } from "@juniper-lib/events";
import { TypedHTMLElement } from "./TypedHTMLElement";
export declare class TypedHTMLInputElement<EventMapT extends TypedEventMap<string> = TypedEventMap<string>> extends TypedHTMLElement<EventMapT> implements HTMLInputElement {
    #private;
    static observedAttributes: string[];
    attributeChangedCallback(name: string, _oldValue: string, newValue: string): void;
    protected readonly element: HTMLInputElement;
    constructor();
    connectedCallback(): void;
    get accept(): string;
    set accept(v: string);
    get align(): string;
    set align(v: string);
    get alt(): string;
    set alt(v: string);
    get autocomplete(): AutoFill;
    set autocomplete(v: AutoFill);
    get capture(): string;
    set capture(v: string);
    get checked(): boolean;
    set checked(v: boolean);
    get defaultChecked(): boolean;
    set defaultChecked(v: boolean);
    get defaultValue(): string;
    set defaultValue(v: string);
    get dirName(): string;
    set dirName(v: string);
    get disabled(): boolean;
    set disabled(v: boolean);
    get files(): FileList;
    set files(v: FileList);
    get form(): HTMLFormElement;
    get formAction(): string;
    set formAction(v: string);
    get formEnctype(): string;
    set formEnctype(v: string);
    get formMethod(): string;
    set formMethod(v: string);
    get formNoValidate(): boolean;
    set formNoValidate(v: boolean);
    get formTarget(): string;
    set formTarget(v: string);
    get height(): number;
    set height(v: number);
    get indeterminate(): boolean;
    set indeterminate(v: boolean);
    get labels(): NodeListOf<HTMLLabelElement>;
    get list(): HTMLDataListElement;
    get max(): string;
    set max(v: string);
    get maxLength(): number;
    set maxLength(v: number);
    get min(): string;
    set min(v: string);
    get minLength(): number;
    set minLength(v: number);
    get multiple(): boolean;
    set multiple(v: boolean);
    get name(): string;
    set name(v: string);
    get pattern(): string;
    set pattern(v: string);
    get placeholder(): string;
    set placeholder(v: string);
    get readOnly(): boolean;
    set readOnly(v: boolean);
    get required(): boolean;
    set required(v: boolean);
    get selectionDirection(): "none" | "forward" | "backward";
    set selectionDirection(v: "none" | "forward" | "backward");
    get selectionEnd(): number;
    set selectionEnd(v: number);
    get selectionStart(): number;
    set selectionStart(v: number);
    get size(): number;
    set size(v: number);
    get src(): string;
    set src(v: string);
    get step(): string;
    set step(v: string);
    get type(): string;
    set type(v: string);
    get useMap(): string;
    set useMap(v: string);
    get validationMessage(): string;
    get validity(): ValidityState;
    get value(): string;
    set value(v: string);
    get valueAsDate(): Date;
    set valueAsDate(v: Date);
    get valueAsNumber(): number;
    set valueAsNumber(v: number);
    get webkitEntries(): readonly FileSystemEntry[];
    get webkitdirectory(): boolean;
    set webkitdirectory(v: boolean);
    get width(): number;
    set width(v: number);
    get willValidate(): boolean;
    checkValidity(): boolean;
    reportValidity(): boolean;
    select(): void;
    setCustomValidity(error: string): void;
    setRangeText(replacement: string): void;
    setRangeText(replacement: string, start: number, end: number, selectionMode?: SelectionMode): void;
    setSelectionRange(start: number | null, end: number | null, direction?: "forward" | "backward" | "none"): void;
    showPicker(): void;
    stepDown(n?: number): void;
    stepUp(n?: number): void;
    get popoverTargetAction(): string;
    set popoverTargetAction(v: string);
    get popoverTargetElement(): Element;
    set popoverTargetElement(v: Element);
}
//# sourceMappingURL=TypedHTMLInputElement.d.ts.map